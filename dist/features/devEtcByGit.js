'use strict';const path=require('path'),Mowa=require('../server.js'),Util=Mowa.Util,_=Util._,fs=Util.fs,{JsonConfigProvider}=require('rk-config'),AppModule=require('../appmodule.js'),createDevConfigProvider=devName=>{let DevConfigProvider=class DevConfigProvider extends JsonConfigProvider{constructor(configDir,baseName,envFlag,opts){super(configDir,baseName,envFlag,opts);this._devName=devName}async load(){let cfg=await super.load(),devCfgPath=path.join(this._configDir,this._baseName+'.'+this._devName+'.json');this.devConfig=(await fs.pathExists(devCfgPath))?await fs.readJson(devCfgPath):{};return _.defaultsDeep({},this.devConfig,cfg)}async save(){await super.save();if(!_.isEmpty(this.devConfig)){let devCfgPath=path.join(this._configDir,this._baseName+'.'+this._devName+'.json');await this._writeFile(devCfgPath,this.devConfig)}}};return DevConfigProvider};module.exports={type:Mowa.Feature.INIT,load_:async(appModule,options)=>{if(appModule!==appModule.serverModule){throw new Mowa.Error.InvalidConfiguration('"devEtcByGit" feature can only be enabled in server configuration.',appModule)}let devNameFrom=options&&options.devNameFrom||'name',devName;if('name'===devNameFrom){devName=Util.runCmdSync('git config --global user.name').trim();if(''===devName){throw new Error('Unable to read "user.name" of git config.')}devName=_.kebabCase(devName)}else if('email'!==devNameFrom){devName=Util.runCmdSync('git config --global user.email').trim();if(''===devName){throw new Error('Unable to read "user.email" of git config.')}let i=devName.indexOf('@');if(1>i){throw new Error('Invalid "user.email" of git config.')}devName=devName.substr(0,i)}else{throw new Mowa.Error.InvalidConfiguration('"devNameFrom" should be name or email.',appModule,'devEtcByGit.devNameFrom')}AppModule.ConfigProvider=createDevConfigProvider(devName)}};