'use strict';const Mowa=require('../server.js');const Util=Mowa.Util;const _=Util._;const Promise=Util.Promise;module.exports={type:Mowa.Feature.ENGINE,load_:function(appModule,options){let app=appModule.router;app.env=appModule.env;app.proxy=Util.S(options.trustProxy).toBoolean();if('subdomainOffset'in options&&options.subdomainOffset!==2){if(options.subdomainOffset<2){throw new Mowa.Error.InvalidConfiguration('Invalid subdomainOffset. Should be larger or equal to 2.',appModule,'koa.subdomainOffset')}app.subdomainOffset=options.subdomainOffset}if(options.keys){if(!_.isArray(options.keys)){app.keys=[options.keys]}else{app.keys=options.keys}}app.on('error',(err,ctx)=>{if(err.status&&err.status<500){appModule.log('warn',`[${err.status}] `+err.message,ctx&&_.pick(ctx,['method','url','ip']))}else{appModule.log('error',err.message,err.stack)}});let port=options.httpPort||2331;if(!appModule.serverModule.options.deaf){appModule.httpServer=require('http').createServer(app.callback());appModule.serverModule.addHttpServer(appModule,appModule.httpServer);appModule.on('after:'+Mowa.Feature.ROUTING,()=>{appModule.httpServer.listen(port,function(err){if(err)throw err;if(options.publicUrl){appModule.publicUrl=options.publicUrl}else{appModule.publicUrl='http://localhost:'+port}appModule.log('info',`A http service is listening on port [${this.address().port}] ...`);appModule.emit('httpReady')})})}else{if(options.publicUrl){appModule.publicUrl=options.publicUrl}else{appModule.publicUrl='http://localhost:'+port}}return Promise.resolve()}};