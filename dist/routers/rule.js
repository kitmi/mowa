'use strict';require('debug')('tracing')(__filename);const path=require('path');const Util=require('../util.js');const Router=require('koa-router');const ALLOWED_METHODS=new Set(['options','get','head','post','put','delete','trace','connect']);module.exports=function loadRuleRouter(appModule,baseRoute,options){options=Object.assign({controllers:path.join(appModule.backendPath,'controllers')},options);let router=baseRoute==='/'?new Router:new Router({prefix:baseRoute});if(options.middlewares){appModule.useMiddlewares(router,options.middlewares)}if(!options.rules){appModule.invalidConfig('routes.*.rule','Missing rules definition.')}Util._.forOwn(options.rules,(methods,subRoute)=>{let pos=subRoute.indexOf(':/');if(pos!=-1){if(pos==0){appModule.invalidConfig('routes.*.rule.rules','Unrecognized route rule syntax: '+subRoute)}let embeddedMethod=subRoute.substr(0,pos).toLocaleLowerCase();subRoute=subRoute.substr(pos+2);methods={[embeddedMethod]:methods}}subRoute=Util.ensureLeftSlash(subRoute);if(Util._.isString(methods)){methods={get:methods}}Util._.forOwn(methods,(middlewares,method)=>{if(!ALLOWED_METHODS.has(method)){appModule.invalidConfig('routes.*.rule.rules','Unsupported http method: '+method)}if(Util._.isString(middlewares)){middlewares={action:path.join(options.controllers,middlewares)}}else{if('action'in middlewares){middlewares['action']=path.join(options.controllers,middlewares['action'])}}appModule.addRoute(router,method,subRoute,middlewares)})});appModule.addRouter(router);return Promise.resolve()};