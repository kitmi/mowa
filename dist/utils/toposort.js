'use strict';const Util=require('../util');let TopoSort=class TopoSort{constructor(){this.ins=Object.create(null);this.mapFrom=new Map;this.mapTo=new Map;this.add=(node,nodes)=>{nodes=Array.isArray(nodes)?nodes:[nodes];this.ins[node]=this.ins[node]||0;for(var i=0,n;i<nodes.length;++i){n=nodes[i];this.ins[n]=this.ins[n]?this.ins[n]+1:1;if(this.mapTo[n]){this.mapTo[n].push(node)}else{this.mapTo[n]=[node]}}this.mapFrom[node]=this.mapFrom[node]?this.mapFrom[node].concat(nodes):nodes};this.hasDependency=node=>{return this.mapTo[node]&&0<this.mapTo[node].length};this.sort=()=>{let ins=Object.assign(Object.create(null),this.ins);var s=[],l=[],node,unsorted=0;for(node in ins){++unsorted;if(0===ins[node]){s.push(node)}}while(0!==s.length){var n=s.pop();l.push(n);--unsorted;if(this.mapFrom[n]){for(var len=this.mapFrom[n].length,i=0,m;i<len;++i){m=this.mapFrom[n][i];if(0===--ins[m]){s.push(m)}}}}if(0!==unsorted){var circular=[];for(node in ins){if(0!==ins[node]){circular.push(node)}}throw new Error('At least 1 circular dependency in nodes: \n\n'+circular.join('\n')+'\n\nGraph cannot be sorted!')}return l};this.dumpGraph=toFile=>{}}};module.exports=TopoSort;