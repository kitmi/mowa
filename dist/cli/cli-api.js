'use strict';const Util=require('rk-utils'),_=Util._,fs=Util.fs,Promise=Util.Promise,path=require('path'),minimist=require('minimist'),winston=require('winston'),inquirer=require('inquirer'),checkUpdate_=require('./update.js'),MowaHelper=require('./mowa-helper.js');function translateMinimistOptions(opts){let m={};_.forOwn(opts,(detail,name)=>{if(detail.bool){Util.putIntoBucket(m,'boolean',name)}else{Util.putIntoBucket(m,'string',name)}if('default'in detail){Util.setValueByPath(m,`default.${name}`,detail.default)}if(detail.alias){Util.setValueByPath(m,`alias.${name}`,detail.alias)}});return m}function optionDecorator(name){return 1==name.length?'-'+name:'--'+name}let MowaAPI=class MowaAPI{static showBanner(){console.log(`Mowa Development & Deployment CLI Helper v${checkUpdate_.version}\n`)}constructor(modules){this.modules=modules;this.base=process.cwd();this.usageOptions={'e':{desc:'Target build & deploy environment',alias:['env','environment'],default:'development'},'skip-update-check':{desc:'Skip mowa version check',bool:true,default:false},'v':{desc:'Show version number',bool:true,default:false},'?':{desc:'Show usage message',alias:['help'],bool:true,default:false}};let argv=process.argv.slice(2),argTrial=minimist(argv,translateMinimistOptions(this.usageOptions)),argNum=argTrial._.length;if(0==argNum){if(argTrial.v){console.log('v'+checkUpdate_.version);process.exit(0)}MowaAPI.showBanner();console.error('error: Command not given!\n');this._showUsage();process.exit(1)}MowaAPI.showBanner();let cliModuleName,command;if(1==argNum){cliModuleName='default';command=argTrial._[0]}else{cliModuleName=argTrial._[0];command=argTrial._[1]}this.cliModuleName=Util.S(cliModuleName).camelize().s;this.command=Util.S(command).camelize().s;this.cliModule=modules[this.cliModuleName];if(!this.cliModule){console.error('error: CLI module "'+this.cliModuleName+'" not found!\n');this._showUsage();process.exit(1)}Object.assign(this.usageOptions,this.cliModule.help(this));this.argv=minimist(argv,translateMinimistOptions(this.usageOptions));this.env=this.getOption('e');this.skipUpdateCheck=this.getOption('skip-update-check')||false;this.mowaName='mowa-cli';if('help'===this.command||this.getOption('?')){this._showUsage();process.exit(0)}this.config={general:{consoleEnabled:true,consoleLogLevel:'info',consoleLogColorize:true,fileLogEnabled:true,fileLogLevel:'verbose',fileLogFilename:'mowa-deploy.log',fileLogOverwrite:true,verbose:false}}}init_(){winston.cli();let handleErrors=e=>{this.log('error','UncaughtException '+e.stack);process.exit(1)};process.on('uncaughtException',handleErrors);return MowaHelper.startMowa_(this).then(server=>{this.server=server;let deploySettings=Util.getValueByPath(server.settings,'cli');if(_.isEmpty(deploySettings)){if(('default'!==this.cliModuleName||'init'!==this.command)&&'help'!==this.command){console.error('error: Deployment config not found. Run \'mowa init\' first.');process.exit(1)}}this.config=_.defaultsDeep({},deploySettings,this.config);server.options.verbose=this.config.general.verbose;let transports=[];if(this.config.general.consoleEnabled){transports.push(new winston.transports.Console({level:this.config.general.consoleLogLevel,colorize:this.config.general.consoleLogColorize}))}if(this.config.general.fileLogEnabled){let fileLogOptions={};if(this.config.general.fileLogOverwrite){fileLogOptions['flags']='w'}transports.push(new winston.transports.File({level:this.config.general.fileLogLevel,filename:this.config.general.fileLogFilename,options:fileLogOptions,json:false}))}this.logger=new winston.Logger({transports:transports});this.commandHanlder_=this.cliModule[this.command];if('function'!==typeof this.commandHanlder_){this.log('error','Command "'+this.command+'" not found!\n');this.command=undefined;this._showUsage();process.exit(1)}this.logger.info(`mowa ${this.cliModuleName} ${this.command}: `+this.cliModule.commandsDesc[this.command]);console.log();return this._inquire_().then(()=>{if(!this._validateArgv()){this._showUsage();return Promise.reject()}console.log()})})}log(level,message,data){if(this.logger){if(data){this.logger.log(level,message,data)}else{this.logger.log(level,message)}}else{console.log(`${level}: ${message}`)}}getOption(name){return this.argv[name]}setOption(name,value){this.argv[name]=value}getConfig(moduleName){return this.config[moduleName]}_validateArgv(){let valid=true;_.forOwn(this.usageOptions,(opts,name)=>{if(opts.required&&!(name in this.argv)){console.error(`Argument "${name}" is required.`);valid=false}});return valid}async _inquire_(){let dataFetchers=[],doInquire=item=>inquirer.prompt([item]).then(answers=>{_.forOwn(answers,(ans,name)=>{this.argv[name]=ans;let opts=this.usageOptions[name];if(opts.alias){_.each(opts.alias,a=>{this.argv[a]=ans})}})});return Util.eachAsync_(this.usageOptions,async(opts,name)=>{if('inquire'in opts&&!this.argv[name]){let inquire=opts.inquire;if('function'===typeof opts.inquire){inquire=await opts.inquire()}if(inquire){let type,q={name:name,message:opts.promptMessage||opts.desc};if(opts.promptType){type=opts.promptType;if('list'===type||'rawList'===type||'checkbox'===type||'expand'===type){if(!opts.choicesProvider){throw new Error('Missing choices provider!')}q.choices=await opts.choicesProvider()}}else if(opts.bool){type='confirm'}else{type='input'}q.type=type;if('promptDefault'in opts){if('function'===typeof opts.promptDefault){q.default=await opts.promptDefault()}else{q.default=opts.promptDefault}}await doInquire(q)}}else if(name in this.argv&&'nonInquireFilter'in opts){this.argv[name]=await opts.nonInquireFilter(this.argv[name])}})}_showUsage(){let cliModule=this.cliModuleName||'[cli module]',command=this.command&&'help'!==this.command?this.command:'<command>',usage=`Usage: ${path.basename(process.argv[1])} ${cliModule} ${command} [options]\n\n`;if('[cli module]'===cliModule){usage+='Available cli modules: '+_.reduce(this.modules,(sum,value,key)=>sum+'\n  '+key+': '+value.moduleDesc,'')+'\n\n'}else if('<command>'===command&&this.cliModule){usage+='"'+cliModule+'" module: '+this.cliModule.moduleDesc+'\n\n';usage+='Available commands for "'+this.cliModuleName+'" module: '+_.reduce(_.omit(this.cliModule,['moduleDesc','commandsDesc','help']),(sum,value,key)=>sum+'\n  '+key+': '+this.cliModule.commandsDesc[key],'')+'\n\n'}usage+=`Options:\n`;_.forOwn(this.usageOptions,(opts,name)=>{let line='  '+optionDecorator(name);if(opts.alias){line+=_.reduce(opts.alias,(sum,a)=>sum+', '+optionDecorator(a),'')}line+='\n';line+='    '+opts.desc+'\n';if(opts.default){line+='    default: '+opts.default.toString()+'\n'}if(opts.required){line+='    required\n'}line+='\n';usage+=line});console.log(usage)}};module.exports=MowaAPI;