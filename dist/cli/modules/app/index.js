'use strict';const path=require('path');const shell=require('shelljs');const Util=require('../../../util.js');const _=Util._;const fs=Util.fs;const MowaHelper=require('../../mowa-helper.js');exports.moduleDesc='Provide commands to config a app.';exports.commandsDesc={'list':'List all apps in the project','create':'Create a new app in the project','install':'Install npm module for an app','bootstrap':'Add a bootstrap file for an app','remove':'Remove an app from the project','pack':'Pack the app into a distributable archive'};exports.help=function(api){let cmdOptions={};switch(api.command){case'create':cmdOptions['app']={desc:'The name of the app to create',required:true,inquire:true};cmdOptions['mountAt']={desc:'The route of the app (i.e. the path in URL)',alias:['route']};cmdOptions['overrideExistingRoute']={desc:'Whether to override existing route if any',alias:['override'],inquire:true,default:false,bool:true};break;case'install':cmdOptions['app']={desc:'The name of the app to operate',required:true,inquire:true,promptType:'list',choicesProvider:()=>Promise.resolve(MowaHelper.getAvailableAppNames(api))};cmdOptions['nm']={desc:'The name of the npm module to install',alias:['module','npm-module'],required:true,inquire:true};cmdOptions['dev']={desc:'Install for development mode or not',default:false,bool:true};break;case'bootstrap':cmdOptions['app']={desc:'The name of the app to operate',required:true,inquire:true,promptType:'list',choicesProvider:()=>Promise.resolve(MowaHelper.getAvailableAppNames(api))};cmdOptions['name']={desc:'The name of the bootstrap file',required:true,inquire:true};break;case'remove':cmdOptions['app']={desc:'The name of the app to be removed',required:true,inquire:true,promptType:'list',choicesProvider:()=>Promise.resolve(MowaHelper.getAvailableAppNames(api))};cmdOptions['y']={desc:'Skip removal confirmation',default:false,bool:true};break;case'pack':cmdOptions['app']={desc:'The name of the app to be packed',required:true,inquire:true,promptType:'list',choicesProvider:()=>Promise.resolve(MowaHelper.getAvailableAppNames(api))};break;case'help':default:break;}return cmdOptions};exports.list=function(api){api.log('verbose','exec => mowa app list');let moduleNames=MowaHelper.getAvailableAppNames(api);let activatedApps={};_.forOwn(api.server.config.routing,(config,route)=>{if(config.mod){activatedApps[route]=config.mod.name}});api.log('info','All apps in the project:\n  '+moduleNames.join('\n  ')+'\n\nActivated apps:'+_.reduce(activatedApps,(sum,value,key)=>sum+'  '+key+' -> '+value+'\n',''))};exports.create=function(api){api.log('verbose','exec => mowa createApp');let appName=api.getOption('app');let mountingPoint=api.getOption('mountAt')||appName;mountingPoint=Util.ensureLeftSlash(mountingPoint);const appDest=path.join(api.base,Util.Literal.APP_MODULES_PATH,appName);if(fs.existsSync(appDest)){return Promise.reject('App "'+appName+'" already exist!')}fs.ensureDirSync(appDest);const templateFolder=path.resolve(__dirname,'template','app');fs.copySync(templateFolder,appDest);api.log('info','Generated app files.');if(api.server.config.routing&&api.server.config.routing[mountingPoint]){if(!api.getOption('override')){return Promise.reject(`Route "${mountingPoint}" is already in use.`)}}let routing=Object.assign({},api.server.config.routing,{[mountingPoint]:{mod:{name:appName}}});return MowaHelper.writeConfigBlock_(api.server.configLoader,'routing',routing).then(()=>{api.log('info','Mounted the app at: '+mountingPoint);const startSource=path.join(__dirname,'template','standalone.template.js');const startDest=path.join(appDest,'standalone.js');let startContent=fs.readFileSync(startSource,'utf8');startContent=Util.S(startContent).template({name:appName}).s;fs.writeFileSync(startDest,startContent,'utf8');api.log('info','Generated standalone.js for smoke test.');const indexSource=path.join(__dirname,'template','index.template.js');const indexDest=path.join(appDest,'index.js');fs.copySync(indexSource,indexDest);api.log('info','Generated index.js.');const packageSource=path.join(__dirname,'template','package.template.json');const packageDest=path.join(appDest,'package.json');let pkgContent=fs.readFileSync(packageSource,'utf8');pkgContent=Util.S(pkgContent).template({name:appName}).s;fs.writeFileSync(packageDest,pkgContent,'utf8');api.log('info','Generated package.json for npm init.');shell.cd(appDest);let stdout=Util.runCmdSync('npm init -y');shell.cd(api.base);api.log('verbose',stdout.toString());api.log('info','Enabled npm.')})};exports.install=function(api){api.log('verbose','exec => mowa app install');let appName=api.getOption('app');const modFolder=path.join(api.base,Util.Literal.APP_MODULES_PATH,appName);if(!fs.existsSync(modFolder)){return Promise.reject('App "'+appName+'" not exist!')}let moduleName=api.getOption('nm');if(!moduleName){return Promise.reject('Npm module name is required!')}let saveMode=api.getOption('dev')?'--save-dev':'--save';shell.cd(modFolder);let stdout=Util.runCmdSync(`npm install ${moduleName} ${saveMode}`);shell.cd(api.base);api.log('verbose',stdout.toString());api.log('info',`Installed a npm module "${moduleName}" for app "${appName}".`);return Promise.resolve()};exports.bootstrap=function(api){api.log('verbose','exec => mowa app install');let appName=api.getOption('app');if(!appName){return Promise.reject('App name is required!')}const modFolder=path.join(api.base,Util.Literal.APP_MODULES_PATH,appName);if(!fs.existsSync(modFolder)){return Promise.reject('App "'+appName+'" not exist!')}let bootstrapFileName=api.getOption('name');return(bootstrapFileName?Promise.resolve(bootstrapFileName):inputName()).then(bn=>{const templateFolder=path.resolve(__dirname,'template');const bootstrapSource=path.join(templateFolder,'bootstrap.template.js');const bootstrapDir=path.join(modFolder,Util.Literal.SERVER_CFG_NAME,'bootstrap');fs.ensureDirSync(bootstrapDir);const bootstrapDesc=path.join(bootstrapDir,bootstrapFileName+'.js');if(fs.existsSync(bootstrapDesc)){return Promise.reject('Bootstrap file "'+bootstrapFileName+'" already exist!')}fs.copySync(bootstrapSource,bootstrapDesc);api.log('info',`Created a bootstrap file "${bootstrapFileName}" for app "${appName}".`);return Promise.resolve()})};exports.remove=function(api){api.log('verbose','exec => mowa app remove');let appName=api.getOption('app');const modFolder=path.join(api.base,Util.Literal.APP_MODULES_PATH,appName);if(!fs.existsSync(modFolder)){return Promise.reject('App "'+appName+'" not exist!')}let skipConfirmaton=api.getOption('y');return(skipConfirmaton?Promise.resolve(true):require('inquirer').prompt([{type:'confirm',name:'continueRemove',message:'Confirm to proceed: ',default:false}]).then(function(answers){if(answers.continueRemove){return true}api.log('info','User aborted.');return false})).then(confirmation=>{if(!confirmation){return Promise.resolve()}shell.rm('-rf',modFolder);api.log('info','Removed: '+modFolder);let needRewrite=false;let routing=Object.assign({},api.server.configLoader.data.routing);_.forOwn(api.server.configLoader.data.routing,(config,route)=>{if(config.mod&&config.mod.name===name){delete routing[route];needRewrite=true}});if(needRewrite){return MowaHelper.writeConfigBlock_(loader,'routing',routing).then(()=>{api.log('info',`Removed app [${name}] from routing.`)})}})};exports.pack=function(api){api.log('verbose','exec => mowa app pack');let appName=api.getOption('app');let appModule=api.server.childModules[appName];if(!appModule){return Promise.reject(`App "${appName}" is not mounted in the project. Run "mowa app mount" first.`)}const archiver=require('archiver');let releasePath=appModule.toAbsolutePath('release');fs.ensureDirSync(releasePath);let targetZip=path.join(releasePath,'bundle.zip');return new Promise((resolve,reject)=>{let output=fs.createWriteStream(targetZip);let archive=archiver('zip',{zlib:{level:9}});output.on('end',()=>{api.log('info',`The app [${appName}] is packed to "${targetZip}".`);resolve()});archive.on('warning',function(err){if(err.code==='ENOENT'){api.log('warn',err.message)}else{throw err}});archive.on('error',function(err){throw err});archive.pipe(output);let files=fs.readDirSync(appModule.absolutePath);console.log(files);archive.finalize()})};