'use strict';const path=require('path'),Util=require('../../../util.js'),_=Util._,Promise=Util.Promise;let TaskList=class TaskList{constructor(manager,nodeName){this.manager=manager;this.nodeName=nodeName;this.components=[];this.mowa=[]}enqueueComponents(components){this.components=this.components.concat(components)}enqueueProjectDeploy(mowa){this.mowa=this.mowa.concat(mowa)}async execute_(){this.manager.logger.info(`Executing task list on node [${this.nodeName}] ...`);let session=await this.manager.getSession_(this.nodeName),tasks=[];Util._.each(this.components,componentInfo=>{tasks.push(()=>this._getDeployer(session,componentInfo).deploy_(this.manager.reinstallExistingComponent))});await Util.eachPromise_(tasks);await Util.eachAsync_(this.mowa,async projectInfo=>{if(!projectInfo.projectRoot){return Promise.reject('"projectRoot" is required!')}if(!projectInfo.bundleVersion){return Promise.reject('"bundleVersion" is required!')}const pkg=require(path.join(this.manager.api.base,'package.json')),bundleName=pkg.name+'-'+Util.S(projectInfo.bundleVersion).replaceAll('.','_').s+'.zip',bundlePath=path.join(this.manager.api.base,'release',bundleName);if(!Util.fs.existsSync(bundlePath)){return Promise.reject(`Specified bundle "${bundleName}" does not exist!`)}let result=await session.ssh.execCommand(`mkdir -p ${projectInfo.projectRoot}`);if(0!==result.code){return Promise.reject('Failed to create project root folder: '+projectInfo.projectRoot)}await session.ssh.putFile(bundlePath,path.join(projectInfo.projectRoot,bundleName));this.manager.logger.info(`Project bundle "${bundleName}" successfully uploaded.`)});this.manager.logger.info(`All deployment tasks for node [${this.nodeName}] are completed successully.`)}_getDeployer(session,component){let componentConfig=this.manager.getComponentSetting(component.name);if(!componentConfig){throw new Error(`Component [${component.name}] not found in configuration.`)}let[typeOfDeployer,instanceName]=component.name.split('.'),Deployer=require(path.resolve(__dirname,'./components',Util.S(typeOfDeployer).camelize().s+'.js'));return new Deployer(this.manager,session,instanceName,Object.assign({},componentConfig,component.overrides))}};module.exports=TaskList;