'use strict';const Util=require('../../util.js'),_=Util._,validator=require('validator'),Types=require('./types.js'),xml=require('tiny-xml');function processInt(meta,raw){let sanitized=raw;if(!_.isInteger(sanitized)){sanitized=validator.toInt(sanitized)}if('max'in meta&&sanitized>meta.max){return{raw,error:{field:meta,message:'Exceeds the maximum value.'}}}if('min'in meta&&sanitized<meta.min){return{raw,error:{field:meta,message:'Less than the minimum value.'}}}return{raw,sanitized}}function processFloat(meta,raw){let sanitized=raw;if(!_.isNumber(sanitized)){sanitized=validator.toFloat(sanitized);if(isNaN(sanitized)){return{raw,error:{field:meta,message:'Invalid float number value.'}}}}if('max'in meta&&sanitized>meta.max){return{raw,error:{field:meta,message:'Exceeds the maximum value.'}}}if('min'in meta&&sanitized<meta.min){return{raw,error:{field:meta,message:'Less than the minimum value.'}}}if('precision'in meta){sanitized=parseFloat(sanitized.toFixed(meta.precision))}return{raw,sanitized}}function processBool(meta,raw){let sanitized=raw;if('boolean'!==typeof raw){sanitized=validator.toBoolean(raw,true)}return{raw,sanitized}}function processText(meta,raw){let sanitized='string'!==typeof raw?raw.toString():raw;if('fixedLength'in meta&&sanitized.length>meta.fixedLength||'max'in meta&&sanitized.length>meta.max){return{raw,error:{field:meta,message:'Exceeds the maximum length limit.'}}}if('min'in meta&&sanitized.length<meta.min){return{raw,error:{field:meta,message:'Does not meet the minimum length requirement.'}}}if(!meta.untrim){sanitized=sanitized.trim()}return{raw,sanitized}}function processBinary(meta,input){let sanitized=input instanceof Buffer?input:Buffer.from(input.toString());if('fixedLength'in meta&&sanitized.length>meta.fixedLength||'max'in meta&&sanitized.length>meta.max){return{input,error:{field:meta,message:'Exceeds the maximum length limit.'}}}if('min'in meta&&sanitized.length<meta.min){return{input,error:{field:meta,message:'Does not meet the minimum length requirement.'}}}return{input,sanitized}}function processDatetime(meta,raw){let sanitized=raw;if(!(sanitized instanceof Date)){sanitized=validator.toDate(sanitized);if(!sanitized){return{raw,error:{field:meta,message:'Invalid datetime format.'}}}}return{raw,sanitized}}function processJson(meta,raw){let sanitized=raw;if('string'===typeof sanitized){sanitized=sanitized.trim()}else{sanitized=JSON.stringify(sanitized)}return{raw,sanitized}}function processXml(meta,raw){let sanitized=raw,type=typeof sanitized;if('string'!==type){sanitized=xml.serialize(sanitized)}else if(!xml.valid(sanitized)){return{raw,error:{field:meta,message:'Invalid XML document.'}}}return{raw,sanitized}}function processEnum(meta,raw){let sanitized=raw;if('string'===typeof sanitized){sanitized=sanitized.trim();if(-1===meta.values.indexOf(sanitized)){return{raw,error:{field:meta,message:'Invalid enum value.'}}}}else{return{raw,error:{field:meta,message:'Invalid enum value.'}}}return{raw,sanitized}}function processCsv(meta,raw){let sanitized=raw;if(Array.isArray(sanitized)){sanitized=sanitized.map(a=>Types.escapeCsv(a)).join(',')}else if(_.isPlainObject(sanitized)){sanitized=Object.values(sanitized).map(a=>Types.escapeCsv(a)).join(',')}else{return{raw,error:{field:meta,message:'Invalid csv value.'}}}return{raw,sanitized}}module.exports=_.pick(validator,['equals','contains','matches','isEmail','isURL','isMACAddress','isIP','isFQDN','isBoolean','isAlpha','isAlphanumeric','isNumeric','isPort','isLowercase','isUppercase','isAscii','isFullWidth','isHalfWidth','isVariableWidth','isMultibyte','isSurrogatePair','isInt','isFloat','isDecimal','isHexadecimal','isDivisibleBy','isHexColor','isISRC','isMD5','isHash','isJSON','isEmpty','isLength','isByteLength','isUUID','isMongoId','isAfter','isBefore','isIn','isCreditCard','isISIN','isISBN','isISSN','isMobilePhone','isPostalCode','isCurrency','isISO8601','isISO31661Alpha2','isBase64','isDataURI','isMimeType','isLatLong']);module.exports.$processInt=processInt;module.exports.$processFloat=processFloat;module.exports.$processBool=processBool;module.exports.$processText=processText;module.exports.$processBinary=processBinary;module.exports.$processDatetime=processDatetime;module.exports.$processJson=processJson;module.exports.$processXml=processXml;module.exports.$processEnum=processEnum;module.exports.$processCsv=processCsv;module.exports.$sanitize=function(meta,value){let result;switch(meta.type){case Types.TYPE_INT:result=processInt(meta,value);break;case Types.TYPE_FLOAT:result=processFloat(meta,value);break;case Types.TYPE_BOOL:result=processBool(meta,value);break;case Types.TYPE_TEXT:result=processText(meta,value);break;case Types.TYPE_BINARY:result=processBinary(meta,value);break;case Types.TYPE_DATETIME:result=processDatetime(meta,value);break;case Types.TYPE_JSON:result=processJson(meta,value);break;case Types.TYPE_XML:result=processXml(meta,value);break;case Types.TYPE_ENUM:result=processEnum(meta,value);break;case Types.TYPE_CSV:result=processCsv(meta,value);break;default:throw new Error('Unknown field type: '+meta.type);}return result};