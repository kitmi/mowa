'use strict';const inflection=require('inflection');const EventEmitter=require('events');const path=require('path');const Util=require('../../util.js');const _=Util._;const OolUtils=require('./ool-utils.js');const Field=require('./field.js');class OolongEntity{constructor(linker,name,oolModule,info){this._events=new EventEmitter;this.linker=linker;this.name=name;this.oolModule=oolModule;this.info=info;this.id=oolModule.id+':'+name;this.fields={};this.features=undefined;this.key=undefined;this.indexes=undefined;this.isRelationshipEntity=false;this.interfaces=undefined;this.initialized=false}on(eventName,listener){return this._events.on(eventName,listener)}clone(stack){if(!stack)stack=new Map;let cl=new OolongEntity(this.linker,this.name,this.oolModule,this.info);stack.set(this,cl);OolUtils.deepCloneField(this,cl,'fields',stack);OolUtils.deepCloneField(this,cl,'features',stack);OolUtils.deepCloneField(this,cl,'key',stack);OolUtils.deepCloneField(this,cl,'indexes',stack);OolUtils.deepCloneField(this,cl,'interfaces',stack);cl.isRelationshipEntity=this.isRelationshipEntity;cl.initialized=this.initialized;return cl}link(){if(this.initialized){return this}this.linker.log('debug','Initializing entity ['+this.name+'] ...');if(this.info.base){let baseEntity=this.linker.loadEntity(this.oolModule,this.info.base);this._inherit(baseEntity)}if(this.info.features){this.info.features.forEach(feature=>{let featureName,featureOptions;if(_.isPlainObject(feature)&&feature.type=='FunctionCall'){featureName=feature.name;let args=OolUtils.translateOolObj(feature.args);featureOptions=args.length==1?args[0]:args}else{featureName=feature}let fn=require(path.resolve(__dirname,`./features/${featureName}.js`));fn(this,featureOptions)})}this._events.emit('beforeFields');if(this.info.fields){_.each(this.info.fields,(fieldInfo,fieldName)=>{this.addField(fieldName,fieldInfo)})}this._events.emit('afterFields');if(this.info.indexes){_.each(this.info.indexes,index=>{this.addIndex(index)})}if(this.info.key){this.key=this.info.key;if(!this.hasField(this.key)){throw new Error(`Key field "${this.key}" not exist in entity "${this.name}".`)}}if(this.info.interface){this.interfaces=this.info.interface}this.initialized=true;return this}markAsRelationshipEntity(){this.isRelationshipEntity=true;return this}hasIndexOn(fields){fields=fields.concat();fields.sort();return _.findIndex(this.indexes,index=>{return _.findIndex(index.fields,(f,idx)=>fields.length<=idx||fields[idx]!==f)===-1})!=-1}addIndex(index){if(!this.indexes){this.indexes=[]}index=OolUtils.deepClone(index);if(index.fields){if(!_.isArray(index.fields)){index.fields=[index.fields]}let fields=OolUtils.translateOolObj(index.fields);index.fields=_.map(fields,field=>{let normalizedField=inflection.camelize(field,true);if(!this.hasField(normalizedField)){throw new Error(`Index references non-exist field: ${field}, entity: ${this.name}.`)}return normalizedField});index.fields.sort();if(this.hasIndexOn(index.fields)){throw new Error(`Index on [${index.fields.join(', ')}] already exist in entity [${this.name}].`)}this.indexes.push(index)}else{console.log(index);throw new Error('error')}return this}hasField(name){return name in this.fields}addField(name,rawInfo){name=inflection.camelize(name,true);if(this.hasField(name)){throw new Error(`Field name [${name}] conflicts in entity [${this.name}].`)}if(rawInfo.type){let fullRawInfo=Object.assign({},this.linker.trackBackType(this.oolModule,rawInfo));this.fields[name]=new Field(name,fullRawInfo);if(!this.key){this.key=name}}else{if(!rawInfo.belongTo&&!rawInfo.bindTo){throw new Error(`Invalid field info of [${name}].`)}if(!this.oolModule.relation){this.oolModule.relation=[]}let relationship,right;if(rawInfo.belongTo){relationship='n:1';right=rawInfo.belongTo}else{relationship='n:1';right=rawInfo.bindTo}let relation={left:this.name,right,relationship};if(rawInfo.optional){relation.optional=true}this.oolModule.relation.push(relation)}return this}addFeature(feature){if(!this.features){this.features=[]}this.features.push(feature);return this}setKey(name){this.key=name;return this}getKeyField(){return this.fields[this.key]}toJSON(){return{id:this.id,name:this.name,fields:_.reduce(this.fields,(r,v,k)=>(r[k]=v.toJSON(),r),{}),features:this.features,key:this.key,indexes:this.indexes,isRelationshipEntity:this.isRelationshipEntity}}_inherit(baseEntity){if(!baseEntity.initialized){throw new Error('Extend from an uninitialized entity!')}let stack=new Map;this.fields=OolUtils.deepClone(baseEntity.fields,stack);if(baseEntity.features){this.features=OolUtils.deepClone(baseEntity.features,stack)}if(baseEntity.key){this.key=OolUtils.deepClone(baseEntity.key,stack)}if(baseEntity.indexes){this.indexes=OolUtils.deepClone(baseEntity.indexes,stack)}}}module.exports=OolongEntity;