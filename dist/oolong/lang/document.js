'use strict';const path=require('path'),Util=require('../../util.js'),_=Util._,OolUtils=require('./ool-utils.js'),Entity=require('./entity.js');let OolongDocument=class OolongDocument{constructor(linker,name,oolModule,info){this.linker=linker;this.name=name;this.oolModule=oolModule;this.info=info;this.mainEntity=undefined;this.joinWith=undefined;this.initialized=false}clone(stack){if(!stack)stack=new Map;let cl=new OolongDocument(this.linker,this.name,this.oolModule,this.info);stack.set(this,cl);cl.mainEntity=this.mainEntity;OolUtils.deepCloneField(this,cl,'joinWith',stack);cl.initialized=this.initialized;return cl}link(){if(this.initialized){return this}if(this.info.entity){let entity=this.linker.getReferencedEntity(this.oolModule,this.info.entity);this.mainEntity=entity.name}else{let doc=this.linker.loadDoc(this.oolModule,this.info.document);this.mainEntity=doc.mainEntity;this.joinWith=doc.joinWith.concat()}if(!_.isEmpty(this.info.joinWith)){if(!this.joinWith){this.joinWith=this.info.joinWith.concat()}else{this.joinWith=this.joinWith.concat(this.info.joinWith)}}this.initialized=true;return this}buildHierarchy(inSchema){return this._flattenDocument(inSchema,this)}_flattenDocument(inSchema,document){let hierarchy={},leftEntity=inSchema.entities[document.mainEntity];if(document.joinWith){document.joinWith.forEach(joining=>{let leftField,rightEntity,rightField;if(OolUtils.isMemberAccess(joining.on.left)){let lastPos=joining.on.left.lastIndexOf('.'),fieldRef=joining.on.left.substr(lastPos+1),entityRef=joining.on.left.substr(0,lastPos);if(entityRef===leftEntity.name){leftField=leftEntity.getEntityAttribute(fieldRef)}else{throw new Error(`Unsupported syntax of left side joining field "${joining.on.left}".`)}}else{leftField=leftEntity.getEntityAttribute(joining.on.left)}if(joining.document){let rightHierarchy=inSchema.getDocumentHierachy(this.oolModule,joining.document);if(OolUtils.isMemberAccess(joining.on.right)){let parts=joining.on.right.split('.');if(2<parts.length){throw new Error('Joining a document should only referencing to a field of its main entity.')}let[entityRef,fieldRef]=parts;if(entityRef!==rightHierarchy.entity){throw new Error(`Referenced field "${joining.on.right}" not found while linking to document "${joining.document}".`)}rightEntity=inSchema.entities[entityRef];rightField=rightEntity.getEntityAttribute(fieldRef);hierarchy[leftField.name]=Object.assign({},rightHierarchy,{linkWithField:rightField.name});return}rightEntity=inSchema.entities[joining.document.mainEntity]}else{rightEntity=inSchema.entities[joining.entity];if(OolUtils.isMemberAccess(joining.on.right)){throw new Error(`Referenced field "${joining.on.right}" not found while linking to entity "${joining.entity}".`)}}rightField=rightEntity.getEntityAttribute(joining.on.right);hierarchy[leftField.name]={oolType:'DocumentHierarchyNode',entity:rightEntity.name,linkWithField:rightField.name}})}return{oolType:'DocumentHierarchyNode',entity:leftEntity.name,subDocuments:hierarchy}}toJSON(){return{name:this.name,mainEntity:this.mainEntity,joinWith:this.joinWith}}};module.exports=OolongDocument;