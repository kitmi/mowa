'use strict';const path=require('path'),Util=require('../../util.js'),_=Util._,OolUtils=require('./ool-utils.js'),Document=require('./document.js');let OolongView=class OolongView{constructor(linker,name,oolModule,info){this.linker=linker;this.name=name;this.oolModule=oolModule;this.info=info;this.document=undefined;this.isList=false;this.params=undefined;this.selectBy=undefined;this.groupBy=undefined;this.orderBy=undefined;this.skip=undefined;this.limit=undefined;this.initialized=false}clone(stack){if(!stack)stack=new Map;let cl=new OolongView(this.linker,this.name,this.oolModule,this.info);stack.set(this,cl);OolUtils.deepCloneField(this,cl,'document',stack);OolUtils.deepCloneField(this,cl,'params',stack);OolUtils.deepCloneField(this,cl,'selectBy',stack);OolUtils.deepCloneField(this,cl,'groupBy',stack);OolUtils.deepCloneField(this,cl,'orderBy',stack);OolUtils.deepCloneField(this,cl,'skip',stack);OolUtils.deepCloneField(this,cl,'limit',stack);cl.isList=this.isList;cl.initialized=this.initialized;return cl}link(){if(this.initialized){return this}if(this.info.document){this.document=this.linker.loadDoc(this.oolModule,this.info.document)}else{let mainEntity=this.linker.getReferencedEntity(this.oolModule,this.info.entity);this.document=new Document(this.linker,mainEntity.name,this.oolModule,{mainEntity:mainEntity.name});this.document.link()}if(this.info.isList){this.isList=true}if(!_.isEmpty(this.info.accept)){this.params=this.info.accept.concat()}if(!_.isEmpty(this.info.selectBy)){this.selectBy=this.info.selectBy.concat()}if(!_.isEmpty(this.info.groupBy)){this.groupBy=this.info.groupBy.concat()}if(!_.isEmpty(this.info.orderBy)){this.orderBy=this.info.orderBy.concat()}if(this.info.skip){this.skip=_.isPlainObject(this.info.skip)?Object.assign({},this.info.skip):this.info.skip}if(this.info.limit){this.limit=_.isPlainObject(this.info.limit)?Object.assign({},this.info.limit):this.info.limit}this.initialized=true;return this}inferTypeInfo(inSchema){if(!_.isEmpty(this.params)){let inferredParams=[];this.params.forEach(param=>{if(OolUtils.isMemberAccess(param.type)){let[entityName,fieldName]=param.type.split('.');if(!inSchema.hasEntity(entityName)){throw new Error(`Parameter "${param.name}" references to an entity "${entityName}" which is not belong to the schema.`)}let entity=inSchema.entities[entityName],field=entity.getEntityAttribute(fieldName);inferredParams.push(Object.assign(_.omit(_.toPlainObject(field),['isReference','optional','displayName']),{name:param.name}))}else{inferredParams.push(this.linker.trackBackType(this.oolModule,param))}});this.params=inferredParams}}getDocumentHierarchy(inSchema){return inSchema.getDocumentHierachy(this.oolModule,this.document.name)}toJSON(){return{name:this.name,document:this.document.toJSON(),isList:this.isList,params:this.params,selectBy:this.selectBy,groupBy:this.groupBy,orderBy:this.orderBy,skip:this.skip,limit:this.limit}}};module.exports=OolongView;