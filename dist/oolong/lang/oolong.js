/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
"use strict";

var oolong = (function () {
  var o = function (k, v, o, l) {
      for (o = o || {}, l = k.length; l--; o[k[l]] = v);
      return o
    },
    $V0 = [1, 5],
    $V1 = [1, 14],
    $V2 = [1, 15],
    $V3 = [1, 22],
    $V4 = [1, 20],
    $V5 = [1, 17],
    $V6 = [1, 19],
    $V7 = [1, 18],
    $V8 = [5, 7, 16, 21, 72, 187, 204, 213, 220],
    $V9 = [1, 33],
    $Va = [1, 32],
    $Vb = [1, 34],
    $Vc = [1, 31],
    $Vd = [1, 38],
    $Ve = [1, 44],
    $Vf = [1, 46],
    $Vg = [1, 47],
    $Vh = [2, 22],
    $Vi = [1, 56],
    $Vj = [7, 28, 52, 54, 56, 71, 80, 90, 100, 116, 117, 118, 119, 121, 125, 126, 127, 154, 171, 181, 191, 193, 197, 213, 218, 231, 240, 241, 262, 276, 277, 279, 280, 281, 282, 283, 284, 285, 289, 290],
    $Vk = [7, 28, 56, 71, 80, 100, 116, 117, 118, 119, 121, 125, 126, 127, 213, 218, 231, 262],
    $Vl = [1, 67],
    $Vm = [17, 21, 48, 238, 241, 250],
    $Vn = [7, 71],
    $Vo = [1, 71],
    $Vp = [1, 78],
    $Vq = [7, 80, 100, 116, 117, 118, 119, 121, 125],
    $Vr = [1, 99],
    $Vs = [20, 87, 90, 128, 132, 134, 137],
    $Vt = [1, 114],
    $Vu = [1, 115],
    $Vv = [1, 116],
    $Vw = [1, 117],
    $Vx = [7, 52, 54, 56, 71, 80, 90, 119, 121, 125, 171, 181, 191, 193, 197, 218, 240, 241, 262, 276, 277, 279, 280, 281, 282, 283, 284, 285, 289, 290],
    $Vy = [7, 54, 56, 71, 80, 121, 171, 181, 262, 276, 277, 279, 280, 281, 282, 283, 284, 285, 289, 290],
    $Vz = [7, 57, 80, 100, 116, 117, 118, 119, 121, 125],
    $VA = [7, 33, 80, 100, 116, 117, 118, 119, 121, 125],
    $VB = [7, 52, 57, 80, 100, 116, 117, 118, 119, 121, 125],
    $VC = [7, 52, 80, 100, 116, 117, 118, 119, 121, 125],
    $VD = [20, 90, 128, 132, 134, 137],
    $VE = [21, 48, 238, 241, 250],
    $VF = [7, 54, 56, 71, 80, 121, 125, 171, 181, 262, 276, 277, 279, 280, 281, 282, 283, 284, 285, 289, 290],
    $VG = [1, 162],
    $VH = [1, 174],
    $VI = [20, 128, 132, 134, 137],
    $VJ = [7, 191, 193],
    $VK = [1, 208],
    $VL = [1, 202],
    $VM = [1, 209],
    $VN = [1, 203],
    $VO = [1, 204],
    $VP = [1, 207],
    $VQ = [1, 201],
    $VR = [1, 210],
    $VS = [20, 132, 134, 137],
    $VT = [2, 155],
    $VU = [1, 234],
    $VV = [1, 241],
    $VW = [7, 54, 56, 71, 171, 181, 262, 276, 277, 279, 280, 281, 282, 283, 284, 285, 289, 290],
    $VX = [1, 246],
    $VY = [7, 54, 56, 71, 121, 125, 171, 181, 183, 262, 276, 277, 279, 280, 281, 282, 283, 284, 285, 289, 290],
    $VZ = [1, 251],
    $V_ = [20, 134, 137],
    $V$ = [20, 235, 238, 243, 244],
    $V01 = [20, 152, 233, 235, 238, 243, 244],
    $V11 = [1, 293],
    $V21 = [7, 231],
    $V31 = [1, 297],
    $V41 = [7, 54, 56, 71, 80, 125, 171, 181, 262, 276, 277, 279, 280, 281, 282, 283, 284, 285, 289, 290],
    $V51 = [1, 307],
    $V61 = [1, 312],
    $V71 = [20, 137],
    $V81 = [7, 80, 121, 125],
    $V91 = [1, 333],
    $Va1 = [1, 335],
    $Vb1 = [1, 336],
    $Vc1 = [1, 337],
    $Vd1 = [1, 334],
    $Ve1 = [7, 80],
    $Vf1 = [1, 346],
    $Vg1 = [54, 56],
    $Vh1 = [20, 238, 243, 244],
    $Vi1 = [7, 121, 125],
    $Vj1 = [1, 359],
    $Vk1 = [7, 28, 100, 121, 125],
    $Vl1 = [1, 377],
    $Vm1 = [2, 166],
    $Vn1 = [7, 80, 119],
    $Vo1 = [20, 243, 244],
    $Vp1 = [1, 398],
    $Vq1 = [1, 402],
    $Vr1 = [56, 171],
    $Vs1 = [20, 244],
    $Vt1 = [7, 181],
    $Vu1 = [1, 438],
    $Vv1 = [1, 439],
    $Vw1 = [7, 54, 181, 289, 290],
    $Vx1 = [1, 473],
    $Vy1 = [7, 56],
    $Vz1 = [7, 54, 181],
    $VA1 = [17, 21, 48, 52, 53, 169, 238, 241, 247, 248, 249, 250, 256, 261, 277],
    $VB1 = [1, 534],
    $VC1 = [1, 537],
    $VD1 = [20, 185],
    $VE1 = [20, 152, 185],
    $VF1 = [1, 570],
    $VG1 = [20, 157];
  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      "error": 2,
      "program": 3,
      "input": 4,
      "EOF": 5,
      "input0": 6,
      "NEWLINE": 7,
      "statement": 8,
      "use_statement": 9,
      "type_statement": 10,
      "entity_statement": 11,
      "schema_statement": 12,
      "view_statement": 13,
      "document_statement": 14,
      "relation_statement": 15,
      "import": 16,
      "STRING": 17,
      "INDENT": 18,
      "use_statement_block": 19,
      "DEDENT": 20,
      "type": 21,
      "type_statement_item": 22,
      "type_statement_block": 23,
      "identifier": 24,
      "type_base_or_not": 25,
      "type_validators0_or_not": 26,
      "type_base": 27,
      ":": 28,
      "types": 29,
      "int_type": 30,
      "unsigned_or_not": 31,
      "number_type": 32,
      "exact": 33,
      "text_type": 34,
      "bool_keyword": 35,
      "binary_type": 36,
      "datetime": 37,
      "date": 38,
      "only": 39,
      "time": 40,
      "year": 41,
      "timestamp": 42,
      "json": 43,
      "xml": 44,
      "csv": 45,
      "identifier_or_str_array": 46,
      "identifier_or_string": 47,
      "DOTNAME": 48,
      "int_keyword": 49,
      "int": 50,
      "integer": 51,
      "(": 52,
      "INTEGER": 53,
      ")": 54,
      "BYTES": 55,
      ",": 56,
      "unsigned": 57,
      "number": 58,
      "text": 59,
      "fixedLength": 60,
      "bool": 61,
      "boolean": 62,
      "binary_keyword": 63,
      "blob": 64,
      "binary": 65,
      "type_validators0": 66,
      "type_validators": 67,
      "entity_statement_header": 68,
      "entity_statement_block": 69,
      "entity_statement_header0": 70,
      "is": 71,
      "entity": 72,
      "comment_or_not": 73,
      "with_stmt_or_not": 74,
      "has_stmt_or_not": 75,
      "key_stmt_or_not": 76,
      "index_stmt_or_not": 77,
      "data_stmt_or_not": 78,
      "interface_stmt_or_not": 79,
      "--": 80,
      "with_stmt": 81,
      "has_stmt": 82,
      "key_stmt": 83,
      "index_stmt": 84,
      "data_stmt": 85,
      "interface_stmt": 86,
      "with": 87,
      "feature_inject": 88,
      "with_stmt_block": 89,
      "has": 90,
      "has_stmt_itm": 91,
      "has_stmt_block": 92,
      "has_stmt_item_body": 93,
      "field_comment_or_not": 94,
      "field_qualifiers_or_not": 95,
      "with_validators_modifiers": 96,
      "field_reference": 97,
      "optional_qualifier_or_not": 98,
      "concrete_default_value": 99,
      "default": 100,
      "literal": 101,
      "default_value": 102,
      "auto": 103,
      "field_qualifiers": 104,
      "field_modifiers0_or_not": 105,
      "field_modifiers0": 106,
      "variable_modifiers": 107,
      "field_validators1_or_not": 108,
      "field_validators1": 109,
      "field_modifiers1_or_not": 110,
      "field_modifiers1": 111,
      "variable_modifier_or_not": 112,
      "optional_qualifier": 113,
      "field_qualifier": 114,
      "field_restriction": 115,
      "readOnly": 116,
      "fixedValue": 117,
      "forceUpdate": 118,
      "optional": 119,
      "variable_modifier": 120,
      "|": 121,
      "identifier_or_member_access": 122,
      "function_call": 123,
      "type_validator": 124,
      "~": 125,
      "->": 126,
      "<->": 127,
      "key": 128,
      "index_stmt_itm": 129,
      "index_qualifiers": 130,
      "unique": 131,
      "index": 132,
      "index_stmt_blk": 133,
      "data": 134,
      "inline_object": 135,
      "inline_array": 136,
      "interface": 137,
      "interface_stmt_blk": 138,
      "interface_def": 139,
      "interface_def_body": 140,
      "accept_or_not": 141,
      "implementation": 142,
      "return_or_not": 143,
      "accept_statement": 144,
      "accept": 145,
      "parameter_with_modifier": 146,
      "accept_block": 147,
      "parameter": 148,
      "with_type_default_value": 149,
      "operation": 150,
      "find_one_operation": 151,
      "find": 152,
      "one": 153,
      "by": 154,
      "case": 155,
      "case_condition_block": 156,
      "otherwise": 157,
      "condition_as_result_expression": 158,
      "conditional_expression": 159,
      "update_operation": 160,
      "update": 161,
      "where_expr": 162,
      "create_operation": 163,
      "create": 164,
      "delete_operation": 165,
      "delete": 166,
      "coding_block": 167,
      "do": 168,
      "{": 169,
      "javascript": 170,
      "}": 171,
      "assign_operation": 172,
      "set": 173,
      "<-": 174,
      "value": 175,
      "simple_conditional_arrow_expr": 176,
      "where": 177,
      "where_expr_condition": 178,
      "where_expr_condition_blk": 179,
      "query_condition_expression": 180,
      "=>": 181,
      "return_expression": 182,
      "unless": 183,
      "return_condition_blk": 184,
      "return": 185,
      "concrete_value": 186,
      "relation": 187,
      "relation_statement_itm": 188,
      "relation_statement_blk": 189,
      "relation_statement_itm0": 190,
      "to": 191,
      "related_entity": 192,
      "for": 193,
      "indefinite_article": 194,
      "relation_qualifier": 195,
      "every": 196,
      "may": 197,
      "have": 198,
      "several": 199,
      "many": 200,
      "a": 201,
      "great": 202,
      "of": 203,
      "schema": 204,
      "schema_statement_block": 205,
      "schema_entities": 206,
      "schema_views_or_not": 207,
      "schema_views": 208,
      "entities": 209,
      "schema_entities_block": 210,
      "views": 211,
      "schema_views_block": 212,
      "document": 213,
      "document_statement_block": 214,
      "contains": 215,
      "document_statement_block2": 216,
      "document_entity_join": 217,
      "being": 218,
      "which": 219,
      "view": 220,
      "view_statement_block": 221,
      "view_main_entity": 222,
      "view_selection_or_not": 223,
      "group_by_or_not": 224,
      "order_by_or_not": 225,
      "skip_or_not": 226,
      "limit_or_not": 227,
      "view_joinings_or_not": 228,
      "view_joinings": 229,
      "view_entity_target": 230,
      "list": 231,
      "view_selection": 232,
      "select": 233,
      "view_selection_block": 234,
      "group": 235,
      "order_by_list": 236,
      "order_by_block": 237,
      "order": 238,
      "order_by_clause": 239,
      "asc": 240,
      "desc": 241,
      "order_by_list0": 242,
      "skip": 243,
      "limit": 244,
      "identifier_or_member_access_list": 245,
      "identifier_or_member_access_list0": 246,
      "FLOAT": 247,
      "BOOL": 248,
      "REGEXP": 249,
      "NAME": 250,
      "an": 251,
      "modifiable_value_list": 252,
      "feature_param_list": 253,
      "feature_param": 254,
      "modifiable_value": 255,
      "REFERENCE": 256,
      "concrete_value_expression": 257,
      "kv_pairs": 258,
      "kv_pair_itm": 259,
      "kv_pairs0": 260,
      "[": 261,
      "]": 262,
      "value_list": 263,
      "value_list0": 264,
      "modifiable_value_list0": 265,
      "feature_param_list0": 266,
      "identifier_or_str_list": 267,
      "identifier_or_str_list0": 268,
      "logical_expression": 269,
      "simple_expression": 270,
      "logical_query_expression": 271,
      "binary_expression": 272,
      "throw_error_expression": 273,
      "unary_expression": 274,
      "throw": 275,
      "exists": 276,
      "not": 277,
      "null": 278,
      ">": 279,
      "<": 280,
      ">=": 281,
      "<=": 282,
      "=": 283,
      "!=": 284,
      "in": 285,
      "logical_expression_right": 286,
      "logical_operators": 287,
      "logical_query_expression_right": 288,
      "and": 289,
      "or": 290,
      "column_range_list": 291,
      "COLUMNS": 292,
      "column_range_list0": 293,
      "$accept": 0,
      "$end": 1
    },
    terminals_: {
      2: "error",
      5: "EOF",
      7: "NEWLINE",
      16: "import",
      17: "STRING",
      18: "INDENT",
      20: "DEDENT",
      21: "type",
      28: ":",
      33: "exact",
      37: "datetime",
      38: "date",
      39: "only",
      40: "time",
      41: "year",
      42: "timestamp",
      43: "json",
      44: "xml",
      45: "csv",
      48: "DOTNAME",
      50: "int",
      51: "integer",
      52: "(",
      53: "INTEGER",
      54: ")",
      55: "BYTES",
      56: ",",
      57: "unsigned",
      58: "number",
      59: "text",
      60: "fixedLength",
      61: "bool",
      62: "boolean",
      64: "blob",
      65: "binary",
      71: "is",
      72: "entity",
      80: "--",
      87: "with",
      90: "has",
      100: "default",
      103: "auto",
      116: "readOnly",
      117: "fixedValue",
      118: "forceUpdate",
      119: "optional",
      121: "|",
      125: "~",
      126: "->",
      127: "<->",
      128: "key",
      131: "unique",
      132: "index",
      134: "data",
      137: "interface",
      145: "accept",
      152: "find",
      153: "one",
      154: "by",
      155: "case",
      157: "otherwise",
      161: "update",
      164: "create",
      166: "delete",
      168: "do",
      169: "{",
      170: "javascript",
      171: "}",
      173: "set",
      174: "<-",
      177: "where",
      181: "=>",
      183: "unless",
      185: "return",
      187: "relation",
      191: "to",
      193: "for",
      196: "every",
      197: "may",
      198: "have",
      199: "several",
      200: "many",
      201: "a",
      202: "great",
      203: "of",
      204: "schema",
      209: "entities",
      211: "views",
      213: "document",
      215: "contains",
      218: "being",
      219: "which",
      220: "view",
      229: "view_joinings",
      231: "list",
      233: "select",
      235: "group",
      238: "order",
      240: "asc",
      241: "desc",
      243: "skip",
      244: "limit",
      247: "FLOAT",
      248: "BOOL",
      249: "REGEXP",
      250: "NAME",
      251: "an",
      256: "REFERENCE",
      261: "[",
      262: "]",
      275: "throw",
      276: "exists",
      277: "not",
      278: "null",
      279: ">",
      280: "<",
      281: ">=",
      282: "<=",
      283: "=",
      284: "!=",
      285: "in",
      289: "and",
      290: "or",
      292: "COLUMNS"
    },
    productions_: [0, [3, 1], [4, 1], [4, 2], [6, 1], [6, 1], [6, 2], [6, 2], [8, 1], [8, 1], [8, 1], [8, 1], [8, 1], [8, 1], [8, 1], [9, 3], [9, 5], [19, 2], [19, 3], [10, 3], [10, 5], [22, 3], [25, 0], [25, 1], [27, 2], [29, 2], [29, 1], [29, 2], [29, 1], [29, 1], [29, 1], [29, 1], [29, 3], [29, 3], [29, 3], [29, 1], [29, 1], [29, 1], [29, 1], [29, 1], [29, 1], [29, 1], [49, 1], [49, 1], [30, 1], [30, 4], [30, 6], [30, 4], [31, 0], [31, 1], [32, 1], [32, 4], [32, 5], [32, 6], [34, 1], [34, 4], [34, 5], [35, 1], [35, 1], [36, 1], [36, 4], [36, 5], [63, 1], [63, 1], [26, 0], [26, 1], [66, 1], [23, 2], [23, 3], [11, 2], [11, 5], [68, 1], [68, 3], [70, 2], [69, 7], [73, 0], [73, 3], [74, 0], [74, 1], [75, 0], [75, 1], [76, 0], [76, 1], [77, 0], [77, 1], [78, 0], [78, 1], [79, 0], [79, 1], [81, 3], [81, 5], [89, 2], [89, 3], [82, 3], [82, 5], [91, 2], [93, 4], [93, 3], [99, 4], [102, 1], [102, 4], [95, 0], [95, 1], [105, 0], [105, 1], [106, 1], [108, 0], [108, 1], [109, 1], [110, 0], [110, 1], [111, 1], [112, 0], [112, 1], [98, 0], [98, 1], [104, 1], [104, 2], [115, 1], [115, 1], [115, 1], [94, 0], [94, 2], [114, 1], [114, 1], [114, 1], [113, 1], [107, 1], [107, 2], [120, 2], [120, 2], [67, 1], [67, 2], [124, 2], [124, 2], [97, 2], [97, 2], [92, 2], [92, 3], [83, 3], [129, 1], [129, 1], [129, 2], [130, 2], [84, 3], [84, 5], [133, 2], [133, 3], [85, 3], [85, 3], [86, 5], [138, 1], [138, 2], [139, 5], [140, 3], [141, 0], [141, 1], [144, 3], [144, 5], [147, 2], [147, 3], [146, 3], [149, 0], [149, 1], [149, 1], [149, 2], [96, 0], [96, 1], [96, 1], [96, 2], [96, 2], [96, 3], [96, 3], [96, 4], [142, 1], [142, 2], [150, 1], [151, 9], [151, 12], [151, 6], [160, 6], [163, 5], [165, 4], [167, 5], [172, 6], [156, 2], [156, 3], [162, 2], [162, 5], [178, 1], [179, 2], [179, 3], [176, 3], [143, 0], [143, 2], [143, 6], [182, 2], [184, 4], [184, 5], [15, 3], [15, 5], [189, 2], [189, 3], [188, 1], [188, 3], [188, 4], [192, 2], [190, 4], [190, 5], [195, 1], [195, 1], [195, 1], [195, 4], [12, 6], [205, 2], [207, 0], [207, 1], [206, 5], [210, 2], [210, 3], [208, 5], [212, 2], [212, 3], [14, 6], [214, 3], [214, 4], [216, 3], [216, 4], [217, 3], [217, 7], [13, 6], [221, 8], [228, 0], [228, 1], [222, 3], [222, 4], [230, 1], [230, 2], [223, 0], [223, 1], [232, 4], [232, 6], [234, 2], [234, 3], [224, 0], [224, 4], [224, 6], [225, 0], [225, 4], [225, 6], [237, 2], [237, 3], [239, 1], [239, 2], [239, 2], [236, 1], [236, 2], [242, 2], [242, 3], [226, 0], [226, 3], [227, 0], [227, 3], [245, 1], [245, 2], [246, 2], [246, 3], [101, 1], [101, 1], [101, 1], [101, 1], [101, 1], [101, 1], [101, 1], [24, 1], [24, 1], [24, 1], [24, 1], [194, 1], [194, 1], [122, 1], [122, 1], [148, 1], [148, 1], [123, 3], [123, 4], [88, 1], [88, 3], [88, 4], [254, 1], [254, 1], [175, 1], [175, 1], [175, 1], [186, 1], [186, 1], [255, 1], [255, 1], [47, 1], [47, 1], [135, 2], [135, 3], [259, 3], [259, 3], [258, 1], [258, 2], [260, 2], [260, 3], [136, 2], [136, 3], [263, 1], [263, 2], [264, 2], [264, 3], [252, 1], [252, 2], [265, 2], [265, 3], [253, 1], [253, 2], [266, 2], [266, 3], [46, 3], [267, 1], [267, 2], [268, 2], [268, 3], [159, 1], [159, 1], [180, 1], [180, 1], [158, 1], [158, 1], [158, 1], [270, 1], [270, 1], [270, 1], [257, 2], [257, 2], [257, 3], [257, 3], [257, 4], [257, 4], [257, 5], [273, 2], [273, 5], [273, 5], [273, 7], [274, 2], [274, 3], [274, 3], [274, 4], [274, 4], [272, 3], [272, 3], [272, 3], [272, 3], [272, 3], [272, 3], [272, 3], [269, 2], [269, 4], [286, 2], [286, 4], [271, 2], [271, 4], [288, 2], [288, 4], [287, 1], [287, 1], [291, 1], [291, 2], [293, 2], [293, 3]],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */ , $$ /* vstack */ , _$ /* lstack */ ) {
      /* this == yyval */

      var $0 = $$.length - 1;
      switch (yystate) {
      case 1:

        var r = state;
        state = null;
        return r ? r.validate().build() : '';

        break;
      case 15:
      case 17:
        state.use($$[$0 - 1]);
        break;
      case 18:
        state.use($$[$0 - 2]);
        break;
      case 21:

        var n = $$[$0 - 2];
        if (state.isTypeExist(n)) throw new Error('Duplicate type definition detected at line ' + _$[$0 - 2].first_line + '.');
        if (BUILTIN_TYPES.has(n)) throw new Error('Cannot use built-in type "' + n + '" as a custom type name at line ' + _$[$0 - 2].first_line + '.');

        state.defType(n, Object.assign({
          type: 'text'
        }, $$[$0 - 1], $$[$0]));

        break;
      case 24:
      case 234:
        this.$ = $$[$0];
        break;
      case 25:
      case 142:
      case 152:
      case 305:
      case 307:
        this.$ = Object.assign({}, $$[$0 - 1], $$[$0]);
        break;
      case 26:
        this.$ = Object.assign({
          type: 'float'
        }, $$[$0]);
        break;
      case 27:
        this.$ = Object.assign({
          type: 'decimal'
        }, $$[$0 - 1]);
        break;
      case 29:
        this.$ = {
          type: 'bool'
        };
        break;
      case 31:
        this.$ = {
          type: 'datetime',
          range: 'datetime'
        };
        break;
      case 32:
        this.$ = {
          type: 'datetime',
          range: 'date'
        };
        break;
      case 33:
        this.$ = {
          type: 'datetime',
          range: 'time'
        };
        break;
      case 34:
        this.$ = {
          type: 'datetime',
          range: 'year'
        };
        break;
      case 35:
        this.$ = {
          type: 'datetime',
          range: 'timestamp'
        };
        break;
      case 36:
        this.$ = {
          type: 'json'
        };
        break;
      case 37:
        this.$ = {
          type: 'xml'
        };
        break;
      case 38:
        this.$ = {
          type: 'csv'
        };
        break;
      case 39:
        this.$ = {
          type: 'enum',
          values: $$[$0]
        };
        break;
      case 40:
      case 41:
        this.$ = {
          type: $$[$0]
        };
        break;
      case 44:
        this.$ = {
          type: 'int'
        };
        break;
      case 45:
        this.$ = {
          type: 'int',
          digits: parseInt($$[$0 - 1])
        };
        break;
      case 46:
        this.$ = {
          type: 'int',
          bytes: $$[$0 - 3],
          digits: parseInt($$[$0 - 1])
        };
        break;
      case 47:
        this.$ = {
          type: 'int',
          bytes: $$[$0 - 1]
        };
        break;
      case 49:
        this.$ = {
          unsigned: true
        };
        break;
      case 50:
      case 300:
        this.$ = {};
        break;
      case 51:
        this.$ = {
          totalDigits: parseInt($$[$0 - 1])
        };
        break;
      case 52:
        this.$ = {
          decimalDigits: parseInt($$[$0 - 1])
        };
        break;
      case 53:
        this.$ = {
          totalDigits: parseInt($$[$0 - 3]),
          decimalDigits: parseInt($$[$0 - 1])
        };
        break;
      case 54:
        this.$ = {
          type: 'text'
        };
        break;
      case 55:
        this.$ = {
          type: 'text',
          maxLength: parseInt($$[$0 - 1])
        };
        break;
      case 56:
        this.$ = {
          type: 'text',
          fixedLength: parseInt($$[$0 - 2])
        };
        break;
      case 59:
        this.$ = {
          type: 'binary'
        };
        break;
      case 60:
        this.$ = {
          type: 'binary',
          maxLength: $$[$0 - 1]
        };
        break;
      case 61:
        this.$ = {
          type: 'binary',
          fixedLength: $$[$0 - 2]
        };
        break;
      case 66:
        this.$ = {
          validators0: $$[$0].validators
        };
        break;
      case 69:
        this.$ = state.defEntity($$[$0 - 1][0], $$[$0 - 1][1]);
        break;
      case 70:
        this.$ = state.defEntity($$[$0 - 4][0], Object.assign({}, $$[$0 - 4][1], $$[$0 - 1]));
        break;
      case 71:
      case 255:
      case 257:
      case 263:
      case 265:
        this.$ = [$$[$0]];
        break;
      case 72:
        this.$ = [$$[$0 - 2], {
          base: $$[$0]
        }];
        break;
      case 73:

        if (state.isEntityExist($$[$0])) throw new Error('Duplicate entity definition detected at line ' + _$[$0 - 1].first_line + '.');
        this.$ = $$[$0];

        break;
      case 74:
        this.$ = Object.assign({}, $$[$0 - 6], $$[$0 - 5], $$[$0 - 4], $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 76:
        this.$ = {
          comment: $$[$0 - 1]
        };
        break;
      case 89:
        this.$ = {
          features: [$$[$0 - 1]]
        };
        break;
      case 90:
        this.$ = {
          features: $$[$0 - 1]
        };
        break;
      case 91:
      case 159:
      case 218:
      case 221:
      case 226:
      case 242:
      case 250:
        this.$ = [$$[$0 - 1]];
        break;
      case 92:
      case 160:
      case 219:
      case 222:
      case 227:
      case 243:
      case 251:
        this.$ = [$$[$0 - 2]].concat($$[$0]);
        break;
      case 93:
        this.$ = {
          fields: {
            [$$[$0 - 1][0]]: $$[$0 - 1][1]
          }
        };
        break;
      case 94:
        this.$ = {
          fields: $$[$0 - 1]
        };
        break;
      case 95:
        $$[$0 - 1][1] = Object.assign({}, $$[$0 - 1][1], $$[$0]);
        break;
      case 96:
        this.$ = [$$[$0 - 3], Object.assign({
          type: $$[$0 - 3]
        }, $$[$0 - 2], $$[$0 - 1], $$[$0])];
        break;
      case 97:
        this.$ = [$$[$0 - 2], Object.assign({}, $$[$0 - 1], $$[$0])];
        break;
      case 98:
        this.$ = {
          'default': $$[$0 - 1]
        };
        break;
      case 100:
        this.$ = {
          auto: true
        };
        break;
      case 105:
        this.$ = {
          modifiers0: $$[$0].modifiers
        };
        break;
      case 108:
        this.$ = {
          validators1: $$[$0].validators
        };
        break;
      case 111:
        this.$ = {
          modifiers1: $$[$0].modifiers
        };
        break;
      case 117:

        for (var k in $$[$0]) {
          if (k in $$[$0 - 1]) {
            throw new Error('Duplicate field qualifier detected at line ' + _$[$0 - 1].first_line + '.');
          }
        }
        this.$ = Object.assign({}, $$[$0 - 1], $$[$0]);

        break;
      case 118:
        this.$ = {
          readOnly: true
        };
        break;
      case 119:
        this.$ = {
          fixedValue: true
        };
        break;
      case 120:
        this.$ = {
          forceUpdate: true
        };
        break;
      case 122:
        this.$ = {
          comment: $$[$0]
        };
        break;
      case 126:
        this.$ = {
          optional: true
        };
        break;
      case 127:
        this.$ = {
          modifiers: [$$[$0]]
        };
        break;
      case 128:

        this.$ = {
          modifiers: [$$[$0 - 1]].concat($$[$0].modifiers)
        };

        break;
      case 129:
      case 282:
      case 283:
      case 286:
        this.$ = {
          name: $$[$0]
        };
        break;
      case 130:
      case 187:
      case 306:
      case 314:
      case 318:
        this.$ = $$[$0];
        break;
      case 132:
        this.$ = {
          validators: $$[$0 - 1].validators.concat($$[$0].validators)
        };
        break;
      case 133:
        this.$ = {
          validators: [{
            name: $$[$0]
          }]
        };
        break;
      case 134:
        this.$ = {
          validators: [$$[$0]]
        };
        break;
      case 135:
        this.$ = {
          belongTo: $$[$0]
        };
        break;
      case 136:
        this.$ = {
          bindTo: $$[$0]
        };
        break;
      case 137:
        this.$ = {
          [$$[$0 - 1][0]]: $$[$0 - 1][1]
        };
        break;
      case 138:
        this.$ = Object.assign({}, {
          [$$[$0 - 2][0]]: $$[$0 - 2][1]
        }, $$[$0]);
        break;
      case 139:
        this.$ = {
          key: $$[$0 - 1]
        };
        break;
      case 140:
      case 141:
        this.$ = {
          fields: $$[$0]
        };
        break;
      case 143:
        this.$ = {
          unique: true
        };
        break;
      case 144:
        this.$ = {
          indexes: [$$[$0 - 1]]
        };
        break;
      case 145:
        this.$ = {
          indexes: $$[$0 - 1]
        };
        break;
      case 146:
        this.$ = [$$[$0 - 1]];
        break;
      case 147:
        this.$ = [$$[$0 - 2]].concat($$[$0]);
        break;
      case 148:
      case 149:
        this.$ = {
          data: $$[$0 - 1]
        };
        break;
      case 150:
        this.$ = {
          interface: $$[$0 - 1]
        };
        break;
      case 151:
        this.$ = Object.assign({}, $$[$0]);
        break;
      case 153:
        this.$ = {
          [$$[$0 - 4]]: $$[$0 - 1]
        };
        break;
      case 154:
        this.$ = Object.assign({}, $$[$0 - 2], {
          implementation: $$[$0 - 1]
        }, $$[$0]);
        break;
      case 157:
        this.$ = {
          accept: [$$[$0 - 1]]
        };
        break;
      case 158:
        this.$ = {
          accept: $$[$0 - 1]
        };
        break;
      case 161:
        this.$ = Object.assign($$[$0 - 2], {
          type: $$[$0 - 2].name
        }, $$[$0 - 1], $$[$0]);
        break;
      case 165:
      case 169:
      case 170:
      case 214:
        this.$ = Object.assign({}, $$[$0 - 1], $$[$0]);
        break;
      case 171:
      case 172:
        this.$ = Object.assign({}, $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 173:
        this.$ = Object.assign({}, $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 174:
      case 310:
      case 312:
      case 316:
      case 320:
      case 323:
      case 325:
      case 370:
      case 372:
        this.$ = [$$[$0]];
        break;
      case 175:
      case 324:
      case 371:
        this.$ = [$$[$0 - 1]].concat($$[$0]);
        break;
      case 177:
        this.$ = {
          oolType: 'findOne',
          model: $$[$0 - 6],
          case: {
            items: $$[$0 - 1]
          }
        };
        break;
      case 178:
        this.$ = {
          oolType: 'findOne',
          model: $$[$0 - 9],
          case: {
            items: $$[$0 - 4],
            else: $$[$0 - 2]
          }
        };
        break;
      case 179:
        this.$ = {
          oolType: 'findOne',
          model: $$[$0 - 3],
          condition: $$[$0 - 1]
        };
        break;
      case 180:
        this.$ = {
          oolType: 'update',
          target: $$[$0 - 4],
          data: $$[$0 - 2],
          filter: $$[$0 - 1]
        };
        break;
      case 181:
        this.$ = {
          oolType: 'create',
          target: $$[$0 - 3],
          data: $$[$0 - 1]
        };
        break;
      case 182:
        this.$ = {
          oolType: 'delete',
          target: $$[$0 - 2],
          filter: $$[$0 - 1]
        };
        break;
      case 183:
        this.$ = {
          oolType: 'javascript',
          script: $$[$0 - 2]
        };
        break;
      case 184:
        this.$ = {
          oolType: 'assignment',
          left: $$[$0 - 4],
          right: Object.assign({
            argument: $$[$0 - 2]
          }, $$[$0 - 1])
        };
        break;
      case 185:
      case 190:
      case 201:
        this.$ = [$$[$0 - 1]];
        break;
      case 186:
      case 191:
      case 202:
        this.$ = [$$[$0 - 2]].concat($$[$0]);
        break;
      case 188:
      case 301:
      case 309:
      case 322:
        this.$ = $$[$0 - 1];
        break;
      case 192:
        this.$ = {
          oolType: 'ConditionalStatement',
          test: $$[$0 - 2],
          then: $$[$0]
        }
        break;
      case 194:
        this.$ = {
          return: $$[$0 - 1]
        };
        break;
      case 195:
        this.$ = {
          return: Object.assign($$[$0 - 5], {
            exceptions: $$[$0 - 1]
          })
        };
        break;
      case 196:
        this.$ = {
          oolType: 'ReturnExpression',
          value: $$[$0]
        };
        break;
      case 197:
        this.$ = {
          oolType: 'ConditionalStatement',
          test: $$[$0 - 3],
          then: $$[$0 - 1]
        }
        break;
      case 198:
        this.$ = [{
          oolType: 'ConditionalStatement',
          test: $$[$0 - 4],
          then: $$[$0 - 2]
        }].concat($$[$0]);
        break;
      case 199:
      case 200:
        state.defRelation($$[$0 - 1]);
        break;
      case 204:

        if ($$[$0 - 2].right === $$[$0].right) {
          throw new Error('Invalid relation declaration at line ' + _$[$0 - 2].first_line + '.');
        }
        let right2 = {
          relationship: $$[$0 - 2].relationship,
          size: $$[$0 - 2].size
        };
        let right1Name = $$[$0].right;
        delete $$[$0].right;

        this.$ = Object.assign({}, $$[$0 - 2], {
          right: {
            [right1Name]: $$[$0],
            [$$[$0 - 2].right]: right2
          },
          type: 'chain'
        });
        delete this.$.relationship;
        delete this.$.size;

        break;
      case 205:

        let right1Name2 = $$[$0 - 3].left;
        let right2Name2 = $$[$0];

        this.$ = Object.assign({}, $$[$0 - 3], {
          relationship: $$[$0 - 3].relationship.replace('n:', '1:')
        }, {
          left: $$[$0 - 3].right,
          right: [right1Name2, right2Name2],
          type: 'multi'
        });

        break;
      case 206:
        this.$ = Object.assign({}, $$[$0 - 1], {
          right: $$[$0]
        });
        break;
      case 207:
      case 361:
      case 365:
        this.$ = Object.assign({
          left: $$[$0 - 2]
        }, $$[$0]);
        break;
      case 208:
        this.$ = Object.assign({
          left: $$[$0 - 3],
          optional: true
        }, $$[$0]);
        break;
      case 209:
        this.$ = {
          relationship: 'n:1',
          size: 'one'
        };
        break;
      case 210:
        this.$ = {
          relationship: 'n:n',
          size: 'small'
        };
        break;
      case 211:
        this.$ = {
          relationship: 'n:n',
          size: 'medium'
        };
        break;
      case 212:
        this.$ = {
          relationship: 'n:n',
          size: 'large'
        };
        break;
      case 213:

        if (state.parsed.schema) throw new Error('Only one schema definition allowed in a schema file. Extra schema definition detected at line ' + _$[$0 - 5].first_line + '.');
        state.defSchema($$[$0 - 4], $$[$0 - 1]);

        break;
      case 217:
        this.$ = {
          entities: $$[$0 - 1]
        };
        break;
      case 220:
        this.$ = {
          views: $$[$0 - 1]
        };
        break;
      case 223:
        this.$ = state.defDocument($$[$0 - 4], $$[$0 - 1]);
        break;
      case 224:
        this.$ = {
          entity: $$[$0 - 1]
        };
        break;
      case 225:
        this.$ = {
          entity: $$[$0 - 2],
          joinWith: $$[$0]
        };
        break;
      case 228:
        this.$ = {
          entity: $$[$0 - 2],
          on: {
            left: $$[$0],
            right: '$key'
          }
        };
        break;
      case 229:
        this.$ = {
          document: $$[$0 - 6],
          on: {
            left: $$[$0],
            right: $$[$0 - 2]
          }
        };
        break;
      case 230:
        this.$ = state.defView($$[$0 - 4], $$[$0 - 1]);
        break;
      case 231:
        this.$ = Object.assign({}, $$[$0 - 7], $$[$0 - 5], $$[$0 - 4], $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 235:
        this.$ = Object.assign({}, $$[$0 - 1], {
          isList: true
        });
        break;
      case 236:
        this.$ = {
          entity: $$[$0]
        };
        break;
      case 237:
        this.$ = {
          document: $$[$0 - 1]
        };
        break;
      case 240:
        this.$ = {
          selectBy: [$$[$0 - 1]]
        };
        break;
      case 241:
        this.$ = {
          selectBy: $$[$0 - 1]
        };
        break;
      case 245:
      case 246:
        this.$ = {
          groupBy: $$[$0 - 1]
        };
        break;
      case 248:
      case 249:
        this.$ = {
          orderBy: $$[$0 - 1]
        };
        break;
      case 252:
        this.$ = {
          field: $$[$0],
          ascend: true
        };
        break;
      case 253:
        this.$ = {
          field: $$[$0 - 1],
          ascend: true
        };
        break;
      case 254:
        this.$ = {
          field: $$[$0 - 1],
          ascend: false
        };
        break;
      case 256:
      case 258:
      case 264:
      case 266:
        this.$ = [$$[$0 - 1]].concat($$[$0]);
        break;
      case 260:
        this.$ = {
          skip: $$[$0 - 1]
        };
        break;
      case 262:
        this.$ = {
          limit: $$[$0 - 1]
        };
        break;
      case 284:
      case 287:
        this.$ = {
          name: $$[$0 - 2]
        };
        break;
      case 285:
        this.$ = {
          name: $$[$0 - 3],
          args: $$[$0 - 1]
        };
        break;
      case 288:
        this.$ = {
          name: $$[$0 - 3],
          options: $$[$0 - 1]
        };
        break;
      case 293:
        this.$ = Object.assign({
          oolType: 'FunctionCall'
        }, $$[$0]);
        break;
      case 302:
      case 303:
        this.$ = {
          [$$[$0 - 2]]: $$[$0]
        };
        break;
      case 308:
        this.$ = [];
        break;
      case 311:
        this.$ = $$[$0 - 1].concat($$[$0]);
        break;
      case 313:
      case 315:
      case 317:
      case 319:
      case 321:
      case 326:
      case 373:
        this.$ = [$$[$0 - 1]].concat($$[$0]);
        break;
      case 337:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 1]
        }, $$[$0]);
        break;
      case 338:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 1]
        }, $$[$0]);
        break;
      case 339:
      case 340:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 2]
        }, $$[$0 - 1], $$[$0]);
        break;
      case 341:
      case 342:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 3]
        }, $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 343:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 4]
        }, $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 344:
        this.$ = {
          oolType: 'ThrowExpression'
        };
        break;
      case 345:
        this.$ = {
          oolType: 'ThrowExpression',
          message: $$[$0 - 1]
        };
        break;
      case 346:
        this.$ = {
          oolType: 'ThrowExpression',
          errorType: $$[$0 - 1]
        };
        break;
      case 347:
        this.$ = {
          oolType: 'ThrowExpression',
          errorType: $$[$0 - 3],
          message: $$[$0 - 1]
        };
        break;
      case 348:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'exists',
          argument: $$[$0 - 1]
        };
        break;
      case 349:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'not-exists',
          argument: $$[$0 - 2]
        };
        break;
      case 350:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'is-null',
          argument: $$[$0 - 2]
        };
        break;
      case 351:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'is-not-null',
          argument: $$[$0 - 3]
        };
        break;
      case 352:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'not',
          argument: $$[$0 - 1],
          prefix: true
        };
        break;
      case 353:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '>',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 354:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '<',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 355:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '>=',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 356:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '<=',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 357:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '=',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 358:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '!=',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 359:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: 'in',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 360:
      case 364:
        this.$ = Object.assign({
          left: $$[$0 - 1]
        }, $$[$0]);
        break;
      case 362:
      case 366:
        this.$ = Object.assign({
          oolType: 'BinaryExpression'
        }, $$[$0 - 1], {
          right: $$[$0]
        });
        break;
      case 363:
      case 367:
        this.$ = Object.assign({
          oolType: 'BinaryExpression'
        }, $$[$0 - 3], {
          right: $$[$0 - 1]
        });
        break;
      case 368:
        this.$ = {
          operator: 'and'
        };
        break;
      case 369:
        this.$ = {
          operator: 'or'
        };
        break;
      }
    },
    table: [{
      3: 1,
      4: 2,
      5: [1, 3],
      6: 4,
      7: $V0,
      8: 6,
      9: 7,
      10: 8,
      11: 9,
      12: 10,
      13: 11,
      14: 12,
      15: 13,
      16: $V1,
      21: $V2,
      68: 16,
      70: 21,
      72: $V3,
      187: $V4,
      204: $V5,
      213: $V6,
      220: $V7
    }, {
      1: [3]
    }, {
      1: [2, 1]
    }, {
      1: [2, 2]
    }, {
      5: [1, 23]
    }, {
      5: [2, 4],
      6: 24,
      7: $V0,
      8: 6,
      9: 7,
      10: 8,
      11: 9,
      12: 10,
      13: 11,
      14: 12,
      15: 13,
      16: $V1,
      21: $V2,
      68: 16,
      70: 21,
      72: $V3,
      187: $V4,
      204: $V5,
      213: $V6,
      220: $V7
    }, {
      5: [2, 5],
      6: 25,
      7: $V0,
      8: 6,
      9: 7,
      10: 8,
      11: 9,
      12: 10,
      13: 11,
      14: 12,
      15: 13,
      16: $V1,
      21: $V2,
      68: 16,
      70: 21,
      72: $V3,
      187: $V4,
      204: $V5,
      213: $V6,
      220: $V7
    }, o($V8, [2, 8]), o($V8, [2, 9]), o($V8, [2, 10]), o($V8, [2, 11]), o($V8, [2, 12]), o($V8, [2, 13]), o($V8, [2, 14]), {
      7: [1, 27],
      17: [1, 26]
    }, {
      7: [1, 29],
      21: $V9,
      22: 28,
      24: 30,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      7: [1, 35]
    }, {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 36,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 39,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 40,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      7: [1, 42],
      188: 41,
      190: 43,
      194: 45,
      196: $Ve,
      201: $Vf,
      251: $Vg
    }, {
      7: [2, 71],
      71: [1, 48]
    }, {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 49,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      1: [2, 3]
    }, {
      5: [2, 6]
    }, {
      5: [2, 7]
    }, {
      7: [1, 50]
    }, {
      18: [1, 51]
    }, {
      7: [1, 52]
    }, {
      18: [1, 53]
    }, o([7, 125], $Vh, {
      25: 54,
      27: 55,
      28: $Vi
    }), o($Vj, [2, 274]), o($Vj, [2, 275]), o($Vj, [2, 276]), o($Vj, [2, 277]), o($V8, [2, 69], {
      18: [1, 57]
    }), {
      7: [1, 58]
    }, o($Vk, [2, 298]), o($Vk, [2, 299]), {
      7: [1, 59]
    }, {
      7: [1, 60]
    }, {
      7: [1, 61]
    }, {
      18: [1, 62]
    }, {
      7: [2, 203],
      191: [1, 63],
      193: [1, 64]
    }, {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 65,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 68,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, o($Vm, [2, 278]), o($Vm, [2, 279]), {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 69,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, o($Vn, [2, 73]), o($V8, [2, 15]), {
      17: $Vo,
      19: 70
    }, o($V8, [2, 19]), {
      21: $V9,
      22: 73,
      23: 72,
      24: 30,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      7: [2, 64],
      26: 74,
      66: 75,
      67: 76,
      124: 77,
      125: $Vp
    }, o($Vq, [2, 23]), {
      17: $Vd,
      21: $V9,
      24: 37,
      29: 79,
      30: 80,
      32: 81,
      34: 82,
      35: 83,
      36: 84,
      37: [1, 85],
      42: [1, 86],
      43: [1, 87],
      44: [1, 88],
      45: [1, 89],
      46: 90,
      47: 91,
      48: [1, 92],
      49: 93,
      50: [1, 100],
      51: [1, 101],
      58: [1, 94],
      59: [1, 95],
      61: [1, 96],
      62: [1, 97],
      63: 98,
      64: [1, 102],
      65: [1, 103],
      238: $Va,
      241: $Vb,
      250: $Vc,
      261: $Vr
    }, o($Vs, [2, 75], {
      69: 104,
      73: 105,
      80: [1, 106]
    }), {
      18: [1, 107]
    }, {
      18: [1, 108]
    }, {
      18: [1, 109]
    }, o($V8, [2, 199]), {
      188: 111,
      189: 110,
      190: 43,
      194: 45,
      196: $Ve,
      201: $Vf,
      251: $Vg
    }, {
      153: $Vt,
      192: 112,
      195: 113,
      199: $Vu,
      200: $Vv,
      201: $Vw
    }, {
      194: 118,
      201: $Vf,
      251: $Vg
    }, {
      90: [1, 119]
    }, o($Vx, [2, 280]), o($Vx, [2, 281]), {
      197: [1, 120]
    }, {
      7: [2, 72]
    }, {
      20: [1, 121]
    }, {
      7: [1, 122]
    }, {
      20: [1, 123]
    }, {
      7: [1, 124]
    }, {
      7: [2, 21]
    }, {
      7: [2, 65]
    }, o($Vy, [2, 66]), o($Vy, [2, 131], {
      124: 77,
      67: 125,
      125: $Vp
    }), {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 126,
      123: 127,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, o($Vq, [2, 24]), o($Vq, [2, 48], {
      31: 128,
      57: [1, 129]
    }), o($Vq, [2, 26], {
      33: [1, 130]
    }), o($Vq, [2, 28]), o($Vq, [2, 29]), o($Vq, [2, 30]), o($Vq, [2, 31], {
      38: [1, 131],
      40: [1, 132],
      41: [1, 133]
    }), o($Vq, [2, 35]), o($Vq, [2, 36]), o($Vq, [2, 37]), o($Vq, [2, 38]), o($Vq, [2, 39]), o($Vq, [2, 40]), o($Vq, [2, 41]), o($Vz, [2, 44], {
      52: [1, 134]
    }), o($VA, [2, 50], {
      52: [1, 135]
    }), o($Vq, [2, 54], {
      52: [1, 136]
    }), o($Vq, [2, 57]), o($Vq, [2, 58]), o($Vq, [2, 59], {
      52: [1, 137]
    }), {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 139,
      238: $Va,
      241: $Vb,
      250: $Vc,
      267: 138
    }, o($VB, [2, 42]), o($VB, [2, 43]), o($VC, [2, 62]), o($VC, [2, 63]), {
      20: [1, 140]
    }, o($VD, [2, 77], {
      74: 141,
      81: 142,
      87: [1, 143]
    }), {
      17: [1, 144]
    }, {
      205: 145,
      206: 146,
      209: [1, 147]
    }, {
      71: [1, 150],
      221: 148,
      222: 149
    }, {
      214: 151,
      215: [1, 152]
    }, {
      20: [1, 153]
    }, {
      7: [1, 154]
    }, {
      7: [2, 204]
    }, {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 155,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, o($VE, [2, 209]), o($VE, [2, 210]), o($VE, [2, 211]), {
      202: [1, 156]
    }, {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 157,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      153: $Vt,
      192: 158,
      195: 113,
      199: $Vu,
      200: $Vv,
      201: $Vw
    }, {
      198: [1, 159]
    }, o($V8, [2, 16]), {
      17: $Vo,
      19: 160,
      20: [2, 17]
    }, o($V8, [2, 20]), {
      20: [2, 67],
      21: $V9,
      22: 73,
      23: 161,
      24: 30,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, o($Vy, [2, 132]), o($VF, [2, 133], {
      52: $VG
    }), o($VF, [2, 134]), o($Vq, [2, 25]), o($Vq, [2, 49]), o($Vq, [2, 27]), {
      39: [1, 163]
    }, {
      39: [1, 164]
    }, {
      39: [1, 165]
    }, {
      53: [1, 166],
      55: [1, 167]
    }, {
      53: [1, 168],
      56: [1, 169]
    }, {
      53: [1, 170]
    }, {
      53: [1, 171]
    }, {
      262: [1, 172]
    }, {
      56: $VH,
      262: [2, 323],
      268: 173
    }, o($V8, [2, 70]), o($VI, [2, 79], {
      75: 175,
      82: 176,
      90: [1, 177]
    }), o($VD, [2, 78]), {
      7: [1, 179],
      21: $V9,
      24: 66,
      48: $Vl,
      88: 178,
      122: 180,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      7: [1, 181]
    }, {
      20: [1, 182]
    }, {
      20: [2, 215],
      207: 183,
      208: 184,
      211: [1, 185]
    }, {
      7: [1, 186]
    }, {
      20: [1, 187]
    }, {
      7: [1, 188]
    }, {
      194: 189,
      201: $Vf,
      251: $Vg
    }, {
      20: [1, 190]
    }, {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 191,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, o($V8, [2, 200]), {
      20: [2, 201],
      188: 111,
      189: 192,
      190: 43,
      194: 45,
      196: $Ve,
      201: $Vf,
      251: $Vg
    }, o($VJ, [2, 206]), {
      58: [1, 193]
    }, {
      7: [2, 205]
    }, o($VJ, [2, 207]), {
      153: $Vt,
      192: 194,
      195: 113,
      199: $Vu,
      200: $Vv,
      201: $Vw
    }, {
      20: [2, 18]
    }, {
      20: [2, 68]
    }, {
      17: $VK,
      53: $VL,
      54: [1, 195],
      101: 200,
      135: 205,
      136: 206,
      169: $VM,
      186: 198,
      247: $VN,
      248: $VO,
      249: $VP,
      252: 196,
      255: 197,
      256: $VQ,
      257: 199,
      261: $VR
    }, o($Vq, [2, 32]), o($Vq, [2, 33]), o($Vq, [2, 34]), {
      54: [1, 211]
    }, {
      54: [1, 213],
      56: [1, 212]
    }, {
      54: [1, 214],
      56: [1, 215]
    }, {
      53: [1, 216]
    }, {
      54: [1, 217]
    }, {
      54: [1, 218]
    }, o([7, 71, 80, 100, 116, 117, 118, 119, 121, 125], [2, 322]), {
      262: [2, 324]
    }, {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 219,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, o($VS, [2, 81], {
      76: 220,
      83: 221,
      128: [1, 222]
    }), o($VI, [2, 80]), {
      7: [1, 224],
      17: $Vd,
      21: $V9,
      24: 37,
      47: 226,
      91: 223,
      93: 225,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      7: [1, 227]
    }, {
      18: [1, 228]
    }, {
      7: [2, 286],
      52: [1, 229]
    }, o($Vs, [2, 76]), o($V8, [2, 213]), {
      20: [2, 214]
    }, {
      20: [2, 216]
    }, {
      7: [1, 230]
    }, {
      18: [1, 231]
    }, o($V8, [2, 230]), o([20, 233, 235, 238, 243, 244], $VT, {
      141: 232,
      144: 233,
      145: $VU
    }), {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 236,
      230: 235,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, o($V8, [2, 223]), {
      7: [1, 237]
    }, {
      20: [2, 202]
    }, {
      203: [1, 238]
    }, o($VJ, [2, 208]), o($VF, [2, 284]), {
      54: [1, 239]
    }, {
      54: [2, 314],
      56: $VV,
      265: 240
    }, o($VW, [2, 296], {
      67: 76,
      124: 77,
      66: 242,
      106: 243,
      107: 244,
      120: 245,
      121: $VX,
      125: $Vp
    }), o($VW, [2, 297]), o($VY, [2, 294]), o($VY, [2, 295]), o($VY, [2, 267]), o($VY, [2, 268]), o($VY, [2, 269]), o($VY, [2, 270]), o($VY, [2, 271]), o($VY, [2, 272]), o($VY, [2, 273]), {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 250,
      53: $VZ,
      171: [1, 247],
      238: $Va,
      241: $Vb,
      250: $Vc,
      258: 248,
      259: 249
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 254,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR,
      262: [1, 252],
      263: 253
    }, o($Vz, [2, 45]), {
      53: [1, 258]
    }, o($Vz, [2, 47]), o($VA, [2, 51]), {
      53: [1, 259]
    }, {
      54: [1, 260]
    }, o($Vq, [2, 55], {
      60: [1, 261]
    }), o($Vq, [2, 60], {
      60: [1, 262]
    }), {
      56: $VH,
      262: [2, 325],
      268: 263
    }, o($V_, [2, 83], {
      77: 264,
      84: 265,
      132: [1, 266]
    }), o($VS, [2, 82]), {
      21: $V9,
      24: 267,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      7: [1, 268]
    }, {
      18: [1, 269]
    }, {
      7: [2, 121],
      80: [1, 271],
      94: 270
    }, o($Vq, $Vh, {
      27: 55,
      25: 272,
      97: 273,
      28: $Vi,
      126: [1, 274],
      127: [1, 275]
    }), o($VD, [2, 89]), {
      21: $V9,
      24: 66,
      48: $Vl,
      88: 277,
      89: 276,
      122: 180,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      17: $VK,
      21: $V9,
      24: 282,
      53: $VL,
      54: [1, 278],
      101: 281,
      135: 205,
      136: 206,
      169: $VM,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      253: 279,
      254: 280,
      261: $VR
    }, {
      18: [1, 283]
    }, {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 285,
      210: 284,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, o($V$, [2, 238], {
      223: 286,
      232: 287,
      233: [1, 288]
    }), o($V01, [2, 156]), {
      7: [1, 290],
      17: $V11,
      21: $V9,
      24: 292,
      146: 289,
      148: 291,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      7: [2, 234],
      231: [1, 294]
    }, o($V21, [2, 236], {
      213: [1, 295]
    }), {
      20: [2, 224],
      87: $V31,
      216: 296
    }, o($VE, [2, 212]), o($VF, [2, 285]), {
      54: [2, 315]
    }, {
      17: $VK,
      53: $VL,
      101: 200,
      135: 205,
      136: 206,
      169: $VM,
      186: 198,
      247: $VN,
      248: $VO,
      249: $VP,
      255: 298,
      256: $VQ,
      257: 199,
      261: $VR
    }, o($VW, [2, 337], {
      107: 244,
      120: 245,
      106: 299,
      121: $VX
    }), o($VW, [2, 338], {
      124: 77,
      109: 300,
      67: 301,
      125: $Vp
    }), o($V41, [2, 105]), o($V41, [2, 127], {
      120: 245,
      107: 302,
      121: $VX
    }), {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 303,
      123: 304,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, o($VY, [2, 300]), {
      171: [1, 305]
    }, {
      56: $V51,
      171: [2, 304],
      260: 306
    }, {
      28: [1, 308]
    }, {
      28: [1, 309]
    }, o($VY, [2, 308]), {
      262: [1, 310]
    }, {
      56: $V61,
      262: [2, 310],
      264: 311
    }, o($VW, [2, 291]), o($VW, [2, 292], {
      52: $VG
    }), o($VW, [2, 293]), {
      54: [1, 313]
    }, {
      54: [1, 314]
    }, o($VA, [2, 52]), o($Vq, [2, 56]), o($Vq, [2, 61]), {
      262: [2, 326]
    }, o($V71, [2, 85], {
      78: 315,
      85: 316,
      134: [1, 317]
    }), o($V_, [2, 84]), {
      7: [1, 319],
      21: $V9,
      24: 320,
      46: 321,
      129: 318,
      238: $Va,
      241: $Vb,
      250: $Vc,
      261: $Vr
    }, {
      7: [1, 322]
    }, o($VI, [2, 93]), {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 226,
      91: 324,
      92: 323,
      93: 225,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      7: [2, 95]
    }, {
      17: [1, 325]
    }, o($V81, [2, 101], {
      95: 326,
      104: 327,
      114: 328,
      102: 329,
      113: 330,
      115: 331,
      99: 332,
      100: $V91,
      116: $Va1,
      117: $Vb1,
      118: $Vc1,
      119: $Vd1
    }), o($Ve1, [2, 114], {
      98: 338,
      113: 339,
      119: $Vd1
    }), {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 340,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 341,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      20: [1, 342]
    }, {
      7: [1, 343]
    }, {
      7: [2, 287]
    }, {
      54: [1, 344]
    }, {
      54: [2, 318],
      56: $Vf1,
      266: 345
    }, o($Vg1, [2, 289]), o($Vg1, [2, 290]), {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 348,
      212: 347,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      20: [1, 349]
    }, {
      7: [1, 350]
    }, o($Vh1, [2, 244], {
      224: 351,
      235: [1, 352]
    }), o($V$, [2, 239]), {
      154: [1, 353]
    }, {
      7: [1, 354]
    }, {
      18: [1, 355]
    }, o($Vi1, [2, 162], {
      149: 356,
      27: 357,
      99: 358,
      28: $Vi,
      100: $Vj1
    }), o($Vk1, [2, 282]), o($Vk1, [2, 283]), {
      7: [2, 235]
    }, o($V21, [2, 237]), {
      20: [2, 225]
    }, {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 361,
      217: 360,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      54: [2, 316],
      56: $VV,
      265: 362
    }, o($VW, [2, 339], {
      124: 77,
      67: 301,
      109: 363,
      125: $Vp
    }), o($VW, [2, 340], {
      120: 245,
      111: 364,
      107: 365,
      121: $VX
    }), o($Vy, [2, 108]), o($V41, [2, 128]), o($VF, [2, 129], {
      52: $VG
    }), o($VF, [2, 130]), o($VY, [2, 301]), {
      171: [2, 305]
    }, {
      17: $Vd,
      21: $V9,
      24: 37,
      47: 250,
      53: $VZ,
      238: $Va,
      241: $Vb,
      250: $Vc,
      259: 366
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 367,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 368,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR
    }, o($VY, [2, 309]), {
      262: [2, 311]
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 369,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR
    }, o($Vz, [2, 46]), o($VA, [2, 53]), {
      20: [2, 87],
      79: 370,
      86: 371,
      137: [1, 372]
    }, o($V71, [2, 86]), {
      135: 373,
      136: 374,
      169: $VM,
      261: $VR
    }, {
      7: [1, 375],
      71: $Vl1,
      130: 376
    }, {
      18: [1, 378]
    }, o($Vn, [2, 140]), o($Vn, [2, 141]), o($VS, [2, 139]), {
      20: [1, 379]
    }, {
      7: [1, 380]
    }, {
      7: [2, 122]
    }, o($Ve1, $Vm1, {
      67: 76,
      124: 77,
      107: 244,
      120: 245,
      96: 381,
      66: 382,
      106: 383,
      121: $VX,
      125: $Vp
    }), o($V81, [2, 102]), o($V81, [2, 116], {
      114: 328,
      102: 329,
      113: 330,
      115: 331,
      99: 332,
      104: 384,
      100: $V91,
      116: $Va1,
      117: $Vb1,
      118: $Vc1,
      119: $Vd1
    }), o($Vq, [2, 123]), o($Vq, [2, 124]), o($Vq, [2, 125]), o($Vq, [2, 99]), {
      52: [1, 385]
    }, o($Vq, [2, 126]), o($Vq, [2, 118]), o($Vq, [2, 119]), o($Vq, [2, 120]), o($Ve1, [2, 97]), o($Ve1, [2, 115]), o($Vn1, [2, 135]), o($Vn1, [2, 136]), o($VD, [2, 90]), {
      20: [2, 91],
      21: $V9,
      24: 66,
      48: $Vl,
      88: 277,
      89: 386,
      122: 180,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      7: [2, 288]
    }, {
      54: [2, 319]
    }, {
      17: $VK,
      21: $V9,
      24: 282,
      53: $VL,
      101: 281,
      135: 205,
      136: 206,
      169: $VM,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      254: 387,
      261: $VR
    }, {
      20: [1, 388]
    }, {
      7: [1, 389]
    }, o([20, 211], [2, 217]), {
      17: $Vd,
      20: [2, 218],
      21: $V9,
      24: 37,
      47: 285,
      210: 390,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, o($Vo1, [2, 247], {
      225: 391,
      238: [1, 392]
    }), {
      154: [1, 393]
    }, {
      7: [1, 395],
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      52: $Vp1,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      159: 394,
      169: $VM,
      175: 399,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR,
      269: 396,
      270: 397,
      272: 401,
      274: 400,
      277: $Vq1
    }, o($V01, [2, 157]), {
      17: $V11,
      21: $V9,
      24: 292,
      146: 404,
      147: 403,
      148: 291,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      7: $Vm1,
      66: 382,
      67: 76,
      96: 405,
      106: 383,
      107: 244,
      120: 245,
      121: $VX,
      124: 77,
      125: $Vp
    }, o($Vi1, [2, 163], {
      99: 406,
      100: $Vj1
    }), o($Vi1, [2, 164]), {
      52: [1, 407]
    }, {
      7: [1, 408]
    }, {
      213: [1, 410],
      218: [1, 409]
    }, {
      54: [2, 317]
    }, o($VW, [2, 341], {
      120: 245,
      107: 365,
      111: 411,
      121: $VX
    }), o($VW, [2, 342]), o([7, 54, 56, 71, 80, 171, 181, 262, 276, 277, 279, 280, 281, 282, 283, 284, 285, 289, 290], [2, 111]), {
      56: $V51,
      171: [2, 306],
      260: 412
    }, o($Vr1, [2, 302]), o($Vr1, [2, 303]), {
      56: $V61,
      262: [2, 312],
      264: 413
    }, {
      20: [2, 74]
    }, {
      20: [2, 88]
    }, {
      7: [1, 414]
    }, {
      7: [1, 415]
    }, {
      7: [1, 416]
    }, o($V_, [2, 144]), o($Vn, [2, 142]), {
      131: [1, 417]
    }, {
      21: $V9,
      24: 320,
      46: 321,
      129: 419,
      133: 418,
      238: $Va,
      241: $Vb,
      250: $Vc,
      261: $Vr
    }, o($VI, [2, 94]), {
      17: $Vd,
      20: [2, 137],
      21: $V9,
      24: 37,
      47: 226,
      91: 324,
      92: 420,
      93: 225,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, o($Ve1, [2, 96]), o($Ve1, [2, 167], {
      107: 244,
      120: 245,
      106: 421,
      121: $VX
    }), o($Ve1, [2, 168], {
      124: 77,
      67: 301,
      109: 422,
      125: $Vp
    }), o($V81, [2, 117]), {
      17: $VK,
      53: $VL,
      101: 424,
      103: [1, 423],
      135: 205,
      136: 206,
      169: $VM,
      247: $VN,
      248: $VO,
      249: $VP,
      261: $VR
    }, {
      20: [2, 92]
    }, {
      54: [2, 320],
      56: $Vf1,
      266: 425
    }, {
      20: [2, 220]
    }, {
      20: [2, 221],
      21: $V9,
      24: 66,
      48: $Vl,
      122: 348,
      212: 426,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      20: [2, 219]
    }, o($Vs1, [2, 259], {
      226: 427,
      243: [1, 428]
    }), {
      154: [1, 429]
    }, {
      7: [1, 431],
      21: $V9,
      24: 66,
      48: $Vl,
      122: 433,
      236: 430,
      238: $Va,
      239: 432,
      241: $Vb,
      250: $Vc
    }, {
      7: [1, 434]
    }, {
      18: [1, 435]
    }, o($Vt1, [2, 327]), o($Vt1, [2, 328], {
      286: 436,
      287: 437,
      289: $Vu1,
      290: $Vv1
    }), {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      52: $Vp1,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 399,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR,
      269: 440,
      270: 441,
      272: 401,
      274: 400,
      277: $Vq1
    }, o($Vw1, [2, 334], {
      71: [1, 444],
      276: [1, 442],
      277: [1, 443],
      279: [1, 445],
      280: [1, 446],
      281: [1, 447],
      282: [1, 448],
      283: [1, 449],
      284: [1, 450],
      285: [1, 451]
    }), o($Vw1, [2, 335]), o($Vw1, [2, 336]), {
      52: [1, 452]
    }, {
      20: [1, 453]
    }, {
      7: [1, 454]
    }, {
      7: [2, 161]
    }, o($Vi1, [2, 165]), {
      17: $VK,
      53: $VL,
      101: 424,
      135: 205,
      136: 206,
      169: $VM,
      247: $VN,
      248: $VO,
      249: $VP,
      261: $VR
    }, {
      20: [2, 226],
      87: $V31,
      216: 455
    }, {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 456,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      203: [1, 457]
    }, o($VW, [2, 343]), {
      171: [2, 307]
    }, {
      262: [2, 313]
    }, {
      18: [1, 458]
    }, o($V71, [2, 148]), o($V71, [2, 149]), o($Vn, [2, 143]), {
      20: [1, 459]
    }, {
      7: [1, 460],
      71: $Vl1,
      130: 376
    }, {
      20: [2, 138]
    }, o($Ve1, [2, 169], {
      124: 77,
      67: 301,
      109: 461,
      125: $Vp
    }), o($Ve1, [2, 170], {
      120: 245,
      107: 365,
      111: 462,
      121: $VX
    }), {
      54: [1, 463]
    }, {
      54: [1, 464]
    }, {
      54: [2, 321]
    }, {
      20: [2, 222]
    }, {
      20: [2, 261],
      227: 465,
      244: [1, 466]
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 467,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR
    }, {
      7: [1, 469],
      21: $V9,
      24: 66,
      48: $Vl,
      122: 433,
      236: 468,
      238: $Va,
      239: 432,
      241: $Vb,
      250: $Vc
    }, {
      7: [1, 470]
    }, {
      18: [1, 471]
    }, {
      7: [2, 255],
      56: $Vx1,
      242: 472
    }, o($Vy1, [2, 252], {
      240: [1, 474],
      241: [1, 475]
    }), o($V$, [2, 240]), {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      52: $Vp1,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      159: 477,
      169: $VM,
      175: 399,
      186: 198,
      234: 476,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR,
      269: 396,
      270: 397,
      272: 401,
      274: 400,
      277: $Vq1
    }, o($Vz1, [2, 360]), {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      52: [1, 479],
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 399,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR,
      270: 478,
      272: 401,
      274: 400,
      277: $Vq1
    }, o($VA1, [2, 368]), o($VA1, [2, 369]), {
      54: [1, 480]
    }, {
      286: 436,
      287: 437,
      289: $Vu1,
      290: $Vv1
    }, o($Vw1, [2, 348]), {
      276: [1, 481]
    }, {
      277: [1, 483],
      278: [1, 482]
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 484,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 485,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 486,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 487,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 488,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 489,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 490,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 399,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR,
      270: 491,
      272: 401,
      274: 400,
      277: $Vq1
    }, o($V01, [2, 158]), {
      17: $V11,
      20: [2, 159],
      21: $V9,
      24: 292,
      146: 404,
      147: 492,
      148: 291,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      20: [2, 227]
    }, {
      7: [2, 228]
    }, {
      219: [1, 493]
    }, {
      21: $V9,
      24: 496,
      138: 494,
      139: 495,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, o($V_, [2, 145]), {
      20: [2, 146],
      21: $V9,
      24: 320,
      46: 321,
      129: 419,
      133: 497,
      238: $Va,
      241: $Vb,
      250: $Vc,
      261: $Vr
    }, o($Ve1, [2, 171], {
      120: 245,
      107: 365,
      111: 498,
      121: $VX
    }), o($Ve1, [2, 172]), o($Vq, [2, 100]), o($Vq, [2, 98]), {
      20: [2, 231]
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 499,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR
    }, {
      7: [1, 500]
    }, {
      7: [1, 501]
    }, {
      18: [1, 502]
    }, o($Vh1, [2, 245]), {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 433,
      237: 503,
      238: $Va,
      239: 504,
      241: $Vb,
      250: $Vc
    }, {
      7: [2, 256]
    }, {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 433,
      238: $Va,
      239: 505,
      241: $Vb,
      250: $Vc
    }, o($Vy1, [2, 253]), o($Vy1, [2, 254]), {
      20: [1, 506]
    }, {
      7: [1, 507]
    }, o($Vz1, [2, 362]), {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      52: $Vp1,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      169: $VM,
      175: 399,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR,
      269: 508,
      270: 441,
      272: 401,
      274: 400,
      277: $Vq1
    }, {
      286: 509,
      287: 437,
      289: $Vu1,
      290: $Vv1
    }, o($Vw1, [2, 349]), o($Vw1, [2, 350]), {
      278: [1, 510]
    }, o($Vw1, [2, 353]), o($Vw1, [2, 354]), o($Vw1, [2, 355]), o($Vw1, [2, 356]), o($Vw1, [2, 357]), o($Vw1, [2, 358]), o($Vw1, [2, 359]), {
      54: [1, 511]
    }, {
      20: [2, 160]
    }, {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 512,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      20: [1, 513]
    }, {
      20: [2, 151],
      21: $V9,
      24: 496,
      138: 514,
      139: 495,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      7: [1, 515]
    }, {
      20: [2, 147]
    }, o($Ve1, [2, 173]), {
      7: [1, 516]
    }, o($Vs1, [2, 260]), o($Vo1, [2, 248]), {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 433,
      237: 517,
      238: $Va,
      239: 504,
      241: $Vb,
      250: $Vc
    }, {
      20: [1, 518]
    }, {
      7: [1, 519]
    }, {
      7: [2, 257],
      56: $Vx1,
      242: 520
    }, o($V$, [2, 241]), {
      17: $VK,
      20: [2, 242],
      21: $V9,
      24: 66,
      48: $Vl,
      52: $Vp1,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      159: 477,
      169: $VM,
      175: 399,
      186: 198,
      234: 521,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR,
      269: 396,
      270: 397,
      272: 401,
      274: 400,
      277: $Vq1
    }, {
      54: [1, 522]
    }, o($Vz1, [2, 361]), o($Vw1, [2, 351]), o($Vw1, [2, 352]), {
      218: [1, 523]
    }, {
      20: [2, 150]
    }, {
      20: [2, 152]
    }, {
      18: [1, 524]
    }, {
      20: [2, 262]
    }, {
      20: [1, 525]
    }, o($Vh1, [2, 246]), {
      20: [2, 250],
      21: $V9,
      24: 66,
      48: $Vl,
      122: 433,
      237: 526,
      238: $Va,
      239: 504,
      241: $Vb,
      250: $Vc
    }, {
      7: [2, 258]
    }, {
      20: [2, 243]
    }, o($Vz1, [2, 363]), {
      21: $V9,
      24: 66,
      48: $Vl,
      122: 527,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      140: 528,
      141: 529,
      144: 233,
      145: $VU,
      152: $VT
    }, o($Vo1, [2, 249]), {
      20: [2, 251]
    }, {
      7: [2, 229]
    }, {
      20: [1, 530]
    }, {
      142: 531,
      150: 532,
      151: 533,
      152: $VB1
    }, o([20, 21, 238, 241, 250], [2, 153]), {
      20: [2, 193],
      143: 535,
      182: 536,
      185: $VC1
    }, o($VD1, [2, 174], {
      150: 532,
      151: 533,
      142: 538,
      152: $VB1
    }), o($VE1, [2, 176]), {
      153: [1, 539]
    }, {
      20: [2, 154]
    }, {
      7: [1, 540],
      183: [1, 541]
    }, {
      17: $VK,
      53: $VL,
      101: 200,
      135: 205,
      136: 206,
      169: $VM,
      186: 542,
      247: $VN,
      248: $VO,
      249: $VP,
      256: $VQ,
      261: $VR
    }, o($VD1, [2, 175]), {
      21: $V9,
      24: 543,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      20: [2, 194]
    }, {
      7: [1, 544]
    }, o([7, 183], [2, 196]), {
      154: [1, 545]
    }, {
      18: [1, 546]
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      52: $Vp1,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      155: [1, 547],
      159: 548,
      169: $VM,
      175: 399,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR,
      269: 396,
      270: 397,
      272: 401,
      274: 400,
      277: $Vq1
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      52: $Vp1,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      159: 550,
      169: $VM,
      175: 399,
      184: 549,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR,
      269: 396,
      270: 397,
      272: 401,
      274: 400,
      277: $Vq1
    }, {
      7: [1, 551]
    }, {
      7: [1, 552]
    }, {
      20: [1, 553]
    }, {
      181: [1, 554]
    }, {
      18: [1, 555]
    }, o($VE1, [2, 179]), {
      20: [2, 195]
    }, {
      17: $VK,
      53: $VL,
      101: 200,
      135: 205,
      136: 206,
      169: $VM,
      186: 556,
      247: $VN,
      248: $VO,
      249: $VP,
      256: $VQ,
      261: $VR
    }, {
      17: $VK,
      21: $V9,
      24: 66,
      48: $Vl,
      52: $Vp1,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      156: 557,
      159: 559,
      169: $VM,
      175: 399,
      176: 558,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR,
      269: 396,
      270: 397,
      272: 401,
      274: 400,
      277: $Vq1
    }, {
      7: [1, 560]
    }, {
      20: [1, 561],
      157: [1, 562]
    }, {
      7: [1, 563]
    }, {
      181: [1, 564]
    }, {
      17: $VK,
      20: [2, 197],
      21: $V9,
      24: 66,
      48: $Vl,
      52: $Vp1,
      53: $VL,
      101: 200,
      122: 256,
      123: 257,
      135: 205,
      136: 206,
      159: 550,
      169: $VM,
      175: 399,
      184: 565,
      186: 198,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      255: 255,
      256: $VQ,
      257: 199,
      261: $VR,
      269: 396,
      270: 397,
      272: 401,
      274: 400,
      277: $Vq1
    }, o($VE1, [2, 177]), {
      17: $VK,
      53: $VL,
      101: 200,
      135: 205,
      136: 206,
      158: 566,
      169: $VM,
      182: 568,
      185: $VC1,
      186: 567,
      247: $VN,
      248: $VO,
      249: $VP,
      256: $VQ,
      261: $VR,
      273: 569,
      275: $VF1
    }, o($VG1, [2, 185], {
      24: 66,
      186: 198,
      257: 199,
      101: 200,
      135: 205,
      136: 206,
      255: 255,
      122: 256,
      123: 257,
      269: 396,
      270: 397,
      175: 399,
      274: 400,
      272: 401,
      176: 558,
      159: 559,
      156: 571,
      17: $VK,
      21: $V9,
      48: $Vl,
      52: $Vp1,
      53: $VL,
      169: $VM,
      238: $Va,
      241: $Vb,
      247: $VN,
      248: $VO,
      249: $VP,
      250: $Vc,
      256: $VQ,
      261: $VR,
      277: $Vq1
    }), {
      17: $VK,
      53: $VL,
      101: 200,
      135: 205,
      136: 206,
      158: 572,
      169: $VM,
      182: 568,
      185: $VC1,
      186: 567,
      247: $VN,
      248: $VO,
      249: $VP,
      256: $VQ,
      261: $VR,
      273: 569,
      275: $VF1
    }, {
      20: [2, 198]
    }, {
      7: [1, 573]
    }, {
      7: [2, 331]
    }, {
      7: [2, 332]
    }, {
      7: [2, 333]
    }, {
      2: [1, 574]
    }, o($VG1, [2, 186]), {
      7: [2, 192]
    }, {
      20: [1, 575]
    }, {
      7: [2, 344],
      52: [1, 576]
    }, o($VE1, [2, 178]), {
      17: [1, 577],
      21: $V9,
      24: 578,
      238: $Va,
      241: $Vb,
      250: $Vc
    }, {
      54: [1, 579]
    }, {
      54: [1, 580],
      56: [1, 581]
    }, {
      7: [2, 345]
    }, {
      7: [2, 346]
    }, {
      17: [1, 582]
    }, {
      54: [1, 583]
    }, {
      7: [2, 347]
    }],
    defaultActions: {
      2: [2, 1],
      3: [2, 2],
      23: [2, 3],
      24: [2, 6],
      25: [2, 7],
      69: [2, 72],
      74: [2, 21],
      75: [2, 65],
      112: [2, 204],
      157: [2, 205],
      160: [2, 18],
      161: [2, 68],
      173: [2, 324],
      183: [2, 214],
      184: [2, 216],
      192: [2, 202],
      240: [2, 315],
      263: [2, 326],
      270: [2, 95],
      278: [2, 287],
      294: [2, 235],
      296: [2, 225],
      306: [2, 305],
      311: [2, 311],
      325: [2, 122],
      344: [2, 288],
      345: [2, 319],
      362: [2, 317],
      370: [2, 74],
      371: [2, 88],
      386: [2, 92],
      388: [2, 220],
      390: [2, 219],
      405: [2, 161],
      412: [2, 307],
      413: [2, 313],
      420: [2, 138],
      425: [2, 321],
      426: [2, 222],
      455: [2, 227],
      456: [2, 228],
      465: [2, 231],
      472: [2, 256],
      492: [2, 160],
      497: [2, 147],
      513: [2, 150],
      514: [2, 152],
      516: [2, 262],
      520: [2, 258],
      521: [2, 243],
      526: [2, 251],
      527: [2, 229],
      535: [2, 154],
      540: [2, 194],
      553: [2, 195],
      565: [2, 198],
      567: [2, 331],
      568: [2, 332],
      569: [2, 333],
      572: [2, 192],
      579: [2, 345],
      580: [2, 346],
      583: [2, 347]
    },
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

      var args = lstack.slice.call(arguments, 1);

      //this.reductionCount = this.shiftCount = 0;

      var lexer = Object.create(this.lexer);
      var sharedState = {
        yy: {}
      };
      // copy state
      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }

      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;
      if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
      }
      var yyloc = lexer.yylloc;
      lstack.push(yyloc);

      var ranges = lexer.options && lexer.options.ranges;

      if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }

      function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
      }

      _token_stack:
        var lex = function () {
          var token;
          token = lexer.lex() || EOF;
          // if token isn't its numeric value, convert
          if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
          }
          return token;
        }

      var symbol, preErrorSymbol, state, action, a, r, yyval = {},
        p, len, newState, expected;
      while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == 'undefined') {
            symbol = lex();
          }
          // read action for current state and first input
          action = table[state] && table[state][symbol];
        }

        _handle_error:
          // handle parse error
          if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
              var stack_probe = stack.length - 1;
              var depth = 0;

              // try to recover from error
              for (;;) {
                // check for error recovery rule in this state
                if ((TERROR.toString()) in table[state]) {
                  return depth;
                }
                if (state === 0 || stack_probe < 2) {
                  return false; // No suitable error recovery rule available.
                }
                stack_probe -= 2; // popStack(1): [symbol, action]
                state = stack[stack_probe];
                ++depth;
              }
            }

            if (!recovering) {
              // first see if there's any chance at hitting an error recovery rule:
              error_rule_depth = locateNearestErrorRecoveryRule(state);

              // Report error
              expected = [];
              for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                  expected.push("'" + this.terminals_[p] + "'");
                }
              }
              if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
              } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " +
                  (symbol == EOF ? "end of input" :
                    ("'" + (this.terminals_[symbol] || symbol) + "'"));
              }
              this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected,
                recoverable: (error_rule_depth !== false)
              });
            } else if (preErrorSymbol !== EOF) {
              error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
              if (symbol === EOF || preErrorSymbol === EOF) {
                throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
              }

              // discard current lookahead and grab another
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
              symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
              throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR; // insert generic error symbol as new lookahead
            state = stack[stack.length - 1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
          }

          // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }

        switch (action[0]) {
        case 1: // shift
          //this.shiftCount++;

          stack.push(symbol);
          vstack.push(lexer.yytext);
          lstack.push(lexer.yylloc);
          stack.push(action[1]); // push state
          symbol = null;
          if (!preErrorSymbol) { // normal execution/no error
            yyleng = lexer.yyleng;
            yytext = lexer.yytext;
            yylineno = lexer.yylineno;
            yyloc = lexer.yylloc;
            if (recovering > 0) {
              recovering--;
            }
          } else {
            // error just occurred, resume old lookahead f/ before error
            symbol = preErrorSymbol;
            preErrorSymbol = null;
          }
          break;

        case 2:
          // reduce
          //this.reductionCount++;

          len = this.productions_[action[1]][1];

          // perform semantic action
          yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
          // default location, uses first token for firsts, last for lasts
          yyval._$ = {
            first_line: lstack[lstack.length - (len || 1)].first_line,
            last_line: lstack[lstack.length - 1].last_line,
            first_column: lstack[lstack.length - (len || 1)].first_column,
            last_column: lstack[lstack.length - 1].last_column
          };
          if (ranges) {
            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
          }
          r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

          if (typeof r !== 'undefined') {
            return r;
          }

          // pop off stack
          if (len) {
            stack = stack.slice(0, -1 * len * 2);
            vstack = vstack.slice(0, -1 * len);
            lstack = lstack.slice(0, -1 * len);
          }

          stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)
          vstack.push(yyval.$);
          lstack.push(yyval._$);
          // goto new state = table[STATE][NONTERMINAL]
          newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
          stack.push(newState);
          break;

        case 3:
          // accept
          return true;
        }

      }

      return true;
    }
  };

  function ParserState() {
    this.indents = [0];
    this.indent = 0;
    this.dedents = 0;
    this.eof = false;
    this.comment = false;
    this.brackets = [];
    this.parsed = {};
    this.stateStack = [];
  }

  ParserState.prototype = {
    get hasBrackets() {
      return this.brackets.length > 0;
    },

    get lastIndent() {
      return this.indents[this.indents.length - 1]
    },

    get hasIndent() {
      return this.indents.length > 0;
    },

    doIndent() {
      this.indents.push(this.indent);
    },

    doDedent() {
      this.dedents = 0;

      while (this.indents.length) {
        this.dedents++;
        this.indents.pop();
        if (this.lastIndent == this.indent) break;
      }
    },

    dedentAll() {
      this.indent = 0;
      this.dedents = this.indents.length - 1;
      this.indents = [0];
    },

    enterObject() {
      this.stateStack.push('object');
    },

    exitObject() {
      let current = this.stateStack.pop();
      if (current !== 'object') {
        throw new Error('Unmatched object bracket!');
      }
    },

    enterArray() {
      this.stateStack.push('array');
    },

    exitArray() {
      let current = this.stateStack.pop();
      if (current !== 'array') {
        throw new Error('Unmatched array bracket!');
      }
    },

    isTypeExist(type) {
      return this.parsed.type && (type in this.parsed.type);
    },

    use(namespace) {
      if (!this.parsed.namespace) {
        this.parsed.namespace = [];
      }

      this.parsed.namespace.push(namespace);
    },

    defType(type, def) {
      if (!this.parsed.type) {
        this.parsed.type = {};
      }

      this.parsed.type[type] = def;
    },

    isEntityExist(entity) {
      return this.parsed.entity && (entity in this.parsed.entity);
    },

    defEntity(entity, def) {
      if (!this.parsed.entity) {
        this.parsed.entity = {};
      }
      this.parsed.entity[entity] = Object.assign({}, this.parsed.entity[entity], def);
    },

    defRelation(relation) {
      if (!this.parsed.relation) {
        this.parsed.relation = [];
      }

      if (Object.prototype.toString.call(relation) === '[object Array]') {
        this.parsed.relation = this.parsed.relation.concat(relation);
      } else {
        this.parsed.relation.push(relation);
      }
    },

    defSchema(schema, def) {
      this.parsed.schema = Object.assign({}, {
        name: schema
      }, def);
    },

    defView(viewName, def) {
      if (!this.parsed.view) {
        this.parsed.view = {};
      }
      this.parsed.view[viewName] = Object.assign({}, this.parsed.view[viewName], def);
    },

    defDocument(docName, def) {
      if (!this.parsed.document) {
        this.parsed.document = {};
      }
      this.parsed.document[docName] = Object.assign({}, this.parsed.document[docName], def);
    },

    validate() {
      var errors = [];

      //add validations here

      if (errors.length > 0) {
        throw new Error(errors.join("\n"));
      }

      return this;
    },

    build() {
      return this.parsed;
    }
  };

  var UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

  function parseSize(size) {
    if (UNITS.has(size.substr(-1))) {
      let unit = size.substr(-1);
      let factor = UNITS[unit];

      size = size.substr(0, size.length - 1);

      return parseInt(size) * factor;
    } else {
      return parseInt(size);
    }
  }

  function unquoteString(str, quotes) {
    return str.substr(quotes, str.length - quotes * 2);
  }

  function normalizeIdentifier(id) {
    return id[0] === '`' ? id.substr(1, id.length - 2) : id;
  }

  function normalizeDotName(name) {
    return name.split('.').map(n => normalizeIdentifier(n.trim())).join('.');
  }

  function normalizeReference(ref) {
    return {
      oolType: 'ObjectReference',
      name: ref.substr(1)
    };
  }

  var KEYWORDS = new Set([
        "not", "and", "or", "xor", "mod", "div", "in", "is", "like", //operators
        'int', 'integer', 'number', 'text', 'bool', 'boolean', 'blob', 'binary', 'datetime', 'date', 'time', 'year', 'timestamp', 'json', 'xml', 'enum', 'csv',
        'exact', 'unsigned', "only", "fixedLength",
        "import", "type", "entity", "schema", "database", "relation", "default", "auto", "entities", "data",
        "with", "has", "have", "key", "index", "as", "unique", "for",
        "every", "may", "a", "several", "many", "great", "of", "one", "to", "an",
        "optional", "readOnly", "fixedValue", "forceUpdate",
        "interface", "accept", "do", "select", "where", "return", "exists", "null", "otherwise", "unless", "find", "by", "case",
        "skip", "limit", "update", "create", "delete", "set", "throw", "error",
        "view", "order", "list", "asc", "desc", "views", "group", "skip",
        "document", "contains", "being", "which"
    ]);

  var BRACKET_PAIRS = {
    '}': '{',
    ']': '[',
    ')': '('
  };

  var DB_TYPES = new Set([
        "mysql", "mongodb"
    ]);

  var BUILTIN_TYPES = new Set(['int', 'float', 'decimal', 'text', 'bool', 'binary', 'datetime', 'json', 'xml', 'enum', 'csv']);
  var OOL_TYPE_KEYWORDS = new Set(['int', 'integer', 'number', 'text', 'bool', 'boolean', 'blob', 'binary',
        'datetime', 'date', 'time', 'timestamp', 'json', 'xml', 'enum', 'csv']);

  var BUILTIN_TYPE_ATTR = [
        'type',
        'digits',
        'range',
        'values',
        'unsigned',
        'totalDigits',
        'maxLength',
        'fixedLength'
    ];

  if (typeof exports !== 'undefined') {
    exports.BUILTIN_TYPES = BUILTIN_TYPES;
    exports.OOL_TYPE_KEYWORDS = OOL_TYPE_KEYWORDS;
    exports.BUILTIN_TYPE_ATTR = BUILTIN_TYPE_ATTR;
    exports.KEYWORDS = KEYWORDS;
  }

  var state;
  /* generated by jison-lex 0.3.4 */
  var lexer = (function () {
    var lexer = ({

      EOF: 1,

      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },

      // resets the lexer, sets new input
      setInput: function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0
        };
        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
      },

      // consumes and returns one char from the input
      input: function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }
        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },

      // unshifts one char (or a string) into the input
      unput: function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
            (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
      },

      // When called from action, caches matched text and appends it on next action
      more: function () {
        this._more = true;
        return this;
      },

      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function () {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });

        }
        return this;
      },

      // retain first n characters of the match
      less: function (n) {
        this.unput(this.match.slice(n));
      },

      // displays already matched input, i.e. for error messages
      pastInput: function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
      },

      // displays upcoming input, i.e. for error messages
      upcomingInput: function () {
        var next = this.match;
        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }
        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
      },

      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
      },

      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function (match, indexed_rule) {
        var token,
          lines,
          backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done
          };
          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno += lines.length;
        }
        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines ?
            lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
          this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
          this.done = false;
        }
        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }
          return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
      },

      // return next match in input
      next: function () {
        if (this.done) {
          return this.EOF;
        }
        if (!this._input) {
          this.done = true;
        }

        var token,
          match,
          tempMatch,
          index;
        if (!this._more) {
          this.yytext = '';
          this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);
          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;
            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);
              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }
        if (match) {
          token = this.test_match(match, rules[index]);
          if (token !== false) {
            return token;
          }
          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
          return false;
        }
        if (this._input === "") {
          return this.EOF;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });
        }
      },

      // return next match that has a token
      lex: function lex() {
        var r = this.next();
        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },

      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },

      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },

      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
          return this.conditions["INITIAL"].rules;
        }
      },

      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return "INITIAL";
        }
      },

      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },

      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: {},
      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
        case 0:
          return 5;
          break;
        case 1: //start the program
          this.unput(yy_.yytext);
          this.begin('EMPTY');

          state = new ParserState();

          break;
        case 2:
          if (this.topState(0) === 'INLINE' && !state.comment && !state.eof) {
            this.unput(' ');

            state.eof = true;
            this.begin('EMPTY');
            return 7;

          } else if (state.indents.length > 1) {
            //reach end-of-file, but a current block still not in ending state

            //put back the eof
            this.unput(' ');

            //dedent all
            state.dedentAll();
            state.eof = true;
            this.begin('DEDENTS');

          } else {
            this.begin('INITIAL');
            return 5;
          }

          break;
        case 3:
          state.indent++;
          break;
        case 4:
          state.indent = (state.indent + 8) & -7;
          break;
        case 5:
          state.indent = 0;
          if (state.comment) state.comment = false;
          break;
        case 6:
          state.comment = true;
          break;
        case 7:
          this.unput(yy_.yytext)
            //compare the current indents with the last
          var last = state.lastIndent;
          if (state.indent > last) {
            //new indent
            state.doIndent();
            this.begin('INLINE');
            return 18;

          } else if (state.indent < last) {
            //dedent
            state.doDedent();
            if (!state.hasIndent) {
              throw new Error("Inconsistent indentation.");
            }
            this.begin('DEDENTS');

          } else {
            //same indent
            this.begin('INLINE');
          }

          break;
        case 8:
          if (state.dedents-- > 0) {
            this.unput(yy_.yytext);
            return 20;

          } else if (state.eof) {
            this.popState();

          } else {
            this.unput(yy_.yytext);
            this.begin('INLINE');
          }

          break;
        case 9:
          yy_.yytext = unquoteString(yy_.yytext, 3);
          return 17;

          break;
        case 10:
          yy_.yytext = unquoteString(yy_.yytext, 1);
          return 17;

          break;
        case 11:
          // implicit line joining
          if (!state.hasBrackets) {
            state.indent = 0;
            this.begin('EMPTY');

            if (state.comment) {
              state.comment = false;
            }

            return 7;
          }

          break;
        case 12:
          /* skip whitespace, separate tokens */
          break;
        case 13:
          if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
            state.brackets.push(yy_.yytext);
          } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
            var paired = BRACKET_PAIRS[yy_.yytext];
            var lastBracket = state.brackets.pop();
            if (paired !== lastBracket) {
              throw new Error("Inconsistent bracket.")
            }
          }
          return yy_.yytext;

          break;
        case 14:
          return 249;
          break;
        case 15:
          yy_.yytext = parseFloat(yy_.yytext);
          return 247;

          break;
        case 16:
          yy_.yytext = parseSize(yy_.yytext);
          return 53;

          break;
        case 17:
          yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
          return 55;

          break;
        case 18:
          yy_.yytext = parseInt(yy_.yytext);
          return 53;

          break;
        case 19:
          yy_.yytext = normalizeDotName(yy_.yytext);
          return 48;

          break;
        case 20:
          yy_.yytext = normalizeReference(yy_.yytext);
          return 256;

          break;
        case 21:
          return 292;

          break;
        case 22:
          yy_.yytext = (yy_.yytext === 'true');
          return 248;

          break;
        case 23:
          return yy_.yytext;
          break;
        case 24:
          if (KEYWORDS.has(yy_.yytext)) {
            if (state.brackets.indexOf('{') !== -1) {
              return 250;
            }

            return yy_.yytext;
          }

          yy_.yytext = normalizeIdentifier(yy_.yytext);
          return 250;

          break;
        }
      },
      rules: [/^(?:$)/, /^(?:.|\n)/, /^(?:$)/, /^(?: )/, /^(?:\t)/, /^(?:\n)/, /^(?:#.*)/, /^(?:.)/, /^(?:.|$)/, /^(?:(("""(([^\\])|(\\.))*""")|('''(([^\\])|(\\.))*''')))/, /^(?:(("(([^\\\n\"])|(\\.))*")|('(([^\\\n\'])|(\\.))*')))/, /^(?:(\n|\r\n|\r|\f))/, /^(?:( |\t)+)/, /^(?:(\(|\)|\[|\]|\{|\}))/, /^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y\b)*))/, /^(?:(((([0-9])+|((([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((([0-9])*(\.([0-9])+))|(([0-9])+\.))))/, /^(?:(((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/, /^(?:(((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/, /^(?:((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/, /^(?:(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`))(\.((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))+))/, /^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`))(\.((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))+)|((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))))/, /^(?:(((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`))(\.((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))+)|((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))\.\*))/, /^(?:((true)|(false)))/, /^(?:((~|,|:|\||--|->|=>|<->|<-)|(!=|>=|<=|>|<|=)|(\+|-|\*|\/)))/, /^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))/],
      conditions: {
        "INITIAL": {
          "rules": [0, 1],
          "inclusive": true
        },
        "EMPTY": {
          "rules": [2, 3, 4, 5, 6, 7],
          "inclusive": true
        },
        "DEDENTS": {
          "rules": [8],
          "inclusive": true
        },
        "INLINE": {
          "rules": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],
          "inclusive": true
        }
      }
    });
    return lexer;
  })();
  parser.lexer = lexer;

  function Parser() {
    this.yy = {};
  }
  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = oolong;
  exports.Parser = oolong.Parser;
  exports.parse = function () {
    return oolong.parse.apply(oolong, arguments);
  };
  exports.main = function commonjsMain(args) {
    if (!args[1]) {
      console.log('Usage: ' + args[0] + ' FILE');
      process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
  };
  if (typeof module !== 'undefined' && require.main === module) {
    exports.main(process.argv.slice(1));
  }
}