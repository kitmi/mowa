'use strict';const EventEmitter=require('events'),inflection=require('inflection'),path=require('path'),Util=require('../../../util.js'),_=Util._,fs=Util.fs,Oolong=require('../../lang/oolong.js'),OolUtil=require('../../lang/ool-utils.js'),OolongDbModeler=require('../db.js'),Entity=require('../../lang/entity.js');let MysqlModeler=class MysqlModeler extends OolongDbModeler{constructor(context,dbmsOptions){super(context);this._events=new EventEmitter;this._dbmsOptions={dbOptions:_.reduce(dbmsOptions.dbOptions,function(result,value,key){result[_.upperCase(key)]=value;return result},{}),tableOptions:_.reduce(dbmsOptions.tableOptions,function(result,value,key){result[_.upperCase(key)]=value;return result},{})};this._references={}}modeling(schema,buildPath){super.modeling(schema,buildPath);let modelingSchema=schema.clone();if(modelingSchema.relations){this.logger.log('debug','Building relations...');_.each(modelingSchema.relations,relation=>{this._buildRelation(modelingSchema,relation)})}this._events.emit('afterRelationshipBuilding');let sqlFilesDir=path.join('mysql',schema.name),dbFilePath=path.join(sqlFilesDir,'entities.sql'),fkFilePath=path.join(sqlFilesDir,'relations.sql'),tableSQL='',relationSQL='';_.each(modelingSchema.entities,(entity,entityName)=>{let result=MysqlModeler.complianceCheck(entity);if(result.errors.length){let message='';if(0<result.warnings.length){message+='Warnings: \n'+result.warnings.join('\n')+'\n'}message+=result.errors.join('\n');throw new Error(message)}if(entity.features){_.forOwn(entity.features,(f,featureName)=>{if(Array.isArray(f)){f.forEach(ff=>this._featureReducer(entity,featureName,ff))}else{this._featureReducer(entity,featureName,f)}})}_.forOwn(this._references,(refs,entityName)=>{_.each(refs,ref=>{relationSQL+=MysqlModeler.addForeignKeyStatement(entityName,schema.entities[entityName],ref)+'\n'})});tableSQL+=this._createTableStatement(entityName,entity)+'\n'});this._writeFile(path.join(buildPath,dbFilePath),tableSQL);this._writeFile(path.join(buildPath,fkFilePath),relationSQL);return modelingSchema}async extract(dbService,extractedOolPath){await super.extract(dbService,extractedOolPath);fs.ensureDirSync(extractedOolPath);let conn=await dbService.getConnection(),[tables]=await conn.query('select * from information_schema.tables where table_schema = ?',[dbService.physicalDbName]),entities=[],oolcodegen=require('../../lang/oolcodegen'),entitiesOolPath=path.join(extractedOolPath,'entities');fs.ensureDirSync(entitiesOolPath);await Util.eachAsync_(tables,async table=>{entities.push({entity:table.TABLE_NAME});await this.extractTableDetails(dbService,conn,table,oolcodegen,entitiesOolPath)});let json={'namespace':['entities/**'],'schema':{'entities':entities,'name':dbService.physicalDbName}},schemaContent=oolcodegen.generate(json),schemaFile=path.join(extractedOolPath,dbService.physicalDbName+'.ool');fs.writeFileSync(schemaFile,schemaContent);this.logger.log('info',`Extracted schema entry file "${schemaFile}".`);dbService.closeConnection(conn)}async extractTableDetails(dbService,conn,table,oolcodegen,extractedOolPath){let[columns]=await conn.query('select * from information_schema.columns where table_schema = ? and table_name = ?',[dbService.physicalDbName,table.TABLE_NAME]),features=[],fields={},indexes=[],types={},key;columns.forEach(col=>{if('auto_increment'===col.EXTRA){let featureInfo={'name':'autoId','options':{'startFrom':table.AUTO_INCREMENT}};if('id'!==col.COLUMN_NAME){featureInfo.options.name=col.COLUMN_NAME}features.push(featureInfo);return}if('CURRENT_TIMESTAMP'===col.COLUMN_DEFAULT){let featureInfo={'name':'createTimestamp'};features.push(featureInfo);return}if('on update CURRENT_TIMESTAMP'===col.EXTRA){let featureInfo={'name':'updateTimestamp'};features.push(featureInfo);return}if('isDeleted'===col.COLUMN_NAME&&'tinyint(1)'===col.COLUMN_TYPE){let featureInfo={'name':'logicalDeletion'};features.push(featureInfo);return}let fieldInfo=this._mysqlTypeToOolType(table,col,types);if('YES'===col.IS_NULLABLE){fieldInfo.optional=true}if(col.COLUMN_DEFAULT){fieldInfo.default=col.COLUMN_DEFAULT}fields[col.COLUMN_NAME]=fieldInfo;if('UNI'===col.COLUMN_KEY){indexes.push({fields:col.COLUMN_NAME,unique:true})}});let[indexInfo]=await conn.query('SHOW INDEXES FROM ??',[table.TABLE_NAME]),fk={};indexInfo.forEach(i=>{if('PRIMARY'===i.Key_name){key=i.Column_name}else{fk[i.Column_name]={keyName:i.Key_name,fieldName:i.Column_name,unique:0===i.Non_unique}}});let[referencesInfo]=await conn.query('SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE `REFERENCED_TABLE_SCHEMA` = ? AND `TABLE_NAME` = ? AND `REFERENCED_TABLE_NAME` IS NOT NULL',[dbService.physicalDbName,table.TABLE_NAME]),l=referencesInfo.length;for(let i=0;i<l;i++){let ref=referencesInfo[i],[[refTableKey]]=await conn.query('SHOW INDEXES FROM ?? WHERE `Key_name` = \'PRIMARY\'',[ref.REFERENCED_TABLE_NAME]);if(refTableKey.Column_name!==ref.REFERENCED_COLUMN_NAME){throw new Error('To be implemented.')}if(fk[ref.COLUMN_NAME].unique){fields[ref.COLUMN_NAME]={bindTo:ref.REFERENCED_TABLE_NAME+'.'+ref.REFERENCED_TABLE_NAME}}else{fields[ref.COLUMN_NAME]={belongTo:ref.REFERENCED_TABLE_NAME+'.'+ref.REFERENCED_TABLE_NAME}}}let entity={type:types,entity:{[table.TABLE_NAME]:{features,fields,key,indexes}}},entityContent=oolcodegen.generate(entity),entityFile=path.join(extractedOolPath,table.TABLE_NAME+'.ool');fs.writeFileSync(entityFile,entityContent);this.logger.log('info',`Extracted entity definition file "${entityFile}".`)}_mysqlTypeToOolType(table,col,types){let typeInfo={};switch(col.DATA_TYPE){case'varchar':typeInfo.type='text';if(col.CHARACTER_MAXIMUM_LENGTH){typeInfo.maxLength=col.CHARACTER_MAXIMUM_LENGTH}break;case'char':typeInfo.type='text';if(col.CHARACTER_MAXIMUM_LENGTH){typeInfo.fixedLength=col.CHARACTER_MAXIMUM_LENGTH}break;case'int':typeInfo.type='int';break;case'tinyint':if('tinyint(1)'===col.COLUMN_TYPE){typeInfo.type='bool'}else{typeInfo.type='int'}break;case'enum':let left=col.COLUMN_TYPE.indexOf('('),right=col.COLUMN_TYPE.lastIndexOf(')'),typeName=table.TABLE_NAME+_.upperFirst(col.COLUMN_NAME);types[typeName]={type:'enum',values:col.COLUMN_TYPE.substring(left+1,right).split(',').map(v=>v.substr(1,v.length-2))};typeInfo.type=typeName;break;case'text':typeInfo.type='text';typeInfo.maxLength=col.CHARACTER_MAXIMUM_LENGTH;break;case'datetime':case'timestamp':typeInfo.type='datetime';break;case'decimal':typeInfo.type='decimal';typeInfo.totalDigits=col.NUMERIC_PRECISION;typeInfo.decimalDigits=col.NUMERIC_SCALE;break;case'float':typeInfo.type='float';typeInfo.totalDigits=col.NUMERIC_PRECISION;typeInfo.decimalDigits=col.NUMERIC_SCALE;break;default:console.log(col);throw new Error('To be implemented.');}return typeInfo}_addReference(left,leftField,right,rightField){let refs4LeftEntity=this._references[left];if(!refs4LeftEntity){refs4LeftEntity=[];this._references[left]=refs4LeftEntity}let found=_.find(refs4LeftEntity,item=>item.leftField===leftField&&item.right===right&&item.rightField===rightField);if(found){throw new Error(`The same reference already exist! From [${left}.${leftField}] to [${right}.${rightField}].`)}refs4LeftEntity.push({leftField,right,rightField});return this}_getReferenceOfField(left,leftField){let refs4LeftEntity=this._references[left];if(!refs4LeftEntity){return undefined}let reference=_.find(refs4LeftEntity,item=>item.leftField===leftField);if(!reference){return undefined}return reference}_hasReferenceOfField(left,leftField){let refs4LeftEntity=this._references[left];if(!refs4LeftEntity)return false;return undefined!==_.find(refs4LeftEntity,item=>item.leftField===leftField)}_getReferenceBetween(left,right){let refs4LeftEntity=this._references[left];if(!refs4LeftEntity){return undefined}let reference=_.find(refs4LeftEntity,item=>item.right===right);if(!reference){return undefined}return reference}_hasReferenceBetween(left,right){let refs4LeftEntity=this._references[left];if(!refs4LeftEntity)return false;return undefined!==_.find(refs4LeftEntity,item=>item.right===right)}_featureReducer(entity,featureName,feature){let field;switch(featureName){case'autoId':field=entity.fields[feature.field];if('int'===field.type){field.autoIncrementId=true;if('startFrom'in field){this._events.on('setTableOptions:'+entity.name,extraOpts=>{extraOpts['AUTO_INCREMENT']=field.startFrom})}}break;case'createTimestamp':field=entity.fields[feature.field];field.isCreateTimestamp=true;break;case'updateTimestamp':field=entity.fields[feature.field];field.isUpdateTimestamp=true;break;case'logicalDeletion':break;case'atLeastOneNotNull':break;case'validateAllFieldsOnCreation':break;case'stateTracking':break;default:throw new Error('Unsupported feature "'+featureName+'".');}}_buildRelation(schema,relation){this.logger.log('debug','Analyzing relation between ['+relation.left+'] and ['+relation.right+'] relationship: '+relation.relationship+' ...');if('n:n'===relation.relationship){this._buildNToNRelation(schema,relation)}else if('1:n'===relation.relationship){this._buildOneToAnyRelation(schema,relation,false)}else if('1:1'===relation.relationship){this._buildOneToAnyRelation(schema,relation,true)}else if('n:1'===relation.relationship){this._buildManyToOneRelation(schema,relation)}else{console.log(relation);throw new Error('TBD')}}_buildManyToOneRelation(schema,relation){let leftEntity=schema.entities[relation.left],rightEntity=schema.entities[relation.right],rightKeyInfo=rightEntity.getKeyField(),leftField=relation.leftField||MysqlModeler.foreignKeyFieldNaming(relation.right,rightEntity);leftEntity.addField(leftField,rightKeyInfo);this._addReference(relation.left,leftField,relation.right,rightEntity.key)}_buildOneToAnyRelation(schema,relation,unique){let leftEntity=schema.entities[relation.left],rightEntity=schema.entities[relation.right],rightKeyInfo=rightEntity.getKeyField(),leftField=MysqlModeler.foreignKeyFieldNaming(relation.right,rightEntity);leftEntity.addField(leftField,rightKeyInfo);this._addReference(relation.left,leftField,relation.right,rightEntity.key);if(relation.multi&&_.last(relation.multi)===relation.right){this._events.on('afterRelationshipBuilding',()=>{let index={fields:_.map(relation.multi,to=>MysqlModeler.foreignKeyFieldNaming(to,schema.entities[to])),unique:unique};leftEntity.addIndex(index)})}}_buildNToNRelation(schema,relation){let relationEntityName=relation.left+inflection.camelize(inflection.pluralize(relation.right));if(schema.hasEntity(relationEntityName)){let fullName=schema.entities[relationEntityName].id;throw new Error(`Entity [${relationEntityName}] conflicts with entity [${fullName}] in schema [${schema.name}].`)}this.logger.log('debug',`Create a relation entity for "${relation.left}" and "${relation.right}".`);let leftEntity=schema.entities[relation.left],rightEntity=schema.entities[relation.right],leftKeyInfo=leftEntity.getKeyField(),rightKeyInfo=rightEntity.getKeyField();if(Array.isArray(leftKeyInfo)||Array.isArray(rightKeyInfo)){throw new Error('Multi-fields key not supported for non-relationship entity.')}let leftField1=MysqlModeler.foreignKeyFieldNaming(relation.left,leftEntity),leftField2=MysqlModeler.foreignKeyFieldNaming(relation.right,rightEntity),entityInfo={features:['createTimestamp'],fields:{[leftField1]:leftKeyInfo,[leftField2]:rightKeyInfo},key:[leftField1,leftField2]},entity=new Entity(this.linker,relationEntityName,schema.oolModule,entityInfo);entity.link();entity.markAsRelationshipEntity();this._addReference(relationEntityName,leftField1,relation.left,leftEntity.key);this._addReference(relationEntityName,leftField2,relation.right,rightEntity.key);schema.addEntity(relationEntityName,entity)}_createTableStatement(entityName,entity){let sql='CREATE TABLE IF NOT EXISTS `'+entityName+'` (\n';_.each(entity.fields,(field,name)=>{sql+='  '+MysqlModeler.quoteIdentifier(name)+' '+MysqlModeler.columnDefinition(entity,field)+',\n'});sql+='  PRIMARY KEY ('+MysqlModeler.quoteListOrValue(entity.key)+'),\n';if(entity.indexes&&0<entity.indexes.length){entity.indexes.forEach(index=>{sql+='  ';if(index.unique){sql+='UNIQUE '}sql+='KEY ('+MysqlModeler.quoteListOrValue(index.fields)+'),\n'})}let lines=[];this._events.emit('beforeEndColumnDefinition:'+entityName,lines);if(0<lines.length){sql+='  '+lines.join(',\n  ')}else{sql=sql.substr(0,sql.length-2)}sql+='\n)';let extraProps={};this._events.emit('setTableOptions:'+entityName,extraProps);let props=Object.assign({},this._dbmsOptions.tableOptions,extraProps);sql=_.reduce(props,function(result,value,key){return result+' '+key+'='+value},sql);sql+=';\n';return sql}static addForeignKeyStatement(entityName,entity,relation){let sql='ALTER TABLE `'+entityName+'` ADD FOREIGN KEY (`'+relation.leftField+'`) REFERENCES `'+relation.right+'` (`'+relation.rightField+'`) ';sql+='';if(entity.isRelationshipEntity){sql+='ON DELETE CASCADE ON UPDATE CASCADE'}else{sql+='ON DELETE NO ACTION ON UPDATE NO ACTION'}sql+=';\n';return sql}static foreignKeyFieldNaming(entityName,entity){let leftPart=inflection.camelize(entityName,true),rightPart=inflection.camelize(entity.key);if(_.endsWith(leftPart,rightPart)){return leftPart}return leftPart+rightPart}static quoteString(str){return'\''+str.replace(/'/g,'\\\'')+'\''}static quoteIdentifier(str){return'`'+str+'`'}static quoteListOrValue(obj){return _.isArray(obj)?obj.map(v=>MysqlModeler.quoteIdentifier(v)).join(', '):MysqlModeler.quoteIdentifier(obj)}static complianceCheck(entity){let result={errors:[],warnings:[]};if(!entity.key){result.errors.push('Primary key is not specified.')}return result}static columnDefinition(entity,field){let sql;switch(field.type){case'int':sql=MysqlModeler.intColumnDefinition(field);break;case'float':case'decimal':sql=MysqlModeler.floatColumnDefinition(field);break;case'text':sql=MysqlModeler.textColumnDefinition(field);break;case'bool':sql=MysqlModeler.boolColumnDefinition(field);break;case'binary':sql=MysqlModeler.binaryColumnDefinition(field);break;case'datetime':sql=MysqlModeler.datetimeColumnDefinition(field);break;case'json':sql=MysqlModeler.textColumnDefinition(field);break;case'xml':sql=MysqlModeler.textColumnDefinition(field);break;case'enum':sql=MysqlModeler.enumColumnDefinition(field);break;case'csv':sql=MysqlModeler.textColumnDefinition(field);break;default:throw new Error('Unsupported type "'+field.type+'".');}sql+=this.columnNullable(field);sql+=this.defaultValue(field);return sql}static intColumnDefinition(info){let sql;if(info.digits){if(10<info.digits){sql='BIGINT'}else if(7<info.digits){sql='INT'}else if(4<info.digits){sql='MEDIUMINT'}else if(2<info.digits){sql='SMALLINT'}else{sql='TINYINT'}sql+=`(${info.digits})`}else{sql='INT'}if(info.unsigned){sql+=' UNSIGNED'}return sql}static floatColumnDefinition(info){let sql='';if('decimal'==info.type){sql='DECIMAL';if(65<info.totalDigits){throw new Error('Total digits exceed maximum limit.')}}else{if(23<info.totalDigits){sql='DOUBLE';if(53<info.totalDigits){throw new Error('Total digits exceed maximum limit.')}}else{sql='FLOAT'}}if('totalDigits'in info){sql+='('+info.totalDigits;if('decimalDigits'in info){sql+=', '+info.decimalDigits}sql+=')'}else{if('decimalDigits'in info){if(23<info.decimalDigits){sql+='(53, '+info.decimalDigits+')'}else{sql+='(23, '+info.decimalDigits+')'}}}return sql}static textColumnDefinition(info){let sql='';if(info.fixedLength&&255>=info.fixedLength){sql='CHAR('+info.fixedLength+')'}else if(info.maxLength){if(16777215<info.maxLength){sql='LONGTEXT'}else if(65535<info.maxLength){sql='MEDIUMTEXT'}else{sql='VARCHAR';if(info.fixedLength){sql+='('+info.fixedLength+')'}else{sql+='('+info.maxLength+')'}}}else{sql='TEXT'}return sql}static binaryColumnDefinition(info){let sql='';if(255>=info.fixedLength){sql='BINARY('+info.fixedLength+')'}else if(info.maxLength){if(16777215<info.maxLength){sql='LONGBLOB'}else if(65535<info.maxLength){sql='MEDIUMBLOB'}else{sql='VARBINARY';if(info.fixedLength){sql+='('+info.fixedLength+')'}else{sql+='('+info.maxLength+')'}}}else{sql='BLOB'}return sql}static boolColumnDefinition(){return'TINYINT(1)'}static datetimeColumnDefinition(info){let sql;if(!info.range||'datetime'===info.range){sql='DATETIME'}else if('date'===info.range){sql='DATE'}else if('time'===info.range){sql='TIME'}else if('year'===info.range){sql='YEAR'}else if('timestamp'===info.range){sql='TIMESTAMP'}return sql}static enumColumnDefinition(info){return'ENUM('+_.map(info.values,v=>MysqlModeler.quoteString(v)).join(', ')+')'}static columnNullable(info){if(info.hasOwnProperty('optional')&&info.optional){return' NULL'}return' NOT NULL'}static defaultValue(info){if(info.isCreateTimestamp){info.defaultByDb=true;return' DEFAULT CURRENT_TIMESTAMP'}if(info.autoIncrementId){info.defaultByDb=true;return' AUTO_INCREMENT'}let sql='';if(info.isUpdateTimestamp){sql+=' ON UPDATE CURRENT_TIMESTAMP';info.updateByDb=true}return sql}};module.exports=MysqlModeler;