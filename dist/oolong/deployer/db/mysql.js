'use strict';const Mowa=require('../../../server.js'),Util=Mowa.Util,_=Util._,fs=Util.fs,URL=require('url'),QS=require('querystring'),path=require('path'),OolongDbDeployer=require('../db.js');function checkInsertResult(logger,result){console.log(result)}let MysqlDeployer=class MysqlDeployer extends OolongDbDeployer{constructor(context,dbService){super(context,dbService)}deploy(reset){let dbScriptDir=path.join(this.appModule.backendPath,Mowa.Literal.DB_SCRIPTS_PATH,this.dbService.dbType,this.dbService.name),connStr=this.dbService.connectionString,connInfo=URL.parse(connStr),connOpts=QS.parse(connInfo.query),realDbName=connInfo.pathname.substr(1);connInfo.pathname='/';connOpts.multipleStatements=1;connInfo.query=QS.stringify(connOpts);this.dbService.connectionString=URL.format(connInfo);let dbConnection,entitiesSqlFile;return this.dbService.getConnection().then(db=>{dbConnection=db;if(reset){return dbConnection.query(`DROP DATABASE IF EXISTS ??; CREATE DATABASE ??`,[realDbName,realDbName])}return dbConnection.query(`CREATE DATABASE IF NOT EXISTS ??`,[realDbName])}).then(results=>{let[result,fields]=results;if(reset){if(0==result[0].warningStatus&&0<result[0].affectedRows){this.logger.log('info',`Dropped database "${realDbName}".`)}if(0==result[1].warningStatus&&1==result[1].affectedRows){this.logger.log('info',`Created database "${realDbName}".`)}}else{if(0==result.warningStatus){this.logger.log('info',`Created database "${realDbName}".`)}else{this.logger.log('warn',`Database "${realDbName}" exists.`)}}entitiesSqlFile=path.join(dbScriptDir,'entities.sql');if(!fs.existsSync(entitiesSqlFile)){this.dbService.closeConnection(dbConnection);return Promise.reject('No database scripts found. Try run "mowa oolong build" first')}return dbConnection.query('USE ??',[realDbName])}).then(results=>{let[result,fields]=results,sql=fs.readFileSync(entitiesSqlFile,{encoding:'utf8'});return dbConnection.query(sql)}).then(results=>{let[result,fields]=results;if(!_.isArray(result)){result=[result]}let warningRows=_.reduce(result,(sum,row)=>{sum+=row.warningStatus;return sum},0);if(0<warningRows){this.logger.log('warn',`${warningRows} warning(s) reported while initializing the database structure.`)}else{this.logger.log('info',`The table structure of database "${realDbName}" is created.`)}this.dbService.closeConnection(dbConnection)}).catch(err=>{if(dbConnection){this.dbService.closeConnection(dbConnection)}throw err})}async loadData(dataFile){let ext=path.extname(dataFile),content=fs.readFileSync(dataFile,{encoding:'utf8'}),db=this.appModule.db(this.dbService.serviceId);if('.json'==ext){let data=JSON.parse(content),querys=[];return Util.eachAsync_(data,async(records,entityName)=>{let Model=db.model(entityName),items=Array.isArray(records)?records:[records];return Util.eachAsync_(items,async item=>{let model=new Model(item);return model.save()})})}else if('.sql'==ext){}else{throw new Error('Unsupported data file format.')}}};module.exports=MysqlDeployer;