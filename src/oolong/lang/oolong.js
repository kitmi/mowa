/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
"use strict";

var oolong = (function () {
  var o = function (k, v, o, l) {
      for (o = o || {}, l = k.length; l--; o[k[l]] = v);
      return o
    },
    $V0 = [1, 5],
    $V1 = [1, 12],
    $V2 = [1, 13],
    $V3 = [1, 18],
    $V4 = [1, 16],
    $V5 = [1, 15],
    $V6 = [5, 7, 14, 19, 68, 186, 205],
    $V7 = [1, 27],
    $V8 = [1, 31],
    $V9 = [1, 37],
    $Va = [1, 36],
    $Vb = [2, 20],
    $Vc = [1, 45],
    $Vd = [7, 25, 53, 227],
    $Ve = [7, 190, 192],
    $Vf = [1, 55],
    $Vg = [7, 67],
    $Vh = [1, 59],
    $Vi = [2, 59],
    $Vj = [1, 66],
    $Vk = [1, 86],
    $Vl = [18, 84, 119, 123, 125, 128],
    $Vm = [1, 98],
    $Vn = [1, 101],
    $Vo = [1, 99],
    $Vp = [1, 100],
    $Vq = [7, 29, 31, 53, 67, 84, 95, 106, 107, 108, 111, 113, 116, 163, 173, 175, 180, 190, 192, 195, 200, 211, 227, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254],
    $Vr = [7, 95, 106, 107, 108, 111, 113],
    $Vs = [7, 31, 53, 95, 106, 107, 108, 111, 113, 173, 175, 180, 253, 254],
    $Vt = [7, 95, 106, 107, 108, 111, 113, 116],
    $Vu = [2, 41],
    $Vv = [1, 116],
    $Vw = [7, 29, 51, 95, 106, 107, 108, 111, 113, 116],
    $Vx = [7, 33, 95, 106, 107, 108, 111, 113, 116],
    $Vy = [7, 56, 95, 106, 107, 108, 111, 113, 116],
    $Vz = [7, 29, 95, 106, 107, 108, 111, 113, 116],
    $VA = [18, 119, 123, 125, 128],
    $VB = [216, 217],
    $VC = [7, 31, 53, 95, 106, 107, 108, 111, 113, 116, 173, 175, 180, 253, 254],
    $VD = [1, 148],
    $VE = [1, 160],
    $VF = [18, 123, 125, 128],
    $VG = [7, 190, 192, 195],
    $VH = [1, 189],
    $VI = [1, 182],
    $VJ = [1, 190],
    $VK = [1, 181],
    $VL = [1, 183],
    $VM = [1, 184],
    $VN = [1, 185],
    $VO = [1, 188],
    $VP = [1, 191],
    $VQ = [18, 125, 128],
    $VR = [7, 31, 53, 67, 95, 106, 107, 108, 111, 113, 116, 163, 173, 175, 180, 227, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254],
    $VS = [1, 221],
    $VT = [31, 53],
    $VU = [1, 226],
    $VV = [7, 31, 53, 67, 113, 116, 163, 173, 175, 180, 182, 227, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254],
    $VW = [1, 231],
    $VX = [18, 128],
    $VY = [1, 257],
    $VZ = [1, 264],
    $V_ = [7, 31, 53, 173, 175, 180, 253, 254],
    $V$ = [7, 31, 53, 116, 173, 175, 180, 253, 254],
    $V01 = [1, 277],
    $V11 = [1, 282],
    $V21 = [2, 233],
    $V31 = [7, 31, 53, 67, 163, 173, 175, 180, 227, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254],
    $V41 = [1, 291],
    $V51 = [7, 113],
    $V61 = [1, 301],
    $V71 = [1, 302],
    $V81 = [1, 303],
    $V91 = [1, 304],
    $Va1 = [7, 111],
    $Vb1 = [7, 211],
    $Vc1 = [7, 31, 53, 113, 116, 173, 175, 180, 253, 254],
    $Vd1 = [2, 96],
    $Ve1 = [53, 163],
    $Vf1 = [2, 97],
    $Vg1 = [1, 360],
    $Vh1 = [1, 364],
    $Vi1 = [18, 184],
    $Vj1 = [18, 142, 184],
    $Vk1 = [1, 388],
    $Vl1 = [1, 396],
    $Vm1 = [1, 401],
    $Vn1 = [7, 173, 175],
    $Vo1 = [1, 410],
    $Vp1 = [1, 411],
    $Vq1 = [1, 414],
    $Vr1 = [1, 415],
    $Vs1 = [1, 416],
    $Vt1 = [1, 417],
    $Vu1 = [1, 418],
    $Vv1 = [1, 419],
    $Vw1 = [1, 420],
    $Vx1 = [7, 31, 173, 175, 180, 253, 254],
    $Vy1 = [1, 435],
    $Vz1 = [15, 29, 30, 161, 174, 212, 213, 214, 215, 216, 217, 226, 242],
    $VA1 = [31, 180],
    $VB1 = [7, 175],
    $VC1 = [7, 31, 173, 175, 180],
    $VD1 = [1, 490],
    $VE1 = [18, 148];
  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      "error": 2,
      "program": 3,
      "input": 4,
      "EOF": 5,
      "input0": 6,
      "NEWLINE": 7,
      "statement": 8,
      "use_statement": 9,
      "type_statement": 10,
      "entity_statement": 11,
      "schema_statement": 12,
      "relation_statement": 13,
      "use": 14,
      "STRING": 15,
      "INDENT": 16,
      "use_statement_block": 17,
      "DEDENT": 18,
      "type": 19,
      "type_statement_item": 20,
      "type_statement_block": 21,
      "identifier": 22,
      "type_base_or_not": 23,
      "type_validators0_or_not": 24,
      ":": 25,
      "types": 26,
      "int_keyword": 27,
      "unsigned_or_not": 28,
      "(": 29,
      "INTEGER": 30,
      ")": 31,
      "number_type": 32,
      "exact": 33,
      "text_type": 34,
      "untrim_or_not": 35,
      "bool_keyword": 36,
      "binary_type": 37,
      "datetime": 38,
      "date": 39,
      "only": 40,
      "time": 41,
      "year": 42,
      "timestamp": 43,
      "json": 44,
      "xml": 45,
      "csv": 46,
      "identifier_or_str_array": 47,
      "identifier_or_member_access": 48,
      "int": 49,
      "integer": 50,
      "unsigned": 51,
      "number": 52,
      ",": 53,
      "text": 54,
      "fixedLength": 55,
      "untrim": 56,
      "bool": 57,
      "boolean": 58,
      "binary_keyword": 59,
      "blob": 60,
      "binary": 61,
      "type_validators0": 62,
      "type_validators": 63,
      "entity_statement_hd": 64,
      "entity_statement_block": 65,
      "entity_statement_hd0": 66,
      "is": 67,
      "entity": 68,
      "with_stmt_or_not": 69,
      "has_stmt_or_not": 70,
      "key_stmt_or_not": 71,
      "index_stmt_or_not": 72,
      "data_stmt_or_not": 73,
      "interface_stmt_or_not": 74,
      "with_stmt": 75,
      "has_stmt": 76,
      "key_stmt": 77,
      "index_stmt": 78,
      "data_stmt": 79,
      "interface_stmt": 80,
      "with": 81,
      "feature_inject": 82,
      "with_stmt_blk": 83,
      "has": 84,
      "has_stmt_itm": 85,
      "has_stmt_blk": 86,
      "field_qualifiers_or_not": 87,
      "field_modifiers0_or_not": 88,
      "field_modifiers0": 89,
      "field_validators1": 90,
      "field_modifiers1": 91,
      "field_reference": 92,
      "optional_qualifier_or_not": 93,
      "field_default_value": 94,
      "default": 95,
      "auto": 96,
      "literal": 97,
      "field_qualifiers": 98,
      "variable_modifiers": 99,
      "field_validators1_or_not": 100,
      "field_modifiers1_or_not": 101,
      "variable_modifier_or_not": 102,
      "optional_qualifier": 103,
      "field_qualifier": 104,
      "field_restriction": 105,
      "readOnly": 106,
      "fixedValue": 107,
      "forceUpdate": 108,
      "field_comment_or_not": 109,
      "--": 110,
      "optional": 111,
      "variable_modifier": 112,
      "|": 113,
      "function_call": 114,
      "type_validator": 115,
      "~": 116,
      "->": 117,
      "<->": 118,
      "key": 119,
      "index_stmt_itm": 120,
      "index_qualifiers": 121,
      "unique": 122,
      "index": 123,
      "index_stmt_blk": 124,
      "data": 125,
      "inline_object": 126,
      "inline_array": 127,
      "interface": 128,
      "interface_stmt_blk": 129,
      "interface_def": 130,
      "interface_def_body": 131,
      "accept_or_not": 132,
      "implementation": 133,
      "return_or_not": 134,
      "accept": 135,
      "interface_accept_blk": 136,
      "parameter_with_modifier": 137,
      "parameter": 138,
      "parameter_qualifiers_or_not": 139,
      "operation": 140,
      "find_one_operation": 141,
      "find": 142,
      "one": 143,
      "by": 144,
      "select_stm": 145,
      "case": 146,
      "case_condition_block": 147,
      "otherwise": 148,
      "condition_as_result_expression": 149,
      "query_condition_expression": 150,
      "update_operation": 151,
      "update": 152,
      "identifier_or_string": 153,
      "where_expr": 154,
      "create_operation": 155,
      "create": 156,
      "delete_operation": 157,
      "delete": 158,
      "coding_block": 159,
      "do": 160,
      "{": 161,
      "javascript": 162,
      "}": 163,
      "assign_operation": 164,
      "set": 165,
      "<-": 166,
      "value": 167,
      "select": 168,
      "column_range_list": 169,
      "skip_or_not": 170,
      "limit_or_not": 171,
      "simple_conditional_arrow_expr": 172,
      "skip": 173,
      "REFERENCE": 174,
      "limit": 175,
      "where": 176,
      "where_expr_condition": 177,
      "where_expr_condition_blk": 178,
      "conditional_expression": 179,
      "=>": 180,
      "return_expression": 181,
      "unless": 182,
      "return_condition_blk": 183,
      "return": 184,
      "concrete_value": 185,
      "relation": 186,
      "relation_statement_itm": 187,
      "relation_statement_blk": 188,
      "relation_statement_itm1": 189,
      "to": 190,
      "related_entity": 191,
      "for": 192,
      "a": 193,
      "relation_statement_itm0": 194,
      "of": 195,
      "its": 196,
      "own": 197,
      "relation_qualifier": 198,
      "every": 199,
      "may": 200,
      "have": 201,
      "several": 202,
      "many": 203,
      "great": 204,
      "schema": 205,
      "schema_statement_blk": 206,
      "schema_statement_itm": 207,
      "entity_qualifier": 208,
      "entities": 209,
      "schema_entities_blk": 210,
      "as": 211,
      "FLOAT": 212,
      "BOOL": 213,
      "null": 214,
      "REGEXP": 215,
      "NAME": 216,
      "DOTNAME": 217,
      "modifiable_value_list": 218,
      "feature_param_list": 219,
      "feature_param": 220,
      "modifiable_value": 221,
      "concrete_value_expression": 222,
      "kv_pairs": 223,
      "kv_pair_itm": 224,
      "kv_pairs0": 225,
      "[": 226,
      "]": 227,
      "value_list": 228,
      "value_list0": 229,
      "modifiable_value_list0": 230,
      "feature_param_list0": 231,
      "identifier_or_str_list": 232,
      "identifier_or_str_list0": 233,
      "logical_expression": 234,
      "simple_expression": 235,
      "logical_query_expression": 236,
      "binary_expression": 237,
      "throw_error_expression": 238,
      "unary_expression": 239,
      "throw": 240,
      "exists": 241,
      "not": 242,
      ">": 243,
      "<": 244,
      ">=": 245,
      "<=": 246,
      "=": 247,
      "!=": 248,
      "in": 249,
      "logical_expression_right": 250,
      "logical_operators": 251,
      "logical_query_expression_right": 252,
      "and": 253,
      "or": 254,
      "COLUMNS": 255,
      "column_range_list0": 256,
      "$accept": 0,
      "$end": 1
    },
    terminals_: {
      2: "error",
      5: "EOF",
      7: "NEWLINE",
      14: "use",
      15: "STRING",
      16: "INDENT",
      18: "DEDENT",
      19: "type",
      25: ":",
      29: "(",
      30: "INTEGER",
      31: ")",
      33: "exact",
      38: "datetime",
      39: "date",
      40: "only",
      41: "time",
      42: "year",
      43: "timestamp",
      44: "json",
      45: "xml",
      46: "csv",
      49: "int",
      50: "integer",
      51: "unsigned",
      52: "number",
      53: ",",
      54: "text",
      55: "fixedLength",
      56: "untrim",
      57: "bool",
      58: "boolean",
      60: "blob",
      61: "binary",
      67: "is",
      68: "entity",
      81: "with",
      84: "has",
      95: "default",
      96: "auto",
      106: "readOnly",
      107: "fixedValue",
      108: "forceUpdate",
      110: "--",
      111: "optional",
      113: "|",
      116: "~",
      117: "->",
      118: "<->",
      119: "key",
      122: "unique",
      123: "index",
      125: "data",
      128: "interface",
      135: "accept",
      142: "find",
      143: "one",
      144: "by",
      146: "case",
      148: "otherwise",
      152: "update",
      156: "create",
      158: "delete",
      160: "do",
      161: "{",
      162: "javascript",
      163: "}",
      165: "set",
      166: "<-",
      168: "select",
      173: "skip",
      174: "REFERENCE",
      175: "limit",
      176: "where",
      180: "=>",
      182: "unless",
      184: "return",
      186: "relation",
      190: "to",
      192: "for",
      193: "a",
      195: "of",
      196: "its",
      197: "own",
      199: "every",
      200: "may",
      201: "have",
      202: "several",
      203: "many",
      204: "great",
      205: "schema",
      209: "entities",
      211: "as",
      212: "FLOAT",
      213: "BOOL",
      214: "null",
      215: "REGEXP",
      216: "NAME",
      217: "DOTNAME",
      226: "[",
      227: "]",
      240: "throw",
      241: "exists",
      242: "not",
      243: ">",
      244: "<",
      245: ">=",
      246: "<=",
      247: "=",
      248: "!=",
      249: "in",
      253: "and",
      254: "or",
      255: "COLUMNS"
    },
    productions_: [0, [3, 1], [4, 1], [4, 2], [6, 1], [6, 1], [6, 2], [6, 2], [8, 1], [8, 1], [8, 1], [8, 1], [8, 1], [9, 3], [9, 5], [17, 2], [17, 3], [10, 3], [10, 5], [20, 3], [23, 0], [23, 2], [26, 2], [26, 5], [26, 1], [26, 2], [26, 2], [26, 1], [26, 1], [26, 1], [26, 3], [26, 3], [26, 3], [26, 2], [26, 1], [26, 1], [26, 1], [26, 1], [26, 1], [27, 1], [27, 1], [28, 0], [28, 1], [32, 1], [32, 4], [32, 5], [32, 6], [34, 1], [34, 4], [34, 5], [35, 0], [35, 1], [36, 1], [36, 1], [37, 1], [37, 4], [37, 5], [59, 1], [59, 1], [24, 0], [24, 1], [62, 1], [21, 2], [21, 3], [11, 2], [11, 5], [64, 1], [64, 3], [66, 2], [65, 6], [69, 0], [69, 1], [70, 0], [70, 1], [71, 0], [71, 1], [72, 0], [72, 1], [73, 0], [73, 1], [74, 0], [74, 1], [75, 3], [75, 5], [83, 2], [83, 3], [76, 3], [76, 5], [85, 5], [85, 6], [85, 7], [85, 3], [94, 4], [94, 4], [87, 0], [87, 1], [88, 0], [88, 1], [89, 1], [100, 0], [100, 1], [90, 1], [101, 0], [101, 1], [91, 1], [102, 0], [102, 1], [93, 0], [93, 1], [98, 1], [98, 2], [105, 1], [105, 1], [105, 1], [109, 0], [109, 2], [104, 1], [104, 1], [104, 1], [103, 1], [99, 1], [99, 2], [112, 2], [112, 2], [63, 1], [63, 2], [115, 2], [115, 2], [115, 4], [92, 2], [92, 2], [86, 2], [86, 3], [77, 3], [120, 1], [120, 1], [120, 2], [121, 2], [78, 3], [78, 5], [124, 2], [124, 3], [79, 3], [79, 3], [80, 5], [129, 1], [129, 2], [130, 5], [131, 3], [132, 0], [132, 5], [136, 2], [136, 3], [137, 5], [137, 6], [137, 7], [139, 0], [139, 4], [133, 1], [133, 2], [140, 1], [141, 6], [141, 9], [141, 12], [141, 6], [151, 6], [155, 5], [157, 4], [159, 5], [164, 6], [145, 5], [147, 2], [147, 3], [170, 0], [170, 2], [170, 2], [171, 0], [171, 2], [171, 2], [154, 2], [154, 5], [177, 1], [178, 2], [178, 3], [172, 3], [134, 0], [134, 2], [134, 6], [181, 2], [183, 4], [183, 5], [13, 3], [13, 5], [188, 2], [188, 3], [187, 1], [187, 3], [187, 4], [189, 1], [189, 4], [191, 2], [194, 4], [194, 5], [198, 1], [198, 1], [198, 1], [198, 4], [12, 6], [207, 1], [207, 2], [206, 5], [210, 2], [210, 3], [208, 2], [97, 1], [97, 1], [97, 1], [97, 1], [97, 1], [97, 1], [97, 1], [97, 1], [22, 1], [48, 1], [48, 1], [138, 1], [114, 3], [114, 4], [82, 1], [82, 3], [82, 4], [220, 1], [220, 1], [167, 1], [167, 1], [167, 1], [185, 1], [185, 1], [221, 1], [221, 1], [153, 1], [153, 1], [126, 2], [126, 3], [224, 3], [224, 3], [223, 1], [223, 2], [225, 2], [225, 3], [127, 2], [127, 3], [228, 1], [228, 2], [229, 2], [229, 3], [218, 1], [218, 2], [230, 2], [230, 3], [219, 1], [219, 2], [231, 2], [231, 3], [47, 3], [232, 1], [232, 2], [233, 2], [233, 3], [179, 1], [179, 1], [150, 1], [150, 1], [149, 1], [149, 1], [149, 1], [235, 1], [235, 1], [235, 1], [222, 2], [222, 2], [222, 3], [222, 3], [222, 4], [222, 4], [222, 5], [238, 2], [238, 5], [238, 5], [238, 7], [239, 2], [239, 3], [239, 3], [239, 4], [239, 4], [237, 3], [237, 3], [237, 3], [237, 3], [237, 3], [237, 3], [237, 3], [234, 2], [234, 4], [250, 2], [250, 4], [236, 2], [236, 4], [252, 2], [252, 4], [251, 1], [251, 1], [169, 1], [169, 2], [256, 2], [256, 3]],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */ , $$ /* vstack */ , _$ /* lstack */ ) {
      /* this == yyval */

      var $0 = $$.length - 1;
      switch (yystate) {
      case 1:

        var r = state;
        state = null;
        return r ? r.validate().build() : '';

        break;
      case 13:
      case 15:
        state.use($$[$0 - 1]);
        break;
      case 16:
        state.use($$[$0 - 2]);
        break;
      case 19:

        var n = $$[$0 - 2];
        if (state.isTypeExist(n)) throw new Error('Duplicate type definition detected at line ' + _$[$0 - 2].first_line + '.');
        if (BUILTIN_TYPES.has(n)) throw new Error('Cannot use built-in type "' + n + '" as a custom type name at line ' + _$[$0 - 2].first_line + '.');

        state.defType(n, Object.assign({
          type: 'text'
        }, $$[$0 - 1], $$[$0]));

        break;
      case 21:
      case 123:
      case 179:
      case 248:
      case 256:
      case 260:
        this.$ = $$[$0];
        break;
      case 22:
        this.$ = Object.assign({
          type: 'int'
        }, $$[$0]);
        break;
      case 23:
        this.$ = Object.assign({
          type: 'int',
          digits: parseInt($$[$0 - 2])
        }, $$[$0]);
        break;
      case 24:
        this.$ = Object.assign({
          type: 'float'
        }, $$[$0]);
        break;
      case 25:
        this.$ = Object.assign({
          type: 'decimal'
        }, $$[$0 - 1]);
        break;
      case 26:
      case 136:
      case 146:
      case 209:
      case 247:
      case 249:
        this.$ = Object.assign({}, $$[$0 - 1], $$[$0]);
        break;
      case 27:
        this.$ = {
          type: 'bool'
        };
        break;
      case 29:
        this.$ = {
          type: 'datetime',
          range: 'datetime'
        };
        break;
      case 30:
        this.$ = {
          type: 'datetime',
          range: 'date'
        };
        break;
      case 31:
        this.$ = {
          type: 'datetime',
          range: 'time'
        };
        break;
      case 32:
        this.$ = {
          type: 'datetime',
          range: 'year'
        };
        break;
      case 33:
        this.$ = {
          type: 'datetime',
          range: 'timestamp'
        };
        break;
      case 34:
        this.$ = {
          type: 'json'
        };
        break;
      case 35:
        this.$ = {
          type: 'xml'
        };
        break;
      case 36:
        this.$ = {
          type: 'csv'
        };
        break;
      case 37:
        this.$ = {
          type: 'enum',
          values: $$[$0]
        };
        break;
      case 38:
        this.$ = {
          type: $$[$0]
        };
        break;
      case 42:
        this.$ = {
          unsigned: true
        };
        break;
      case 43:
      case 242:
        this.$ = {};
        break;
      case 44:
        this.$ = {
          totalDigits: parseInt($$[$0 - 1])
        };
        break;
      case 45:
        this.$ = {
          decimalDigits: parseInt($$[$0 - 1])
        };
        break;
      case 46:
        this.$ = {
          totalDigits: parseInt($$[$0 - 3]),
          decimalDigits: parseInt($$[$0 - 1])
        };
        break;
      case 47:
        this.$ = {
          type: 'text'
        };
        break;
      case 48:
        this.$ = {
          type: 'text',
          maxLength: parseInt($$[$0 - 1])
        };
        break;
      case 49:
        this.$ = {
          type: 'text',
          fixedLength: parseInt($$[$0 - 2])
        };
        break;
      case 51:
        this.$ = {
          untrim: true
        };
        break;
      case 54:
        this.$ = {
          type: 'binary'
        };
        break;
      case 55:
        this.$ = {
          type: 'binary',
          maxLength: $$[$0 - 1]
        };
        break;
      case 56:
        this.$ = {
          type: 'binary',
          fixedLength: $$[$0 - 2]
        };
        break;
      case 61:
        this.$ = {
          validators0: $$[$0].validators
        };
        break;
      case 65:

        state.defEntity($$[$0 - 4], $$[$0 - 1]);

        break;
      case 66:
        state.defEntity($$[$0]);
        this.$ = $$[$0];
        break;
      case 67:
        state.defEntity($$[$0 - 2], {
          base: $$[$0]
        });
        this.$ = $$[$0 - 2];
        break;
      case 68:

        if (state.isEntityExist($$[$0])) throw new Error('Duplicate entity definition detected at line ' + _$[$0 - 1].first_line + '.');
        this.$ = $$[$0];

        break;
      case 69:
        this.$ = Object.assign({}, $$[$0 - 5], $$[$0 - 4], $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 82:
        this.$ = {
          features: [$$[$0 - 1]]
        };
        break;
      case 83:
        this.$ = {
          features: $$[$0 - 1]
        };
        break;
      case 84:
      case 140:
        this.$ = [$$[$0 - 1]];
        break;
      case 85:
      case 141:
        this.$ = [$$[$0 - 2]].concat($$[$0]);
        break;
      case 86:
        this.$ = {
          fields: {
            [$$[$0 - 1][0]]: $$[$0 - 1][1]
          }
        };
        break;
      case 87:
        this.$ = {
          fields: $$[$0 - 1]
        };
        break;
      case 88:
        this.$ = [$$[$0 - 4], Object.assign({
          type: $$[$0 - 4]
        }, $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0])];
        break;
      case 89:
        this.$ = [$$[$0 - 5], Object.assign({
          type: $$[$0 - 5]
        }, $$[$0 - 4], $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0])];
        break;
      case 90:
        this.$ = [$$[$0 - 6], Object.assign({
          type: $$[$0 - 6]
        }, $$[$0 - 5], $$[$0 - 4], $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0])];
        break;
      case 91:
        this.$ = [$$[$0 - 2], Object.assign({}, $$[$0 - 1], $$[$0])];
        break;
      case 92:
        this.$ = {
          auto: true
        };
        break;
      case 93:
      case 157:
        this.$ = {
          'default': $$[$0 - 1]
        };
        break;
      case 98:
        this.$ = {
          modifiers0: $$[$0].modifiers
        };
        break;
      case 101:
        this.$ = {
          validators1: $$[$0].validators
        };
        break;
      case 104:
        this.$ = {
          modifiers1: $$[$0].modifiers
        };
        break;
      case 110:

        for (var k in $$[$0]) {
          if (k in $$[$0 - 1]) {
            throw new Error('Duplicate field qualifier detected at line ' + _$[$0 - 1].first_line + '.');
          }
        }
        this.$ = Object.assign({}, $$[$0 - 1], $$[$0]);

        break;
      case 111:
        this.$ = {
          readOnly: true
        };
        break;
      case 112:
        this.$ = {
          fixedValue: true
        };
        break;
      case 113:
        this.$ = {
          forceUpdate: true
        };
        break;
      case 115:
        this.$ = {
          comment: $$[$0]
        };
        break;
      case 119:
        this.$ = {
          optional: true
        };
        break;
      case 120:
        this.$ = {
          modifiers: [$$[$0]]
        };
        break;
      case 121:

        this.$ = {
          modifiers: [$$[$0 - 1]].concat($$[$0].modifiers)
        };

        break;
      case 122:
      case 225:
      case 228:
        this.$ = {
          name: $$[$0]
        };
        break;
      case 125:
        this.$ = {
          validators: $$[$0 - 1].validators.concat($$[$0].validators)
        };
        break;
      case 126:
        this.$ = {
          validators: [{
            name: $$[$0]
          }]
        };
        break;
      case 127:
        this.$ = {
          validators: [$$[$0]]
        };
        break;
      case 129:
        this.$ = {
          belongTo: $$[$0]
        };
        break;
      case 130:
        this.$ = {
          bindTo: $$[$0]
        };
        break;
      case 131:
        this.$ = {
          [$$[$0 - 1][0]]: $$[$0 - 1][1]
        };
        break;
      case 132:
        this.$ = Object.assign({}, {
          [$$[$0 - 2][0]]: $$[$0 - 2][1]
        }, $$[$0]);
        break;
      case 133:
        this.$ = {
          key: $$[$0 - 1]
        };
        break;
      case 134:
      case 135:
        this.$ = {
          fields: $$[$0]
        };
        break;
      case 137:
        this.$ = {
          unique: true
        };
        break;
      case 138:
        this.$ = {
          indexes: [$$[$0 - 1]]
        };
        break;
      case 139:
        this.$ = {
          indexes: $$[$0 - 1]
        };
        break;
      case 142:
      case 143:
        this.$ = {
          data: $$[$0 - 1]
        };
        break;
      case 144:
        this.$ = {
          interface: $$[$0 - 1]
        };
        break;
      case 145:
        this.$ = Object.assign({}, $$[$0]);
        break;
      case 147:
        this.$ = {
          [$$[$0 - 4]]: $$[$0 - 1]
        };
        break;
      case 148:
        this.$ = Object.assign({}, $$[$0 - 2], {
          implementation: $$[$0 - 1]
        }, $$[$0]);
        break;
      case 150:
        this.$ = {
          accept: $$[$0 - 1]
        };
        break;
      case 151:
      case 171:
      case 193:
      case 211:
        this.$ = [$$[$0 - 1]];
        break;
      case 152:
      case 172:
      case 183:
      case 194:
      case 212:
        this.$ = [$$[$0 - 2]].concat($$[$0]);
        break;
      case 153:
        this.$ = Object.assign($$[$0 - 4], {
          type: $$[$0 - 4].name
        }, $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 154:
        this.$ = Object.assign($$[$0 - 5], {
          type: $$[$0 - 5].name
        }, $$[$0 - 4], $$[$0 - 3], $$[$0 - 2], $$[$0 - 2], $$[$0 - 1]);
        break;
      case 155:
        this.$ = Object.assign($$[$0 - 6], {
          type: $$[$0 - 6].name
        }, $$[$0 - 5], $$[$0 - 4], $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 158:
      case 252:
      case 254:
      case 258:
      case 262:
      case 265:
      case 267:
      case 312:
      case 314:
        this.$ = [$$[$0]];
        break;
      case 159:
      case 266:
      case 313:
        this.$ = [$$[$0 - 1]].concat($$[$0]);
        break;
      case 161:
        this.$ = Object.assign({
          oolType: 'findOne',
          model: $$[$0 - 3]
        }, $$[$0 - 1]);
        break;
      case 162:
        this.$ = {
          oolType: 'findOne',
          model: $$[$0 - 6],
          case: {
            items: $$[$0 - 1]
          }
        };
        break;
      case 163:
        this.$ = {
          oolType: 'findOne',
          model: $$[$0 - 9],
          case: {
            items: $$[$0 - 4],
            else: $$[$0 - 2]
          }
        };
        break;
      case 164:
        this.$ = {
          oolType: 'findOne',
          model: $$[$0 - 3],
          condition: $$[$0 - 1]
        };
        break;
      case 165:
        this.$ = {
          oolType: 'update',
          target: $$[$0 - 4],
          data: $$[$0 - 2],
          filter: $$[$0 - 1]
        };
        break;
      case 166:
        this.$ = {
          oolType: 'create',
          target: $$[$0 - 3],
          data: $$[$0 - 1]
        };
        break;
      case 167:
        this.$ = {
          oolType: 'delete',
          target: $$[$0 - 2],
          filter: $$[$0 - 1]
        };
        break;
      case 168:
        this.$ = {
          oolType: 'javascript',
          script: $$[$0 - 2]
        };
        break;
      case 169:
        this.$ = {
          oolType: 'assignment',
          left: $$[$0 - 4],
          right: Object.assign({
            argument: $$[$0 - 2]
          }, $$[$0 - 1])
        };
        break;
      case 170:
        this.$ = Object.assign({
          projection: $$[$0 - 3],
          filter: $$[$0 - 2]
        }, $$[$0 - 1], $$[$0]);
        break;
      case 174:
      case 175:
        this.$ = {
          'skip': $$[$0]
        };
        break;
      case 177:
      case 178:
        this.$ = {
          'limit': $$[$0]
        };
        break;
      case 180:
      case 182:
      case 243:
      case 251:
      case 264:
        this.$ = $$[$0 - 1];
        break;
      case 184:
        this.$ = {
          oolType: 'ConditionalStatement',
          test: $$[$0 - 2],
          then: $$[$0]
        }
        break;
      case 186:
        this.$ = {
          return: $$[$0 - 1]
        };
        break;
      case 187:
        this.$ = {
          return: Object.assign($$[$0 - 5], {
            exceptions: $$[$0 - 1]
          })
        };
        break;
      case 188:
        this.$ = {
          oolType: 'ReturnExpression',
          value: $$[$0]
        };
        break;
      case 189:
        this.$ = {
          oolType: 'ConditionalStatement',
          test: $$[$0 - 3],
          then: $$[$0 - 1]
        }
        break;
      case 190:
        this.$ = [{
          oolType: 'ConditionalStatement',
          test: $$[$0 - 4],
          then: $$[$0 - 2]
        }].concat($$[$0]);
        break;
      case 191:
      case 192:
        state.defRelation($$[$0 - 1]);
        break;
      case 196:

        if ($$[$0 - 2].right === $$[$0].right) {
          throw new Error('Invalid relation declaration at line ' + _$[$0 - 2].first_line + '.');
        }
        let right2 = {
          relationship: $$[$0 - 2].relationship,
          size: $$[$0 - 2].size
        };
        let right1Name = $$[$0].right;
        delete $$[$0].right;

        this.$ = Object.assign({}, $$[$0 - 2], {
          right: {
            [right1Name]: $$[$0],
            [$$[$0 - 2].right]: right2
          },
          type: 'chain'
        });
        delete this.$.relationship;
        delete this.$.size;

        break;
      case 197:

        let right1Name2 = $$[$0 - 3].left;
        let right2Name2 = $$[$0];

        this.$ = Object.assign({}, $$[$0 - 3], {
          left: $$[$0 - 3].right,
          right: [right1Name2, right2Name2],
          type: 'multi'
        });

        break;
      case 199:
        this.$ = Object.assign({}, $$[$0 - 3], {
          relationship: $$[$0 - 3].relationship.replace('n:', '1:')
        });
        break;
      case 200:
        this.$ = Object.assign({}, $$[$0 - 1], {
          right: $$[$0]
        });
        break;
      case 201:
      case 303:
      case 307:
        this.$ = Object.assign({
          left: $$[$0 - 2]
        }, $$[$0]);
        break;
      case 202:
        this.$ = Object.assign({
          left: $$[$0 - 3],
          optional: true
        }, $$[$0]);
        break;
      case 203:
        this.$ = {
          relationship: 'n:1',
          size: 'one'
        };
        break;
      case 204:
        this.$ = {
          relationship: 'n:n',
          size: 'small'
        };
        break;
      case 205:
        this.$ = {
          relationship: 'n:n',
          size: 'medium'
        };
        break;
      case 206:
        this.$ = {
          relationship: 'n:n',
          size: 'large'
        };
        break;
      case 207:

        if (state.parsed.schema) throw new Error('Only one schema definition allowed in a schema file. Extra schema definition detected at line ' + _$[$0 - 5].first_line + '.');
        state.defSchema($$[$0 - 4], $$[$0 - 1]);

        break;
      case 208:
        this.$ = {
          entity: $$[$0]
        };
        break;
      case 210:
        this.$ = {
          entities: $$[$0 - 1]
        };
        break;
      case 213:
        this.$ = {
          alias: $$[$0]
        };
        break;
      case 217:
        this.$ = null;
        break;
      case 226:
      case 229:
        this.$ = {
          name: $$[$0 - 2]
        };
        break;
      case 227:
        this.$ = {
          name: $$[$0 - 3],
          args: $$[$0 - 1]
        };
        break;
      case 230:
        this.$ = {
          name: $$[$0 - 3],
          options: $$[$0 - 1]
        };
        break;
      case 235:
        this.$ = Object.assign({
          oolType: 'FunctionCall'
        }, $$[$0]);
        break;
      case 244:
      case 245:
        this.$ = {
          [$$[$0 - 2]]: $$[$0]
        };
        break;
      case 250:
        this.$ = [];
        break;
      case 253:
        this.$ = $$[$0 - 1].concat($$[$0]);
        break;
      case 255:
      case 257:
      case 259:
      case 261:
      case 263:
      case 268:
      case 315:
        this.$ = [$$[$0 - 1]].concat($$[$0]);
        break;
      case 279:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 1]
        }, $$[$0]);
        break;
      case 280:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 1]
        }, $$[$0]);
        break;
      case 281:
      case 282:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 2]
        }, $$[$0 - 1], $$[$0]);
        break;
      case 283:
      case 284:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 3]
        }, $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 285:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 4]
        }, $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 286:
        this.$ = {
          oolType: 'ThrowExpression'
        };
        break;
      case 287:
        this.$ = {
          oolType: 'ThrowExpression',
          message: $$[$0 - 1]
        };
        break;
      case 288:
        this.$ = {
          oolType: 'ThrowExpression',
          errorType: $$[$0 - 1]
        };
        break;
      case 289:
        this.$ = {
          oolType: 'ThrowExpression',
          errorType: $$[$0 - 3],
          message: $$[$0 - 1]
        };
        break;
      case 290:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'exists',
          argument: $$[$0 - 1]
        };
        break;
      case 291:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'not-exists',
          argument: $$[$0 - 2]
        };
        break;
      case 292:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'is-null',
          argument: $$[$0 - 2]
        };
        break;
      case 293:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'is-not-null',
          argument: $$[$0 - 3]
        };
        break;
      case 294:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'not',
          argument: $$[$0 - 1],
          prefix: true
        };
        break;
      case 295:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '>',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 296:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '<',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 297:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '>=',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 298:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '<=',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 299:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '=',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 300:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '!=',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 301:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: 'in',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 302:
      case 306:
        this.$ = Object.assign({
          left: $$[$0 - 1]
        }, $$[$0]);
        break;
      case 304:
      case 308:
        this.$ = Object.assign({
          oolType: 'BinaryExpression'
        }, $$[$0 - 1], {
          right: $$[$0]
        });
        break;
      case 305:
      case 309:
        this.$ = Object.assign({
          oolType: 'BinaryExpression'
        }, $$[$0 - 3], {
          right: $$[$0 - 1]
        });
        break;
      case 310:
        this.$ = {
          operator: 'and'
        };
        break;
      case 311:
        this.$ = {
          operator: 'or'
        };
        break;
      }
    },
    table: [{
      3: 1,
      4: 2,
      5: [1, 3],
      6: 4,
      7: $V0,
      8: 6,
      9: 7,
      10: 8,
      11: 9,
      12: 10,
      13: 11,
      14: $V1,
      19: $V2,
      64: 14,
      66: 17,
      68: $V3,
      186: $V4,
      205: $V5
    }, {
      1: [3]
    }, {
      1: [2, 1]
    }, {
      1: [2, 2]
    }, {
      5: [1, 19]
    }, {
      5: [2, 4],
      6: 20,
      7: $V0,
      8: 6,
      9: 7,
      10: 8,
      11: 9,
      12: 10,
      13: 11,
      14: $V1,
      19: $V2,
      64: 14,
      66: 17,
      68: $V3,
      186: $V4,
      205: $V5
    }, {
      5: [2, 5],
      6: 21,
      7: $V0,
      8: 6,
      9: 7,
      10: 8,
      11: 9,
      12: 10,
      13: 11,
      14: $V1,
      19: $V2,
      64: 14,
      66: 17,
      68: $V3,
      186: $V4,
      205: $V5
    }, o($V6, [2, 8]), o($V6, [2, 9]), o($V6, [2, 10]), o($V6, [2, 11]), o($V6, [2, 12]), {
      7: [1, 23],
      15: [1, 22]
    }, {
      7: [1, 25],
      20: 24,
      22: 26,
      216: $V7
    }, {
      7: [1, 28]
    }, {
      15: $V8,
      22: 30,
      153: 29,
      216: $V7
    }, {
      7: [1, 33],
      187: 32,
      189: 34,
      193: $V9,
      194: 35,
      199: $Va
    }, {
      7: [2, 66],
      67: [1, 38]
    }, {
      22: 39,
      216: $V7
    }, {
      1: [2, 3]
    }, {
      5: [2, 6]
    }, {
      5: [2, 7]
    }, {
      7: [1, 40]
    }, {
      16: [1, 41]
    }, {
      7: [1, 42]
    }, {
      16: [1, 43]
    }, o([7, 116], $Vb, {
      23: 44,
      25: $Vc
    }), o([7, 25, 29, 31, 53, 67, 84, 95, 106, 107, 108, 111, 113, 116, 117, 118, 144, 163, 173, 175, 180, 190, 192, 195, 200, 211, 227, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254], [2, 222]), o($V6, [2, 64], {
      16: [1, 46]
    }), {
      7: [1, 47]
    }, o($Vd, [2, 240]), o($Vd, [2, 241]), {
      7: [1, 48]
    }, {
      16: [1, 49]
    }, {
      7: [2, 195],
      190: [1, 50],
      192: [1, 51]
    }, o($Ve, [2, 198], {
      195: [1, 52]
    }), {
      22: 54,
      48: 53,
      216: $V7,
      217: $Vf
    }, {
      22: 54,
      48: 56,
      216: $V7,
      217: $Vf
    }, {
      22: 54,
      48: 57,
      216: $V7,
      217: $Vf
    }, o($Vg, [2, 68]), o($V6, [2, 13]), {
      15: $Vh,
      17: 58
    }, o($V6, [2, 17]), {
      20: 61,
      21: 60,
      22: 26,
      216: $V7
    }, {
      7: $Vi,
      24: 62,
      62: 63,
      63: 64,
      115: 65,
      116: $Vj
    }, {
      22: 54,
      26: 67,
      27: 68,
      32: 69,
      34: 70,
      36: 71,
      37: 72,
      38: [1, 73],
      44: [1, 74],
      45: [1, 75],
      46: [1, 76],
      47: 77,
      48: 78,
      49: [1, 79],
      50: [1, 80],
      52: [1, 81],
      54: [1, 82],
      57: [1, 83],
      58: [1, 84],
      59: 85,
      60: [1, 87],
      61: [1, 88],
      216: $V7,
      217: $Vf,
      226: $Vk
    }, o($Vl, [2, 70], {
      65: 89,
      69: 90,
      75: 91,
      81: [1, 92]
    }), {
      16: [1, 93]
    }, o($V6, [2, 191]), {
      187: 95,
      188: 94,
      189: 34,
      193: $V9,
      194: 35,
      199: $Va
    }, {
      143: $Vm,
      191: 96,
      193: $Vn,
      198: 97,
      202: $Vo,
      203: $Vp
    }, {
      193: [1, 102]
    }, {
      196: [1, 103]
    }, {
      84: [1, 104]
    }, o($Vq, [2, 223]), o($Vq, [2, 224]), {
      200: [1, 105]
    }, {
      7: [2, 67]
    }, {
      18: [1, 106]
    }, {
      7: [1, 107]
    }, {
      18: [1, 108]
    }, {
      7: [1, 109]
    }, {
      7: [2, 19]
    }, o($Vr, [2, 60]), o($Vs, [2, 61]), o($Vs, [2, 124], {
      115: 65,
      63: 110,
      116: $Vj
    }), {
      22: 54,
      29: [1, 113],
      48: 111,
      114: 112,
      216: $V7,
      217: $Vf
    }, o($Vt, [2, 21]), o($Vt, $Vu, {
      28: 114,
      29: [1, 115],
      51: $Vv
    }), o($Vt, [2, 24], {
      33: [1, 117]
    }), o($Vt, [2, 50], {
      35: 118,
      56: [1, 119]
    }), o($Vt, [2, 27]), o($Vt, [2, 28]), o($Vt, [2, 29], {
      39: [1, 120],
      41: [1, 121],
      42: [1, 122],
      43: [1, 123]
    }), o($Vt, [2, 34]), o($Vt, [2, 35]), o($Vt, [2, 36]), o($Vt, [2, 37]), o($Vt, [2, 38]), o($Vw, [2, 39]), o($Vw, [2, 40]), o($Vx, [2, 43], {
      29: [1, 124]
    }), o($Vy, [2, 47], {
      29: [1, 125]
    }), o($Vt, [2, 52]), o($Vt, [2, 53]), o($Vt, [2, 54], {
      29: [1, 126]
    }), {
      15: $V8,
      22: 30,
      153: 128,
      216: $V7,
      232: 127
    }, o($Vz, [2, 57]), o($Vz, [2, 58]), {
      18: [1, 129]
    }, o($VA, [2, 72], {
      70: 130,
      76: 131,
      84: [1, 132]
    }), o($Vl, [2, 71]), {
      7: [1, 134],
      22: 54,
      48: 135,
      82: 133,
      216: $V7,
      217: $Vf
    }, {
      206: 136,
      209: [1, 137]
    }, {
      18: [1, 138]
    }, {
      7: [1, 139]
    }, {
      7: [2, 196]
    }, {
      22: 54,
      48: 140,
      216: $V7,
      217: $Vf
    }, o($VB, [2, 203]), o($VB, [2, 204]), o($VB, [2, 205]), {
      204: [1, 141]
    }, {
      22: 54,
      48: 142,
      216: $V7,
      217: $Vf
    }, {
      197: [1, 143]
    }, {
      143: $Vm,
      191: 144,
      193: $Vn,
      198: 97,
      202: $Vo,
      203: $Vp
    }, {
      201: [1, 145]
    }, o($V6, [2, 14]), {
      15: $Vh,
      17: 146,
      18: [2, 15]
    }, o($V6, [2, 18]), {
      18: [2, 62],
      20: 61,
      21: 147,
      22: 26,
      216: $V7
    }, o($Vs, [2, 125]), o($VC, [2, 126], {
      29: $VD
    }), o($VC, [2, 127]), {
      30: [1, 149]
    }, o($Vt, [2, 22]), {
      30: [1, 150]
    }, o($Vt, [2, 42]), o($Vt, [2, 25]), o($Vt, [2, 26]), o($Vt, [2, 51]), {
      40: [1, 151]
    }, {
      40: [1, 152]
    }, {
      40: [1, 153]
    }, o($Vt, [2, 33]), {
      30: [1, 154],
      53: [1, 155]
    }, {
      30: [1, 156]
    }, {
      30: [1, 157]
    }, {
      227: [1, 158]
    }, {
      53: $VE,
      227: [2, 265],
      233: 159
    }, o($V6, [2, 65]), o($VF, [2, 74], {
      71: 161,
      77: 162,
      119: [1, 163]
    }), o($VA, [2, 73]), {
      7: [1, 165],
      22: 166,
      85: 164,
      216: $V7
    }, {
      7: [1, 167]
    }, {
      16: [1, 168]
    }, {
      7: [2, 228],
      29: [1, 169]
    }, {
      18: [1, 170]
    }, {
      7: [1, 171]
    }, o($V6, [2, 192]), {
      18: [2, 193],
      187: 95,
      188: 172,
      189: 34,
      193: $V9,
      194: 35,
      199: $Va
    }, o($VG, [2, 200]), {
      52: [1, 173]
    }, {
      7: [2, 197]
    }, o($Ve, [2, 199]), o($VG, [2, 201]), {
      143: $Vm,
      191: 174,
      193: $Vn,
      198: 97,
      202: $Vo,
      203: $Vp
    }, {
      18: [2, 16]
    }, {
      18: [2, 63]
    }, {
      15: $VH,
      30: $VI,
      31: [1, 175],
      97: 180,
      126: 186,
      127: 187,
      161: $VJ,
      174: $VK,
      185: 178,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      218: 176,
      221: 177,
      222: 179,
      226: $VP
    }, {
      31: [1, 192]
    }, {
      31: [1, 193]
    }, o($Vt, [2, 30]), o($Vt, [2, 31]), o($Vt, [2, 32]), {
      31: [1, 194],
      53: [1, 195]
    }, {
      30: [1, 196]
    }, {
      31: [1, 197]
    }, {
      31: [1, 198]
    }, o([7, 67, 95, 106, 107, 108, 111, 113, 116], [2, 264]), {
      227: [2, 266]
    }, {
      15: $V8,
      22: 30,
      153: 199,
      216: $V7
    }, o($VQ, [2, 76], {
      72: 200,
      78: 201,
      123: [1, 202]
    }), o($VF, [2, 75]), {
      22: 203,
      216: $V7
    }, {
      7: [1, 204]
    }, {
      16: [1, 205]
    }, o($Vt, $Vb, {
      23: 206,
      92: 207,
      25: $Vc,
      117: [1, 208],
      118: [1, 209]
    }), o($Vl, [2, 82]), {
      22: 54,
      48: 135,
      82: 211,
      83: 210,
      216: $V7,
      217: $Vf
    }, {
      15: $VH,
      22: 216,
      30: $VI,
      31: [1, 212],
      97: 215,
      126: 186,
      127: 187,
      161: $VJ,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      219: 213,
      220: 214,
      226: $VP
    }, o($V6, [2, 207]), {
      16: [1, 217]
    }, {
      18: [2, 194]
    }, {
      195: [1, 218]
    }, o($VG, [2, 202]), o($VR, [2, 226]), {
      31: [1, 219]
    }, {
      31: [2, 256],
      53: $VS,
      230: 220
    }, o($VT, [2, 238], {
      63: 64,
      115: 65,
      62: 222,
      89: 223,
      99: 224,
      112: 225,
      113: $VU,
      116: $Vj
    }), o($VT, [2, 239]), o($VV, [2, 236]), o($VV, [2, 237]), o($VV, [2, 214]), o($VV, [2, 215]), o($VV, [2, 216]), o($VV, [2, 217]), o($VV, [2, 218]), o($VV, [2, 219]), o($VV, [2, 220]), o($VV, [2, 221]), {
      15: $V8,
      22: 30,
      30: $VW,
      153: 230,
      163: [1, 227],
      216: $V7,
      223: 228,
      224: 229
    }, {
      15: $VH,
      22: 54,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 234,
      174: $VK,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP,
      227: [1, 232],
      228: 233
    }, o($VC, [2, 128]), o($Vt, $Vu, {
      28: 238,
      51: $Vv
    }), o($Vx, [2, 44]), {
      30: [1, 239]
    }, {
      31: [1, 240]
    }, o($Vy, [2, 48], {
      55: [1, 241]
    }), o($Vt, [2, 55], {
      55: [1, 242]
    }), {
      53: $VE,
      227: [2, 267],
      233: 243
    }, o($VX, [2, 78], {
      73: 244,
      79: 245,
      125: [1, 246]
    }), o($VQ, [2, 77]), {
      7: [1, 248],
      22: 249,
      47: 250,
      120: 247,
      216: $V7,
      226: $Vk
    }, {
      7: [1, 251]
    }, o($VA, [2, 86]), {
      22: 166,
      85: 253,
      86: 252,
      216: $V7
    }, o($Vr, $Vi, {
      62: 63,
      63: 64,
      115: 65,
      24: 254,
      116: $Vj
    }), {
      7: [2, 107],
      93: 255,
      103: 256,
      111: $VY
    }, {
      22: 54,
      48: 258,
      216: $V7,
      217: $Vf
    }, {
      22: 54,
      48: 259,
      216: $V7,
      217: $Vf
    }, {
      18: [1, 260]
    }, {
      7: [1, 261]
    }, {
      7: [2, 229]
    }, {
      31: [1, 262]
    }, {
      31: [2, 260],
      53: $VZ,
      231: 263
    }, o($VT, [2, 231]), o($VT, [2, 232]), {
      22: 54,
      48: 267,
      207: 266,
      210: 265,
      216: $V7,
      217: $Vf
    }, o($VB, [2, 206]), o($VR, [2, 227]), {
      31: [2, 257]
    }, {
      15: $VH,
      30: $VI,
      97: 180,
      126: 186,
      127: 187,
      161: $VJ,
      174: $VK,
      185: 178,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      221: 268,
      222: 179,
      226: $VP
    }, o($V_, [2, 279], {
      99: 224,
      112: 225,
      89: 269,
      113: $VU
    }), o($V_, [2, 280], {
      115: 65,
      90: 270,
      63: 271,
      116: $Vj
    }), o($V$, [2, 98]), o($V$, [2, 120], {
      112: 225,
      99: 272,
      113: $VU
    }), {
      22: 54,
      48: 273,
      114: 274,
      216: $V7,
      217: $Vf
    }, o($VV, [2, 242]), {
      163: [1, 275]
    }, {
      53: $V01,
      163: [2, 246],
      225: 276
    }, {
      25: [1, 278]
    }, {
      25: [1, 279]
    }, o($VV, [2, 250]), {
      227: [1, 280]
    }, {
      53: $V11,
      227: [2, 252],
      229: 281
    }, o([7, 31, 53, 163, 173, 175, 180, 227, 243, 244, 245, 246, 247, 248, 249, 253, 254], $V21), o($V31, [2, 234], {
      29: $VD
    }), o($V31, [2, 235]), o($Vt, [2, 23]), {
      31: [1, 283]
    }, o($Vx, [2, 45]), o($Vy, [2, 49]), o($Vt, [2, 56]), {
      227: [2, 268]
    }, {
      18: [2, 80],
      74: 284,
      80: 285,
      128: [1, 286]
    }, o($VX, [2, 79]), {
      126: 287,
      127: 288,
      161: $VJ,
      226: $VP
    }, {
      7: [1, 289],
      67: $V41,
      121: 290
    }, {
      16: [1, 292]
    }, o($Vg, [2, 134]), o($Vg, [2, 135]), o($VF, [2, 133]), {
      18: [1, 293]
    }, {
      7: [1, 294]
    }, o($V51, [2, 94], {
      87: 295,
      98: 296,
      104: 297,
      94: 298,
      103: 299,
      105: 300,
      95: $V61,
      106: $V71,
      107: $V81,
      108: $V91,
      111: $VY
    }), {
      7: [2, 91]
    }, {
      7: [2, 108]
    }, o($Vr, [2, 119]), o($Va1, [2, 129]), o($Va1, [2, 130]), o($Vl, [2, 83]), {
      18: [2, 84],
      22: 54,
      48: 135,
      82: 211,
      83: 305,
      216: $V7,
      217: $Vf
    }, {
      7: [2, 230]
    }, {
      31: [2, 261]
    }, {
      15: $VH,
      22: 216,
      30: $VI,
      97: 215,
      126: 186,
      127: 187,
      161: $VJ,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      220: 306,
      226: $VP
    }, {
      18: [1, 307]
    }, {
      7: [1, 308],
      208: 309,
      211: [1, 310]
    }, o($Vb1, [2, 208]), {
      31: [2, 258],
      53: $VS,
      230: 311
    }, o($V_, [2, 281], {
      115: 65,
      63: 271,
      90: 312,
      116: $Vj
    }), o($V_, [2, 282], {
      112: 225,
      91: 313,
      99: 314,
      113: $VU
    }), o([7, 31, 53, 113, 173, 175, 180, 253, 254], [2, 101]), o($V$, [2, 121]), o($Vc1, [2, 122], {
      29: $VD
    }), o($Vc1, [2, 123]), o($VV, [2, 243]), {
      163: [2, 247]
    }, {
      15: $V8,
      22: 30,
      30: $VW,
      153: 230,
      216: $V7,
      224: 315
    }, {
      15: $VH,
      22: 54,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 316,
      174: $VK,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP
    }, {
      15: $VH,
      22: 54,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 317,
      174: $VK,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP
    }, o($VV, [2, 251]), {
      227: [2, 253]
    }, {
      15: $VH,
      22: 54,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 318,
      174: $VK,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP
    }, o($Vx, [2, 46]), {
      18: [2, 69]
    }, {
      18: [2, 81]
    }, {
      7: [1, 319]
    }, {
      7: [1, 320]
    }, {
      7: [1, 321]
    }, o($VQ, [2, 138]), o($Vg, [2, 136]), {
      122: [1, 322]
    }, {
      22: 249,
      47: 250,
      120: 324,
      124: 323,
      216: $V7,
      226: $Vk
    }, o($VA, [2, 87]), {
      18: [2, 131],
      22: 166,
      85: 253,
      86: 325,
      216: $V7
    }, {
      7: $Vd1,
      88: 326,
      89: 327,
      99: 224,
      112: 225,
      113: $VU
    }, o($V51, [2, 95]), o($V51, [2, 109], {
      104: 297,
      94: 298,
      103: 299,
      105: 300,
      98: 328,
      95: $V61,
      106: $V71,
      107: $V81,
      108: $V91,
      111: $VY
    }), o($Vr, [2, 116]), o($Vr, [2, 117]), o($Vr, [2, 118]), {
      29: [1, 329]
    }, o($Vr, [2, 111]), o($Vr, [2, 112]), o($Vr, [2, 113]), {
      18: [2, 85]
    }, {
      31: [2, 262],
      53: $VZ,
      231: 330
    }, {
      18: [2, 210]
    }, {
      18: [2, 211],
      22: 54,
      48: 267,
      207: 266,
      210: 331,
      216: $V7,
      217: $Vf
    }, o($Vb1, [2, 209]), {
      22: 332,
      216: $V7
    }, {
      31: [2, 259]
    }, o($V_, [2, 283], {
      112: 225,
      99: 314,
      91: 333,
      113: $VU
    }), o($V_, [2, 284]), o($V_, [2, 104]), {
      53: $V01,
      163: [2, 248],
      225: 334
    }, o($Ve1, [2, 244]), o($Ve1, [2, 245]), {
      53: $V11,
      227: [2, 254],
      229: 335
    }, {
      16: [1, 336]
    }, o($VX, [2, 142]), o($VX, [2, 143]), o($Vg, [2, 137]), {
      18: [1, 337]
    }, {
      7: [1, 338],
      67: $V41,
      121: 290
    }, {
      18: [2, 132]
    }, {
      7: [2, 88]
    }, {
      7: $Vf1,
      63: 271,
      90: 339,
      115: 65,
      116: $Vj
    }, o($V51, [2, 110]), {
      15: $VH,
      30: $VI,
      96: [1, 340],
      97: 341,
      126: 186,
      127: 187,
      161: $VJ,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      226: $VP
    }, {
      31: [2, 263]
    }, {
      18: [2, 212]
    }, o($Vb1, [2, 213]), o($V_, [2, 285]), {
      163: [2, 249]
    }, {
      227: [2, 255]
    }, {
      22: 344,
      129: 342,
      130: 343,
      216: $V7
    }, o($VQ, [2, 139]), {
      18: [2, 140],
      22: 249,
      47: 250,
      120: 324,
      124: 345,
      216: $V7,
      226: $Vk
    }, {
      7: [2, 89],
      91: 346,
      99: 314,
      112: 225,
      113: $VU
    }, {
      31: [1, 347]
    }, {
      31: [1, 348]
    }, {
      18: [1, 349]
    }, {
      18: [2, 145],
      22: 344,
      129: 350,
      130: 343,
      216: $V7
    }, {
      7: [1, 351]
    }, {
      18: [2, 141]
    }, {
      7: [2, 90]
    }, o($Vr, [2, 92]), o($Vr, [2, 93]), {
      18: [2, 144]
    }, {
      18: [2, 146]
    }, {
      16: [1, 352]
    }, {
      131: 353,
      132: 354,
      135: [1, 355],
      142: [2, 149]
    }, {
      18: [1, 356]
    }, {
      133: 357,
      140: 358,
      141: 359,
      142: $Vg1
    }, {
      7: [1, 361]
    }, o([18, 216], [2, 147]), {
      18: [2, 185],
      134: 362,
      181: 363,
      184: $Vh1
    }, o($Vi1, [2, 158], {
      140: 358,
      141: 359,
      133: 365,
      142: $Vg1
    }), o($Vj1, [2, 160]), {
      143: [1, 366]
    }, {
      16: [1, 367]
    }, {
      18: [2, 148]
    }, {
      7: [1, 368],
      182: [1, 369]
    }, {
      15: $VH,
      30: $VI,
      97: 180,
      126: 186,
      127: 187,
      161: $VJ,
      174: $VK,
      185: 370,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      226: $VP
    }, o($Vi1, [2, 159]), {
      22: 371,
      216: $V7
    }, {
      22: 375,
      136: 372,
      137: 373,
      138: 374,
      216: $V7
    }, {
      18: [2, 186]
    }, {
      7: [1, 376]
    }, o([7, 182], [2, 188]), {
      144: [1, 377]
    }, {
      18: [1, 378]
    }, {
      7: [1, 379]
    }, o([7, 95, 113, 116], $Vb, {
      23: 380,
      25: $Vc
    }), o([7, 25, 95, 113, 116], [2, 225]), {
      16: [1, 381]
    }, {
      15: $VH,
      22: 54,
      29: $Vk1,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      145: 382,
      146: [1, 383],
      150: 384,
      161: $VJ,
      167: 389,
      168: [1, 385],
      174: $VK,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP,
      236: 386,
      237: 387
    }, {
      142: [2, 150]
    }, {
      18: [2, 151],
      22: 375,
      136: 390,
      137: 373,
      138: 374,
      216: $V7
    }, o([7, 95, 113], $Vi, {
      62: 63,
      63: 64,
      115: 65,
      24: 391,
      116: $Vj
    }), {
      15: $VH,
      22: 54,
      29: $Vl1,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 400,
      174: $VK,
      179: 393,
      183: 392,
      185: 402,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      222: 399,
      226: $VP,
      234: 394,
      235: 395,
      237: 398,
      239: 397,
      242: $Vm1
    }, {
      7: [1, 403]
    }, {
      7: [1, 404]
    }, {
      7: [1, 405]
    }, {
      169: 406,
      255: [1, 407]
    }, o($Vn1, [2, 271]), o($Vn1, [2, 272], {
      250: 408,
      251: 409,
      253: $Vo1,
      254: $Vp1
    }), {
      15: $VH,
      22: 54,
      29: $Vl1,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 400,
      174: $VK,
      185: 402,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      222: 399,
      226: $VP,
      234: 412,
      235: 413,
      237: 398,
      239: 397,
      242: $Vm1
    }, {
      243: $Vq1,
      244: $Vr1,
      245: $Vs1,
      246: $Vt1,
      247: $Vu1,
      248: $Vv1,
      249: $Vw1
    }, {
      18: [2, 152]
    }, o($V51, [2, 156], {
      139: 421,
      95: [1, 422]
    }), {
      18: [1, 423]
    }, {
      180: [1, 424]
    }, {
      180: [2, 269]
    }, {
      180: [2, 270],
      250: 425,
      251: 409,
      253: $Vo1,
      254: $Vp1
    }, {
      15: $VH,
      22: 54,
      29: $Vl1,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 400,
      174: $VK,
      185: 402,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      222: 399,
      226: $VP,
      234: 426,
      235: 413,
      237: 398,
      239: 397,
      242: $Vm1
    }, o($Vx1, [2, 276]), o($Vx1, [2, 277]), o($Vx1, [2, 278]), {
      67: [1, 429],
      241: [1, 427],
      242: [1, 428],
      243: $Vq1,
      244: $Vr1,
      245: $Vs1,
      246: $Vt1,
      247: $Vu1,
      248: $Vv1,
      249: $Vw1
    }, {
      29: [1, 430]
    }, o([67, 241, 242, 243, 244, 245, 246, 247, 248, 249], $V21, {
      63: 64,
      115: 65,
      62: 222,
      89: 223,
      99: 224,
      112: 225,
      113: $VU,
      116: $Vj
    }), o($Vj1, [2, 161]), {
      16: [1, 431]
    }, o($Vj1, [2, 164]), {
      154: 432,
      176: [1, 433]
    }, {
      53: $Vy1,
      176: [2, 312],
      256: 434
    }, o($Vn1, [2, 306]), {
      15: $VH,
      22: 54,
      29: [1, 437],
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 400,
      174: $VK,
      185: 402,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      222: 399,
      226: $VP,
      235: 436,
      237: 398,
      239: 397,
      242: $Vm1
    }, o($Vz1, [2, 310]), o($Vz1, [2, 311]), {
      31: [1, 438]
    }, {
      250: 425,
      251: 409,
      253: $Vo1,
      254: $Vp1
    }, {
      15: $VH,
      22: 54,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 439,
      174: $VK,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP
    }, {
      15: $VH,
      22: 54,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 440,
      174: $VK,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP
    }, {
      15: $VH,
      22: 54,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 441,
      174: $VK,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP
    }, {
      15: $VH,
      22: 54,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 442,
      174: $VK,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP
    }, {
      15: $VH,
      22: 54,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 443,
      174: $VK,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP
    }, {
      15: $VH,
      22: 54,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 444,
      174: $VK,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP
    }, {
      15: $VH,
      22: 54,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 445,
      174: $VK,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP
    }, {
      7: $Vd1,
      88: 446,
      89: 447,
      99: 224,
      112: 225,
      113: $VU
    }, {
      29: [1, 448]
    }, {
      18: [2, 187]
    }, {
      15: $VH,
      30: $VI,
      97: 180,
      126: 186,
      127: 187,
      161: $VJ,
      174: $VK,
      185: 449,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      226: $VP
    }, o($VA1, [2, 302]), {
      31: [1, 450]
    }, o($Vx1, [2, 290]), {
      241: [1, 451]
    }, {
      214: [1, 452],
      242: [1, 453]
    }, {
      15: $VH,
      22: 54,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 400,
      174: $VK,
      185: 402,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      222: 399,
      226: $VP,
      235: 454,
      237: 398,
      239: 397,
      242: $Vm1
    }, {
      15: $VH,
      22: 54,
      29: $Vl1,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      147: 455,
      161: $VJ,
      167: 400,
      172: 456,
      174: $VK,
      179: 457,
      185: 402,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      222: 399,
      226: $VP,
      234: 394,
      235: 395,
      237: 398,
      239: 397,
      242: $Vm1
    }, o($VB1, [2, 173], {
      170: 458,
      173: [1, 459]
    }), {
      7: [1, 461],
      15: $VH,
      22: 54,
      29: $Vk1,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      150: 462,
      161: $VJ,
      167: 389,
      174: $VK,
      177: 460,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP,
      236: 386,
      237: 387
    }, {
      176: [2, 313]
    }, {
      255: [1, 463]
    }, o($VC1, [2, 304]), {
      15: $VH,
      22: 54,
      29: $Vl1,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 400,
      174: $VK,
      185: 402,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      222: 399,
      226: $VP,
      234: 464,
      235: 413,
      237: 398,
      239: 397,
      242: $Vm1
    }, {
      250: 465,
      251: 409,
      253: $Vo1,
      254: $Vp1
    }, o($Vx1, [2, 295]), o($Vx1, [2, 296]), o($Vx1, [2, 297]), o($Vx1, [2, 298]), o($Vx1, [2, 299]), o($Vx1, [2, 300]), o($Vx1, [2, 301]), {
      7: [2, 153]
    }, {
      7: $Vf1,
      63: 271,
      90: 466,
      115: 65,
      116: $Vj
    }, {
      15: $VH,
      30: $VI,
      97: 467,
      126: 186,
      127: 187,
      161: $VJ,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      226: $VP
    }, {
      7: [1, 468]
    }, {
      250: 469,
      251: 409,
      253: $Vo1,
      254: $Vp1
    }, o($Vx1, [2, 291]), o($Vx1, [2, 292]), {
      214: [1, 470]
    }, {
      31: [1, 471]
    }, {
      18: [1, 472],
      148: [1, 473]
    }, {
      7: [1, 474]
    }, {
      180: [1, 475]
    }, {
      7: [2, 176],
      171: 476,
      175: [1, 477]
    }, {
      30: [1, 479],
      174: [1, 478]
    }, o($Vn1, [2, 179]), {
      16: [1, 480]
    }, o($Vn1, [2, 181]), {
      53: $Vy1,
      176: [2, 314],
      256: 481
    }, {
      31: [1, 482]
    }, o($Vn1, [2, 307]), {
      7: [2, 154],
      91: 483,
      99: 314,
      112: 225,
      113: $VU
    }, {
      31: [1, 484]
    }, {
      15: $VH,
      18: [2, 189],
      22: 54,
      29: $Vl1,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      161: $VJ,
      167: 400,
      174: $VK,
      179: 393,
      183: 485,
      185: 402,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      222: 399,
      226: $VP,
      234: 394,
      235: 395,
      237: 398,
      239: 397,
      242: $Vm1
    }, o($VA1, [2, 303]), o($Vx1, [2, 293]), o($Vx1, [2, 294]), o($Vj1, [2, 162]), {
      15: $VH,
      30: $VI,
      97: 180,
      126: 186,
      127: 187,
      149: 486,
      161: $VJ,
      174: $VK,
      181: 488,
      184: $Vh1,
      185: 487,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      226: $VP,
      238: 489,
      240: $VD1
    }, o($VE1, [2, 171], {
      22: 54,
      97: 180,
      126: 186,
      127: 187,
      48: 236,
      114: 237,
      234: 394,
      235: 395,
      239: 397,
      237: 398,
      222: 399,
      167: 400,
      185: 402,
      172: 456,
      179: 457,
      147: 491,
      15: $VH,
      29: $Vl1,
      30: $VI,
      161: $VJ,
      174: $VK,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP,
      242: $Vm1
    }), {
      15: $VH,
      30: $VI,
      97: 180,
      126: 186,
      127: 187,
      149: 492,
      161: $VJ,
      174: $VK,
      181: 488,
      184: $Vh1,
      185: 487,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      226: $VP,
      238: 489,
      240: $VD1
    }, {
      7: [2, 170]
    }, {
      30: [1, 494],
      174: [1, 493]
    }, o($VB1, [2, 174]), o($VB1, [2, 175]), {
      15: $VH,
      22: 54,
      29: $Vk1,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      150: 462,
      161: $VJ,
      167: 389,
      174: $VK,
      177: 496,
      178: 495,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP,
      236: 386,
      237: 387
    }, {
      176: [2, 315]
    }, o($VC1, [2, 305]), {
      7: [2, 155]
    }, o($V51, [2, 157]), {
      18: [2, 190]
    }, {
      7: [1, 497]
    }, {
      7: [2, 273]
    }, {
      7: [2, 274]
    }, {
      7: [2, 275]
    }, {
      2: [1, 498]
    }, o($VE1, [2, 172]), {
      7: [2, 184]
    }, {
      7: [2, 177]
    }, {
      7: [2, 178]
    }, {
      18: [1, 499]
    }, {
      7: [1, 500]
    }, {
      18: [1, 501]
    }, {
      7: [2, 286],
      29: [1, 502]
    }, o($Vn1, [2, 180]), {
      15: $VH,
      18: [2, 182],
      22: 54,
      29: $Vk1,
      30: $VI,
      48: 236,
      97: 180,
      114: 237,
      126: 186,
      127: 187,
      150: 462,
      161: $VJ,
      167: 389,
      174: $VK,
      177: 496,
      178: 503,
      185: 235,
      212: $VL,
      213: $VM,
      214: $VN,
      215: $VO,
      216: $V7,
      217: $Vf,
      226: $VP,
      236: 386,
      237: 387
    }, o($Vj1, [2, 163]), {
      15: [1, 504],
      22: 505,
      216: $V7
    }, {
      18: [2, 183]
    }, {
      31: [1, 506]
    }, {
      31: [1, 507],
      53: [1, 508]
    }, {
      7: [2, 287]
    }, {
      7: [2, 288]
    }, {
      15: [1, 509]
    }, {
      31: [1, 510]
    }, {
      7: [2, 289]
    }],
    defaultActions: {
      2: [2, 1],
      3: [2, 2],
      19: [2, 3],
      20: [2, 6],
      21: [2, 7],
      57: [2, 67],
      62: [2, 19],
      96: [2, 196],
      142: [2, 197],
      146: [2, 16],
      147: [2, 63],
      159: [2, 266],
      172: [2, 194],
      212: [2, 229],
      220: [2, 257],
      243: [2, 268],
      255: [2, 91],
      256: [2, 108],
      262: [2, 230],
      263: [2, 261],
      276: [2, 247],
      281: [2, 253],
      284: [2, 69],
      285: [2, 81],
      305: [2, 85],
      307: [2, 210],
      311: [2, 259],
      325: [2, 132],
      326: [2, 88],
      330: [2, 263],
      331: [2, 212],
      334: [2, 249],
      335: [2, 255],
      345: [2, 141],
      346: [2, 90],
      349: [2, 144],
      350: [2, 146],
      362: [2, 148],
      368: [2, 186],
      378: [2, 150],
      390: [2, 152],
      394: [2, 269],
      423: [2, 187],
      434: [2, 313],
      446: [2, 153],
      476: [2, 170],
      481: [2, 315],
      483: [2, 155],
      485: [2, 190],
      487: [2, 273],
      488: [2, 274],
      489: [2, 275],
      492: [2, 184],
      493: [2, 177],
      494: [2, 178],
      503: [2, 183],
      506: [2, 287],
      507: [2, 288],
      510: [2, 289]
    },
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

      var args = lstack.slice.call(arguments, 1);

      //this.reductionCount = this.shiftCount = 0;

      var lexer = Object.create(this.lexer);
      var sharedState = {
        yy: {}
      };
      // copy state
      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }

      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;
      if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
      }
      var yyloc = lexer.yylloc;
      lstack.push(yyloc);

      var ranges = lexer.options && lexer.options.ranges;

      if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }

      function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
      }

      _token_stack:
        var lex = function () {
          var token;
          token = lexer.lex() || EOF;
          // if token isn't its numeric value, convert
          if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
          }
          return token;
        }

      var symbol, preErrorSymbol, state, action, a, r, yyval = {},
        p, len, newState, expected;
      while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == 'undefined') {
            symbol = lex();
          }
          // read action for current state and first input
          action = table[state] && table[state][symbol];
        }

        _handle_error:
          // handle parse error
          if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
              var stack_probe = stack.length - 1;
              var depth = 0;

              // try to recover from error
              for (;;) {
                // check for error recovery rule in this state
                if ((TERROR.toString()) in table[state]) {
                  return depth;
                }
                if (state === 0 || stack_probe < 2) {
                  return false; // No suitable error recovery rule available.
                }
                stack_probe -= 2; // popStack(1): [symbol, action]
                state = stack[stack_probe];
                ++depth;
              }
            }

            if (!recovering) {
              // first see if there's any chance at hitting an error recovery rule:
              error_rule_depth = locateNearestErrorRecoveryRule(state);

              // Report error
              expected = [];
              for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                  expected.push("'" + this.terminals_[p] + "'");
                }
              }
              if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
              } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " +
                  (symbol == EOF ? "end of input" :
                    ("'" + (this.terminals_[symbol] || symbol) + "'"));
              }
              this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected,
                recoverable: (error_rule_depth !== false)
              });
            } else if (preErrorSymbol !== EOF) {
              error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
              if (symbol === EOF || preErrorSymbol === EOF) {
                throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
              }

              // discard current lookahead and grab another
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
              symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
              throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR; // insert generic error symbol as new lookahead
            state = stack[stack.length - 1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
          }

          // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }

        switch (action[0]) {
        case 1: // shift
          //this.shiftCount++;

          stack.push(symbol);
          vstack.push(lexer.yytext);
          lstack.push(lexer.yylloc);
          stack.push(action[1]); // push state
          symbol = null;
          if (!preErrorSymbol) { // normal execution/no error
            yyleng = lexer.yyleng;
            yytext = lexer.yytext;
            yylineno = lexer.yylineno;
            yyloc = lexer.yylloc;
            if (recovering > 0) {
              recovering--;
            }
          } else {
            // error just occurred, resume old lookahead f/ before error
            symbol = preErrorSymbol;
            preErrorSymbol = null;
          }
          break;

        case 2:
          // reduce
          //this.reductionCount++;

          len = this.productions_[action[1]][1];

          // perform semantic action
          yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
          // default location, uses first token for firsts, last for lasts
          yyval._$ = {
            first_line: lstack[lstack.length - (len || 1)].first_line,
            last_line: lstack[lstack.length - 1].last_line,
            first_column: lstack[lstack.length - (len || 1)].first_column,
            last_column: lstack[lstack.length - 1].last_column
          };
          if (ranges) {
            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
          }
          r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

          if (typeof r !== 'undefined') {
            return r;
          }

          // pop off stack
          if (len) {
            stack = stack.slice(0, -1 * len * 2);
            vstack = vstack.slice(0, -1 * len);
            lstack = lstack.slice(0, -1 * len);
          }

          stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)
          vstack.push(yyval.$);
          lstack.push(yyval._$);
          // goto new state = table[STATE][NONTERMINAL]
          newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
          stack.push(newState);
          break;

        case 3:
          // accept
          return true;
        }

      }

      return true;
    }
  };

  function ParserState() {
    this.indents = [0];
    this.indent = 0;
    this.dedents = 0;
    this.eof = false;
    this.comment = false;
    this.brackets = [];
    this.parsed = {};
    this.stateStack = [];
  }

  ParserState.prototype = {
    get hasBrackets() {
      return this.brackets.length > 0;
    },

    get lastIndent() {
      return this.indents[this.indents.length - 1]
    },

    get hasIndent() {
      return this.indents.length > 0;
    },

    doIndent() {
      this.indents.push(this.indent);
    },

    doDedent() {
      this.dedents = 0;

      while (this.indents.length) {
        this.dedents++;
        this.indents.pop();
        if (this.lastIndent == this.indent) break;
      }
    },

    dedentAll() {
      this.indent = 0;
      this.dedents = this.indents.length - 1;
      this.indents = [0];
    },

    enterObject() {
      this.stateStack.push('object');
    },

    exitObject() {
      let current = this.stateStack.pop();
      if (current !== 'object') {
        throw new Error('Unmatched object bracket!');
      }
    },

    enterArray() {
      this.stateStack.push('array');
    },

    exitArray() {
      let current = this.stateStack.pop();
      if (current !== 'array') {
        throw new Error('Unmatched array bracket!');
      }
    },

    isTypeExist(type) {
      return this.parsed.type && (type in this.parsed.type);
    },

    use(namespace) {
      if (!this.parsed.namespace) {
        this.parsed.namespace = [];
      }

      this.parsed.namespace.push(namespace);
    },

    defType(type, def) {
      if (!this.parsed.type) {
        this.parsed.type = {};
      }

      this.parsed.type[type] = def;
    },

    isEntityExist(entity) {
      return this.parsed.entity && (entity in this.parsed.entity);
    },

    defEntity(entity, def) {
      if (!this.parsed.entity) {
        this.parsed.entity = {};
      }
      this.parsed.entity[entity] = Object.assign({}, this.parsed.entity[entity], def);
    },

    defRelation(relation) {
      if (!this.parsed.relation) {
        this.parsed.relation = [];
      }

      if (Object.prototype.toString.call(relation) === '[object Array]') {
        this.parsed.relation = this.parsed.relation.concat(relation);
      } else {
        this.parsed.relation.push(relation);
      }
    },

    defSchema(schema, def) {
      def.name = schema;
      this.parsed.schema = def;
    },

    validate() {
      var errors = [];

      //add validations here

      if (errors.length > 0) {
        throw new Error(errors.join("\n"));
      }

      return this;
    },

    build() {
      return this.parsed;
    }
  };

  var UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['B', 1099511627776]]);

  function parseSize(size) {
    if (UNITS.has(size.substr(-1))) {
      let unit = size.substr(-1);
      let factor = UNITS[unit];

      size = size.substr(0, size.length - 1);

      return parseInt(size) * factor;
    } else {
      return parseInt(size);
    }
  }

  function unquoteString(str, quotes) {
    return str.substr(quotes, str.length - quotes * 2);
  }

  function normalizeIdentifier(id) {
    return id[0] === '^' ? id.substr(1) : id;
  }

  function normalizeDotName(name) {
    return name.split('.').map(n => normalizeIdentifier(n.trim())).join('.');
  }

  function normalizeReference(ref) {
    return {
      oolType: 'ObjectReference',
      name: ref.substr(1)
    };
  }

  var KEYWORDS = new Set([
        "not", "and", "or", "xor", "mod", "div", "in", "is", "like", //operators
        'int', 'integer', 'number', 'text', 'bool', 'boolean', 'blob', 'binary', 'datetime', 'date', 'time', 'year', 'timestamp', 'json', 'xml', 'enum', 'csv',
        'exact', 'untrim', 'unsigned', "only", "fixedLength",
        "use", "type", "entity", "schema", "database", "relation", "default", "auto", "entities", "data",
        "with", "has", "have", "key", "index", "as", "unique", "its", "own", "for",
        "every", "may", "a", "several", "many", "great", "of", "one", "to",
        "optional", "readOnly", "fixedValue", "forceUpdate",
        "interface", "accept", "do", "select", "where", "return", "exists", "null", "otherwise", "unless", "find", "by", "case",
        "skip", "limit", "update", "create", "delete", "set", "throw", "error"
    ]);

  var BRACKET_PAIRS = {
    '}': '{',
    ']': '[',
    ')': '('
  };

  var DB_TYPES = new Set([
        "mysql", "mongodb"
    ]);

  var BUILTIN_TYPES = new Set(['int', 'float', 'decimal', 'text', 'bool', 'binary', 'datetime', 'json', 'xml', 'enum', 'csv']);

  if (typeof exports !== 'undefined') {
    exports.BUILTIN_TYPES = BUILTIN_TYPES;
    exports.KEYWORDS = KEYWORDS;
  }

  var state;
  /* generated by jison-lex 0.3.4 */
  var lexer = (function () {
    var lexer = ({

      EOF: 1,

      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },

      // resets the lexer, sets new input
      setInput: function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0
        };
        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
      },

      // consumes and returns one char from the input
      input: function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }
        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },

      // unshifts one char (or a string) into the input
      unput: function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
            (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
      },

      // When called from action, caches matched text and appends it on next action
      more: function () {
        this._more = true;
        return this;
      },

      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function () {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });

        }
        return this;
      },

      // retain first n characters of the match
      less: function (n) {
        this.unput(this.match.slice(n));
      },

      // displays already matched input, i.e. for error messages
      pastInput: function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
      },

      // displays upcoming input, i.e. for error messages
      upcomingInput: function () {
        var next = this.match;
        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }
        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
      },

      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
      },

      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function (match, indexed_rule) {
        var token,
          lines,
          backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done
          };
          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno += lines.length;
        }
        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines ?
            lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
          this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
          this.done = false;
        }
        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }
          return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
      },

      // return next match in input
      next: function () {
        if (this.done) {
          return this.EOF;
        }
        if (!this._input) {
          this.done = true;
        }

        var token,
          match,
          tempMatch,
          index;
        if (!this._more) {
          this.yytext = '';
          this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);
          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;
            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);
              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }
        if (match) {
          token = this.test_match(match, rules[index]);
          if (token !== false) {
            return token;
          }
          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
          return false;
        }
        if (this._input === "") {
          return this.EOF;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });
        }
      },

      // return next match that has a token
      lex: function lex() {
        var r = this.next();
        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },

      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },

      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },

      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
          return this.conditions["INITIAL"].rules;
        }
      },

      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return "INITIAL";
        }
      },

      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },

      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: {},
      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
        case 0:
          return 5;
          break;
        case 1: //start the program
          this.unput(yy_.yytext);
          this.begin('EMPTY');

          state = new ParserState();

          break;
        case 2:
          if (this.topState(0) === 'INLINE' && !state.comment && !state.eof) {
            this.unput(' ');

            state.eof = true;
            this.begin('EMPTY');
            return 7;

          } else if (state.indents.length > 1) {
            //reach end-of-file, but a current block still not in ending state

            //put back the eof
            this.unput(' ');

            //dedent all
            state.dedentAll();
            state.eof = true;
            this.begin('DEDENTS');

          } else {
            this.begin('INITIAL');
            return 5;
          }

          break;
        case 3:
          state.indent++;
          break;
        case 4:
          state.indent = (state.indent + 8) & -7;
          break;
        case 5:
          state.indent = 0;
          if (state.comment) state.comment = false;
          break;
        case 6:
          state.comment = true;
          break;
        case 7:
          this.unput(yy_.yytext)
            //compare the current indents with the last
          var last = state.lastIndent;
          if (state.indent > last) {
            //new indent
            state.doIndent();
            this.begin('INLINE');
            return 16;

          } else if (state.indent < last) {
            //dedent
            state.doDedent();
            if (!state.hasIndent) {
              throw new Error("Inconsistent indentation.");
            }
            this.begin('DEDENTS');

          } else {
            //same indent
            this.begin('INLINE');
          }

          break;
        case 8:
          if (state.dedents-- > 0) {
            this.unput(yy_.yytext);
            return 18;

          } else if (state.eof) {
            this.popState();

          } else {
            this.unput(yy_.yytext);
            this.begin('INLINE');
          }

          break;
        case 9:
          yy_.yytext = unquoteString(yy_.yytext, 3);
          return 15;

          break;
        case 10:
          yy_.yytext = unquoteString(yy_.yytext, 1);
          return 15;

          break;
        case 11:
          // implicit line joining
          if (!state.hasBrackets) {
            state.indent = 0;
            this.begin('EMPTY');

            if (state.comment) {
              state.comment = false;
            } else {
              return 7;
            }
          }

          break;
        case 12:
          /* skip whitespace, separate tokens */
          break;
        case 13:
          if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
            state.brackets.push(yy_.yytext);
          } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
            var paired = BRACKET_PAIRS[yy_.yytext];
            var lastBracket = state.brackets.pop();
            if (paired !== lastBracket) {
              throw new Error("Inconsistent bracket.")
            }
          }
          return yy_.yytext;

          break;
        case 14:
          return 215;
          break;
        case 15:
          yy_.yytext = parseFloat(yy_.yytext);
          return 212;

          break;
        case 16:
          yy_.yytext = parseInt(yy_.yytext);
          return 30;

          break;
        case 17:
          yy_.yytext = parseSize(yy_.yytext);
          return 30;

          break;
        case 18:
          yy_.yytext = normalizeDotName(yy_.yytext);
          return 217;

          break;
        case 19:
          yy_.yytext = normalizeReference(yy_.yytext);
          return 174;

          break;
        case 20:
          yy_.yytext = normalizeReference(yy_.yytext);
          return 255;

          break;
        case 21:
          yy_.yytext = (yy_.yytext === 'true');
          return 213;

          break;
        case 22:
          return yy_.yytext;
          break;
        case 23:
          if (KEYWORDS.has(yy_.yytext)) {
            if (state.brackets.indexOf('{') !== -1) {
              return 216;
            }

            return yy_.yytext;
          }

          yy_.yytext = normalizeIdentifier(yy_.yytext);
          return 216;

          break;
        }
      },
      rules: [/^(?:$)/, /^(?:.|\n)/, /^(?:$)/, /^(?: )/, /^(?:\t)/, /^(?:\n)/, /^(?:#.*)/, /^(?:.)/, /^(?:.|$)/, /^(?:(("""(([^\\])|(\\.))*""")|('''(([^\\])|(\\.))*''')))/, /^(?:(("(([^\\\n\"])|(\\.))*")|('(([^\\\n\'])|(\\.))*')))/, /^(?:(\n|\r\n|\r|\f))/, /^(?:( |\t)+)/, /^(?:(\(|\)|\[|\]|\{|\}))/, /^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y\b)*))/, /^(?:(((([0-9])+|((([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((([0-9])*(\.([0-9])+))|(([0-9])+\.))))/, /^(?:((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/, /^(?:(((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|B)))/, /^(?:((((_|\$|\^|(([A-Z]))|(([a-z]))))(((_|\$|\^|(([A-Z]))|(([a-z])))|([0-9])))*)\.(((_|\$|\^|(([A-Z]))|(([a-z]))))(((_|\$|\^|(([A-Z]))|(([a-z])))|([0-9])))*)+))/, /^(?:(@(((((_|\$|\^|(([A-Z]))|(([a-z]))))(((_|\$|\^|(([A-Z]))|(([a-z])))|([0-9])))*)\.(((_|\$|\^|(([A-Z]))|(([a-z]))))(((_|\$|\^|(([A-Z]))|(([a-z])))|([0-9])))*)+)|(((_|\$|\^|(([A-Z]))|(([a-z]))))(((_|\$|\^|(([A-Z]))|(([a-z])))|([0-9])))*))))/, /^(?:((((((_|\$|\^|(([A-Z]))|(([a-z]))))(((_|\$|\^|(([A-Z]))|(([a-z])))|([0-9])))*)\.(((_|\$|\^|(([A-Z]))|(([a-z]))))(((_|\$|\^|(([A-Z]))|(([a-z])))|([0-9])))*)+)|(((_|\$|\^|(([A-Z]))|(([a-z]))))(((_|\$|\^|(([A-Z]))|(([a-z])))|([0-9])))*))\.\*))/, /^(?:((true)|(false)))/, /^(?:((~|,|:|\||--|->|=>|<->|<-)|(!=|>=|<=|>|<|=)|(\+|-|\*|\/)))/, /^(?:(((_|\$|\^|(([A-Z]))|(([a-z]))))(((_|\$|\^|(([A-Z]))|(([a-z])))|([0-9])))*))/],
      conditions: {
        "INITIAL": {
          "rules": [0, 1],
          "inclusive": true
        },
        "EMPTY": {
          "rules": [2, 3, 4, 5, 6, 7],
          "inclusive": true
        },
        "DEDENTS": {
          "rules": [8],
          "inclusive": true
        },
        "INLINE": {
          "rules": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],
          "inclusive": true
        }
      }
    });
    return lexer;
  })();
  parser.lexer = lexer;

  function Parser() {
    this.yy = {};
  }
  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = oolong;
  exports.Parser = oolong.Parser;
  exports.parse = function () {
    return oolong.parse.apply(oolong, arguments);
  };
  exports.main = function commonjsMain(args) {
    if (!args[1]) {
      console.log('Usage: ' + args[0] + ' FILE');
      process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
  };
  if (typeof module !== 'undefined' && require.main === module) {
    exports.main(process.argv.slice(1));
  }
}