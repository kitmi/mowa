/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
"use strict";

var oolong = (function () {
  var o = function (k, v, o, l) {
      for (o = o || {}, l = k.length; l--; o[k[l]] = v);
      return o
    },
    $V0 = [1, 5],
    $V1 = [1, 14],
    $V2 = [1, 15],
    $V3 = [1, 22],
    $V4 = [1, 20],
    $V5 = [1, 17],
    $V6 = [1, 19],
    $V7 = [1, 18],
    $V8 = [5, 7, 16, 21, 70, 186, 203, 212, 219],
    $V9 = [1, 31],
    $Va = [1, 35],
    $Vb = [1, 41],
    $Vc = [1, 43],
    $Vd = [1, 44],
    $Ve = [2, 22],
    $Vf = [1, 53],
    $Vg = [7, 28, 56, 69, 98, 114, 115, 116, 117, 118, 120, 124, 125, 126, 212, 217, 230, 261],
    $Vh = [1, 64],
    $Vi = [17, 51, 249],
    $Vj = [7, 69],
    $Vk = [1, 68],
    $Vl = [1, 75],
    $Vm = [7, 98, 114, 115, 116, 117, 118, 120, 124],
    $Vn = [1, 97],
    $Vo = [20, 85, 88, 127, 131, 133, 136],
    $Vp = [1, 110],
    $Vq = [1, 111],
    $Vr = [1, 112],
    $Vs = [1, 113],
    $Vt = [7, 32, 34, 56, 69, 88, 117, 118, 120, 124, 170, 180, 190, 192, 196, 217, 239, 240, 261, 275, 276, 278, 279, 280, 281, 282, 283, 284, 288, 289],
    $Vu = [7, 34, 56, 69, 117, 120, 170, 180, 261, 275, 276, 278, 279, 280, 281, 282, 283, 284, 288, 289],
    $Vv = [2, 45],
    $Vw = [1, 126],
    $Vx = [7, 32, 54, 98, 114, 115, 116, 117, 118, 120, 124],
    $Vy = [7, 36, 98, 114, 115, 116, 117, 118, 120, 124],
    $Vz = [7, 32, 98, 114, 115, 116, 117, 118, 120, 124],
    $VA = [20, 88, 127, 131, 133, 136],
    $VB = [51, 249],
    $VC = [7, 34, 56, 69, 117, 120, 124, 170, 180, 261, 275, 276, 278, 279, 280, 281, 282, 283, 284, 288, 289],
    $VD = [1, 158],
    $VE = [1, 169],
    $VF = [20, 127, 131, 133, 136],
    $VG = [7, 190, 192],
    $VH = [1, 203],
    $VI = [1, 197],
    $VJ = [1, 204],
    $VK = [1, 198],
    $VL = [1, 199],
    $VM = [1, 202],
    $VN = [1, 196],
    $VO = [1, 205],
    $VP = [20, 131, 133, 136],
    $VQ = [2, 152],
    $VR = [1, 227],
    $VS = [1, 234],
    $VT = [7, 34, 56, 69, 170, 180, 261, 275, 276, 278, 279, 280, 281, 282, 283, 284, 288, 289],
    $VU = [1, 239],
    $VV = [7, 34, 56, 69, 120, 124, 170, 180, 182, 261, 275, 276, 278, 279, 280, 281, 282, 283, 284, 288, 289],
    $VW = [1, 244],
    $VX = [20, 133, 136],
    $VY = [20, 234, 237, 242, 243],
    $VZ = [20, 151, 232, 234, 237, 242, 243],
    $V_ = [1, 286],
    $V$ = [7, 230],
    $V01 = [1, 290],
    $V11 = [7, 34, 56, 69, 117, 124, 170, 180, 261, 275, 276, 278, 279, 280, 281, 282, 283, 284, 288, 289],
    $V21 = [1, 300],
    $V31 = [1, 305],
    $V41 = [20, 136],
    $V51 = [7, 117, 120, 124],
    $V61 = [1, 325],
    $V71 = [1, 327],
    $V81 = [1, 328],
    $V91 = [1, 329],
    $Va1 = [1, 326],
    $Vb1 = [7, 117],
    $Vc1 = [1, 338],
    $Vd1 = [34, 56],
    $Ve1 = [20, 237, 242, 243],
    $Vf1 = [7, 120, 124],
    $Vg1 = [1, 351],
    $Vh1 = [7, 28, 98, 120, 124],
    $Vi1 = [1, 369],
    $Vj1 = [2, 163],
    $Vk1 = [7, 117, 118],
    $Vl1 = [20, 242, 243],
    $Vm1 = [1, 390],
    $Vn1 = [1, 394],
    $Vo1 = [56, 170],
    $Vp1 = [20, 243],
    $Vq1 = [7, 180],
    $Vr1 = [1, 430],
    $Vs1 = [1, 431],
    $Vt1 = [7, 34, 180, 288, 289],
    $Vu1 = [1, 465],
    $Vv1 = [7, 56],
    $Vw1 = [7, 34, 180],
    $Vx1 = [17, 32, 33, 51, 168, 246, 247, 248, 249, 255, 260, 276],
    $Vy1 = [1, 526],
    $Vz1 = [1, 529],
    $VA1 = [20, 184],
    $VB1 = [20, 151, 184],
    $VC1 = [1, 562],
    $VD1 = [20, 156];
  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      "error": 2,
      "program": 3,
      "input": 4,
      "EOF": 5,
      "input0": 6,
      "NEWLINE": 7,
      "statement": 8,
      "use_statement": 9,
      "type_statement": 10,
      "entity_statement": 11,
      "schema_statement": 12,
      "view_statement": 13,
      "document_statement": 14,
      "relation_statement": 15,
      "import": 16,
      "STRING": 17,
      "INDENT": 18,
      "use_statement_block": 19,
      "DEDENT": 20,
      "type": 21,
      "type_statement_item": 22,
      "type_statement_block": 23,
      "identifier": 24,
      "type_base_or_not": 25,
      "type_validators0_or_not": 26,
      "type_base": 27,
      ":": 28,
      "types": 29,
      "int_keyword": 30,
      "unsigned_or_not": 31,
      "(": 32,
      "INTEGER": 33,
      ")": 34,
      "number_type": 35,
      "exact": 36,
      "text_type": 37,
      "bool_keyword": 38,
      "binary_type": 39,
      "datetime": 40,
      "date": 41,
      "only": 42,
      "time": 43,
      "year": 44,
      "timestamp": 45,
      "json": 46,
      "xml": 47,
      "csv": 48,
      "identifier_or_str_array": 49,
      "identifier_or_string": 50,
      "DOTNAME": 51,
      "int": 52,
      "integer": 53,
      "unsigned": 54,
      "number": 55,
      ",": 56,
      "text": 57,
      "fixedLength": 58,
      "bool": 59,
      "boolean": 60,
      "binary_keyword": 61,
      "blob": 62,
      "binary": 63,
      "type_validators0": 64,
      "type_validators": 65,
      "entity_statement_header": 66,
      "entity_statement_block": 67,
      "entity_statement_header0": 68,
      "is": 69,
      "entity": 70,
      "comment_or_not": 71,
      "with_stmt_or_not": 72,
      "has_stmt_or_not": 73,
      "key_stmt_or_not": 74,
      "index_stmt_or_not": 75,
      "data_stmt_or_not": 76,
      "interface_stmt_or_not": 77,
      "comment": 78,
      "with_stmt": 79,
      "has_stmt": 80,
      "key_stmt": 81,
      "index_stmt": 82,
      "data_stmt": 83,
      "interface_stmt": 84,
      "with": 85,
      "feature_inject": 86,
      "with_stmt_block": 87,
      "has": 88,
      "has_stmt_itm": 89,
      "has_stmt_block": 90,
      "has_stmt_item_body": 91,
      "field_comment_or_not": 92,
      "field_qualifiers_or_not": 93,
      "with_validators_modifiers": 94,
      "field_reference": 95,
      "optional_qualifier_or_not": 96,
      "concrete_default_value": 97,
      "default": 98,
      "literal": 99,
      "default_value": 100,
      "auto": 101,
      "field_qualifiers": 102,
      "field_modifiers0_or_not": 103,
      "field_modifiers0": 104,
      "variable_modifiers": 105,
      "field_validators1_or_not": 106,
      "field_validators1": 107,
      "field_modifiers1_or_not": 108,
      "field_modifiers1": 109,
      "variable_modifier_or_not": 110,
      "optional_qualifier": 111,
      "field_qualifier": 112,
      "field_restriction": 113,
      "readOnly": 114,
      "fixedValue": 115,
      "forceUpdate": 116,
      "--": 117,
      "optional": 118,
      "variable_modifier": 119,
      "|": 120,
      "identifier_or_member_access": 121,
      "function_call": 122,
      "type_validator": 123,
      "~": 124,
      "->": 125,
      "<->": 126,
      "key": 127,
      "index_stmt_itm": 128,
      "index_qualifiers": 129,
      "unique": 130,
      "index": 131,
      "index_stmt_blk": 132,
      "data": 133,
      "inline_object": 134,
      "inline_array": 135,
      "interface": 136,
      "interface_stmt_blk": 137,
      "interface_def": 138,
      "interface_def_body": 139,
      "accept_or_not": 140,
      "implementation": 141,
      "return_or_not": 142,
      "accept_statement": 143,
      "accept": 144,
      "parameter_with_modifier": 145,
      "accept_block": 146,
      "parameter": 147,
      "with_type_default_value": 148,
      "operation": 149,
      "find_one_operation": 150,
      "find": 151,
      "one": 152,
      "by": 153,
      "case": 154,
      "case_condition_block": 155,
      "otherwise": 156,
      "condition_as_result_expression": 157,
      "conditional_expression": 158,
      "update_operation": 159,
      "update": 160,
      "where_expr": 161,
      "create_operation": 162,
      "create": 163,
      "delete_operation": 164,
      "delete": 165,
      "coding_block": 166,
      "do": 167,
      "{": 168,
      "javascript": 169,
      "}": 170,
      "assign_operation": 171,
      "set": 172,
      "<-": 173,
      "value": 174,
      "simple_conditional_arrow_expr": 175,
      "where": 176,
      "where_expr_condition": 177,
      "where_expr_condition_blk": 178,
      "query_condition_expression": 179,
      "=>": 180,
      "return_expression": 181,
      "unless": 182,
      "return_condition_blk": 183,
      "return": 184,
      "concrete_value": 185,
      "relation": 186,
      "relation_statement_itm": 187,
      "relation_statement_blk": 188,
      "relation_statement_itm0": 189,
      "to": 190,
      "related_entity": 191,
      "for": 192,
      "indefinite_article": 193,
      "relation_qualifier": 194,
      "every": 195,
      "may": 196,
      "have": 197,
      "several": 198,
      "many": 199,
      "a": 200,
      "great": 201,
      "of": 202,
      "schema": 203,
      "schema_statement_block": 204,
      "schema_entities": 205,
      "schema_views_or_not": 206,
      "schema_views": 207,
      "entities": 208,
      "schema_entities_block": 209,
      "views": 210,
      "schema_views_block": 211,
      "document": 212,
      "document_statement_block": 213,
      "contains": 214,
      "document_statement_block2": 215,
      "document_entity_join": 216,
      "being": 217,
      "which": 218,
      "view": 219,
      "view_statement_block": 220,
      "view_main_entity": 221,
      "view_selection_or_not": 222,
      "group_by_or_not": 223,
      "order_by_or_not": 224,
      "skip_or_not": 225,
      "limit_or_not": 226,
      "view_joinings_or_not": 227,
      "view_joinings": 228,
      "view_entity_target": 229,
      "list": 230,
      "view_selection": 231,
      "select": 232,
      "view_selection_block": 233,
      "group": 234,
      "order_by_list": 235,
      "order_by_block": 236,
      "order": 237,
      "order_by_clause": 238,
      "asc": 239,
      "desc": 240,
      "order_by_list0": 241,
      "skip": 242,
      "limit": 243,
      "identifier_or_member_access_list": 244,
      "identifier_or_member_access_list0": 245,
      "FLOAT": 246,
      "BOOL": 247,
      "REGEXP": 248,
      "NAME": 249,
      "an": 250,
      "modifiable_value_list": 251,
      "feature_param_list": 252,
      "feature_param": 253,
      "modifiable_value": 254,
      "REFERENCE": 255,
      "concrete_value_expression": 256,
      "kv_pairs": 257,
      "kv_pair_itm": 258,
      "kv_pairs0": 259,
      "[": 260,
      "]": 261,
      "value_list": 262,
      "value_list0": 263,
      "modifiable_value_list0": 264,
      "feature_param_list0": 265,
      "identifier_or_str_list": 266,
      "identifier_or_str_list0": 267,
      "logical_expression": 268,
      "simple_expression": 269,
      "logical_query_expression": 270,
      "binary_expression": 271,
      "throw_error_expression": 272,
      "unary_expression": 273,
      "throw": 274,
      "exists": 275,
      "not": 276,
      "null": 277,
      ">": 278,
      "<": 279,
      ">=": 280,
      "<=": 281,
      "=": 282,
      "!=": 283,
      "in": 284,
      "logical_expression_right": 285,
      "logical_operators": 286,
      "logical_query_expression_right": 287,
      "and": 288,
      "or": 289,
      "column_range_list": 290,
      "COLUMNS": 291,
      "column_range_list0": 292,
      "$accept": 0,
      "$end": 1
    },
    terminals_: {
      2: "error",
      5: "EOF",
      7: "NEWLINE",
      16: "import",
      17: "STRING",
      18: "INDENT",
      20: "DEDENT",
      21: "type",
      28: ":",
      32: "(",
      33: "INTEGER",
      34: ")",
      36: "exact",
      40: "datetime",
      41: "date",
      42: "only",
      43: "time",
      44: "year",
      45: "timestamp",
      46: "json",
      47: "xml",
      48: "csv",
      51: "DOTNAME",
      52: "int",
      53: "integer",
      54: "unsigned",
      55: "number",
      56: ",",
      57: "text",
      58: "fixedLength",
      59: "bool",
      60: "boolean",
      62: "blob",
      63: "binary",
      69: "is",
      70: "entity",
      78: "comment",
      85: "with",
      88: "has",
      98: "default",
      101: "auto",
      114: "readOnly",
      115: "fixedValue",
      116: "forceUpdate",
      117: "--",
      118: "optional",
      120: "|",
      124: "~",
      125: "->",
      126: "<->",
      127: "key",
      130: "unique",
      131: "index",
      133: "data",
      136: "interface",
      144: "accept",
      151: "find",
      152: "one",
      153: "by",
      154: "case",
      156: "otherwise",
      160: "update",
      163: "create",
      165: "delete",
      167: "do",
      168: "{",
      169: "javascript",
      170: "}",
      172: "set",
      173: "<-",
      176: "where",
      180: "=>",
      182: "unless",
      184: "return",
      186: "relation",
      190: "to",
      192: "for",
      195: "every",
      196: "may",
      197: "have",
      198: "several",
      199: "many",
      200: "a",
      201: "great",
      202: "of",
      203: "schema",
      208: "entities",
      210: "views",
      212: "document",
      214: "contains",
      217: "being",
      218: "which",
      219: "view",
      228: "view_joinings",
      230: "list",
      232: "select",
      234: "group",
      237: "order",
      239: "asc",
      240: "desc",
      242: "skip",
      243: "limit",
      246: "FLOAT",
      247: "BOOL",
      248: "REGEXP",
      249: "NAME",
      250: "an",
      255: "REFERENCE",
      260: "[",
      261: "]",
      274: "throw",
      275: "exists",
      276: "not",
      277: "null",
      278: ">",
      279: "<",
      280: ">=",
      281: "<=",
      282: "=",
      283: "!=",
      284: "in",
      288: "and",
      289: "or",
      291: "COLUMNS"
    },
    productions_: [0, [3, 1], [4, 1], [4, 2], [6, 1], [6, 1], [6, 2], [6, 2], [8, 1], [8, 1], [8, 1], [8, 1], [8, 1], [8, 1], [8, 1], [9, 3], [9, 5], [19, 2], [19, 3], [10, 3], [10, 5], [22, 3], [25, 0], [25, 1], [27, 2], [29, 2], [29, 5], [29, 1], [29, 2], [29, 1], [29, 1], [29, 1], [29, 1], [29, 3], [29, 3], [29, 3], [29, 1], [29, 1], [29, 1], [29, 1], [29, 1], [29, 1], [29, 1], [30, 1], [30, 1], [31, 0], [31, 1], [35, 1], [35, 4], [35, 5], [35, 6], [37, 1], [37, 4], [37, 5], [38, 1], [38, 1], [39, 1], [39, 4], [39, 5], [61, 1], [61, 1], [26, 0], [26, 1], [64, 1], [23, 2], [23, 3], [11, 2], [11, 5], [66, 1], [66, 3], [68, 2], [67, 7], [71, 0], [71, 3], [72, 0], [72, 1], [73, 0], [73, 1], [74, 0], [74, 1], [75, 0], [75, 1], [76, 0], [76, 1], [77, 0], [77, 1], [79, 3], [79, 5], [87, 2], [87, 3], [80, 3], [80, 5], [89, 2], [91, 4], [91, 3], [97, 4], [100, 1], [100, 4], [93, 0], [93, 1], [103, 0], [103, 1], [104, 1], [106, 0], [106, 1], [107, 1], [108, 0], [108, 1], [109, 1], [110, 0], [110, 1], [96, 0], [96, 1], [102, 1], [102, 2], [113, 1], [113, 1], [113, 1], [92, 0], [92, 2], [112, 1], [112, 1], [112, 1], [111, 1], [105, 1], [105, 2], [119, 2], [119, 2], [65, 1], [65, 2], [123, 2], [123, 2], [95, 2], [95, 2], [90, 2], [90, 3], [81, 3], [128, 1], [128, 1], [128, 2], [129, 2], [82, 3], [82, 5], [132, 2], [132, 3], [83, 3], [83, 3], [84, 5], [137, 1], [137, 2], [138, 5], [139, 3], [140, 0], [140, 1], [143, 3], [143, 5], [146, 2], [146, 3], [145, 3], [148, 0], [148, 1], [148, 1], [148, 2], [94, 0], [94, 1], [94, 1], [94, 2], [94, 2], [94, 3], [94, 3], [94, 4], [141, 1], [141, 2], [149, 1], [150, 9], [150, 12], [150, 6], [159, 6], [162, 5], [164, 4], [166, 5], [171, 6], [155, 2], [155, 3], [161, 2], [161, 5], [177, 1], [178, 2], [178, 3], [175, 3], [142, 0], [142, 2], [142, 6], [181, 2], [183, 4], [183, 5], [15, 3], [15, 5], [188, 2], [188, 3], [187, 1], [187, 3], [187, 4], [191, 2], [189, 4], [189, 5], [194, 1], [194, 1], [194, 1], [194, 4], [12, 6], [204, 2], [206, 0], [206, 1], [205, 5], [209, 2], [209, 3], [207, 5], [211, 2], [211, 3], [14, 6], [213, 3], [213, 4], [215, 3], [215, 4], [216, 3], [216, 7], [13, 6], [220, 8], [227, 0], [227, 1], [221, 3], [221, 4], [229, 1], [229, 2], [222, 0], [222, 1], [231, 4], [231, 6], [233, 2], [233, 3], [223, 0], [223, 4], [223, 6], [224, 0], [224, 4], [224, 6], [236, 2], [236, 3], [238, 1], [238, 2], [238, 2], [235, 1], [235, 2], [241, 2], [241, 3], [225, 0], [225, 3], [226, 0], [226, 3], [244, 1], [244, 2], [245, 2], [245, 3], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [99, 1], [24, 1], [193, 1], [193, 1], [121, 1], [121, 1], [147, 1], [147, 1], [122, 3], [122, 4], [86, 1], [86, 3], [86, 4], [253, 1], [253, 1], [174, 1], [174, 1], [174, 1], [185, 1], [185, 1], [254, 1], [254, 1], [50, 1], [50, 1], [134, 2], [134, 3], [258, 3], [258, 3], [257, 1], [257, 2], [259, 2], [259, 3], [135, 2], [135, 3], [262, 1], [262, 2], [263, 2], [263, 3], [251, 1], [251, 2], [264, 2], [264, 3], [252, 1], [252, 2], [265, 2], [265, 3], [49, 3], [266, 1], [266, 2], [267, 2], [267, 3], [158, 1], [158, 1], [179, 1], [179, 1], [157, 1], [157, 1], [157, 1], [269, 1], [269, 1], [269, 1], [256, 2], [256, 2], [256, 3], [256, 3], [256, 4], [256, 4], [256, 5], [272, 2], [272, 5], [272, 5], [272, 7], [273, 2], [273, 3], [273, 3], [273, 4], [273, 4], [271, 3], [271, 3], [271, 3], [271, 3], [271, 3], [271, 3], [271, 3], [268, 2], [268, 4], [285, 2], [285, 4], [270, 2], [270, 4], [287, 2], [287, 4], [286, 1], [286, 1], [290, 1], [290, 2], [292, 2], [292, 3]],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */ , $$ /* vstack */ , _$ /* lstack */ ) {
      /* this == yyval */

      var $0 = $$.length - 1;
      switch (yystate) {
      case 1:

        var r = state;
        state = null;
        return r ? r.validate().build() : '';

        break;
      case 15:
      case 17:
        state.use($$[$0 - 1]);
        break;
      case 18:
        state.use($$[$0 - 2]);
        break;
      case 21:

        var n = $$[$0 - 2];
        if (state.isTypeExist(n)) throw new Error('Duplicate type definition detected at line ' + _$[$0 - 2].first_line + '.');
        if (BUILTIN_TYPES.has(n)) throw new Error('Cannot use built-in type "' + n + '" as a custom type name at line ' + _$[$0 - 2].first_line + '.');

        state.defType(n, Object.assign({
          type: 'text'
        }, $$[$0 - 1], $$[$0]));

        break;
      case 24:
      case 231:
        this.$ = $$[$0];
        break;
      case 25:
        this.$ = Object.assign({
          type: 'int'
        }, $$[$0]);
        break;
      case 26:
        this.$ = Object.assign({
          type: 'int',
          digits: parseInt($$[$0 - 2])
        }, $$[$0]);
        break;
      case 27:
        this.$ = Object.assign({
          type: 'float'
        }, $$[$0]);
        break;
      case 28:
        this.$ = Object.assign({
          type: 'decimal'
        }, $$[$0 - 1]);
        break;
      case 30:
        this.$ = {
          type: 'bool'
        };
        break;
      case 32:
        this.$ = {
          type: 'datetime',
          range: 'datetime'
        };
        break;
      case 33:
        this.$ = {
          type: 'datetime',
          range: 'date'
        };
        break;
      case 34:
        this.$ = {
          type: 'datetime',
          range: 'time'
        };
        break;
      case 35:
        this.$ = {
          type: 'datetime',
          range: 'year'
        };
        break;
      case 36:
        this.$ = {
          type: 'datetime',
          range: 'timestamp'
        };
        break;
      case 37:
        this.$ = {
          type: 'json'
        };
        break;
      case 38:
        this.$ = {
          type: 'xml'
        };
        break;
      case 39:
        this.$ = {
          type: 'csv'
        };
        break;
      case 40:
        this.$ = {
          type: 'enum',
          values: $$[$0]
        };
        break;
      case 41:
      case 42:
        this.$ = {
          type: $$[$0]
        };
        break;
      case 46:
        this.$ = {
          unsigned: true
        };
        break;
      case 47:
      case 294:
        this.$ = {};
        break;
      case 48:
        this.$ = {
          totalDigits: parseInt($$[$0 - 1])
        };
        break;
      case 49:
        this.$ = {
          decimalDigits: parseInt($$[$0 - 1])
        };
        break;
      case 50:
        this.$ = {
          totalDigits: parseInt($$[$0 - 3]),
          decimalDigits: parseInt($$[$0 - 1])
        };
        break;
      case 51:
        this.$ = {
          type: 'text'
        };
        break;
      case 52:
        this.$ = {
          type: 'text',
          maxLength: parseInt($$[$0 - 1])
        };
        break;
      case 53:
        this.$ = {
          type: 'text',
          fixedLength: parseInt($$[$0 - 2])
        };
        break;
      case 56:
        this.$ = {
          type: 'binary'
        };
        break;
      case 57:
        this.$ = {
          type: 'binary',
          maxLength: $$[$0 - 1]
        };
        break;
      case 58:
        this.$ = {
          type: 'binary',
          fixedLength: $$[$0 - 2]
        };
        break;
      case 63:
        this.$ = {
          validators0: $$[$0].validators
        };
        break;
      case 66:
        this.$ = state.defEntity($$[$0 - 1][0], $$[$0 - 1][1]);
        break;
      case 67:
        this.$ = state.defEntity($$[$0 - 4][0], Object.assign({}, $$[$0 - 4][1], $$[$0 - 1]));
        break;
      case 68:
      case 252:
      case 254:
      case 260:
      case 262:
        this.$ = [$$[$0]];
        break;
      case 69:
        this.$ = [$$[$0 - 2], {
          base: $$[$0]
        }];
        break;
      case 70:

        if (state.isEntityExist($$[$0])) throw new Error('Duplicate entity definition detected at line ' + _$[$0 - 1].first_line + '.');
        this.$ = $$[$0];

        break;
      case 71:
        this.$ = Object.assign({}, $$[$0 - 6], $$[$0 - 5], $$[$0 - 4], $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 73:
        this.$ = {
          comment: $$[$0 - 1]
        };
        break;
      case 86:
        this.$ = {
          features: [$$[$0 - 1]]
        };
        break;
      case 87:
        this.$ = {
          features: $$[$0 - 1]
        };
        break;
      case 88:
      case 156:
      case 215:
      case 218:
      case 223:
      case 239:
      case 247:
        this.$ = [$$[$0 - 1]];
        break;
      case 89:
      case 157:
      case 216:
      case 219:
      case 224:
      case 240:
      case 248:
        this.$ = [$$[$0 - 2]].concat($$[$0]);
        break;
      case 90:
        this.$ = {
          fields: {
            [$$[$0 - 1][0]]: $$[$0 - 1][1]
          }
        };
        break;
      case 91:
        this.$ = {
          fields: $$[$0 - 1]
        };
        break;
      case 92:
        $$[$0 - 1][1] = Object.assign({}, $$[$0 - 1][1], $$[$0]);
        break;
      case 93:
        this.$ = [$$[$0 - 3], Object.assign({
          type: $$[$0 - 3]
        }, $$[$0 - 2], $$[$0 - 1], $$[$0])];
        break;
      case 94:
        this.$ = [$$[$0 - 2], Object.assign({}, $$[$0 - 1], $$[$0])];
        break;
      case 95:
        this.$ = {
          'default': $$[$0 - 1]
        };
        break;
      case 97:
        this.$ = {
          auto: true
        };
        break;
      case 102:
        this.$ = {
          modifiers0: $$[$0].modifiers
        };
        break;
      case 105:
        this.$ = {
          validators1: $$[$0].validators
        };
        break;
      case 108:
        this.$ = {
          modifiers1: $$[$0].modifiers
        };
        break;
      case 114:

        for (var k in $$[$0]) {
          if (k in $$[$0 - 1]) {
            throw new Error('Duplicate field qualifier detected at line ' + _$[$0 - 1].first_line + '.');
          }
        }
        this.$ = Object.assign({}, $$[$0 - 1], $$[$0]);

        break;
      case 115:
        this.$ = {
          readOnly: true
        };
        break;
      case 116:
        this.$ = {
          fixedValue: true
        };
        break;
      case 117:
        this.$ = {
          forceUpdate: true
        };
        break;
      case 119:
        this.$ = {
          comment: $$[$0]
        };
        break;
      case 123:
        this.$ = {
          optional: true
        };
        break;
      case 124:
        this.$ = {
          modifiers: [$$[$0]]
        };
        break;
      case 125:

        this.$ = {
          modifiers: [$$[$0 - 1]].concat($$[$0].modifiers)
        };

        break;
      case 126:
      case 276:
      case 277:
      case 280:
        this.$ = {
          name: $$[$0]
        };
        break;
      case 127:
      case 184:
      case 300:
      case 308:
      case 312:
        this.$ = $$[$0];
        break;
      case 129:
        this.$ = {
          validators: $$[$0 - 1].validators.concat($$[$0].validators)
        };
        break;
      case 130:
        this.$ = {
          validators: [{
            name: $$[$0]
          }]
        };
        break;
      case 131:
        this.$ = {
          validators: [$$[$0]]
        };
        break;
      case 132:
        this.$ = {
          belongTo: $$[$0]
        };
        break;
      case 133:
        this.$ = {
          bindTo: $$[$0]
        };
        break;
      case 134:
        this.$ = {
          [$$[$0 - 1][0]]: $$[$0 - 1][1]
        };
        break;
      case 135:
        this.$ = Object.assign({}, {
          [$$[$0 - 2][0]]: $$[$0 - 2][1]
        }, $$[$0]);
        break;
      case 136:
        this.$ = {
          key: $$[$0 - 1]
        };
        break;
      case 137:
      case 138:
        this.$ = {
          fields: $$[$0]
        };
        break;
      case 139:
      case 149:
      case 299:
      case 301:
        this.$ = Object.assign({}, $$[$0 - 1], $$[$0]);
        break;
      case 140:
        this.$ = {
          unique: true
        };
        break;
      case 141:
        this.$ = {
          indexes: [$$[$0 - 1]]
        };
        break;
      case 142:
        this.$ = {
          indexes: $$[$0 - 1]
        };
        break;
      case 143:
        this.$ = [$$[$0 - 1]];
        break;
      case 144:
        this.$ = [$$[$0 - 2]].concat($$[$0]);
        break;
      case 145:
      case 146:
        this.$ = {
          data: $$[$0 - 1]
        };
        break;
      case 147:
        this.$ = {
          interface: $$[$0 - 1]
        };
        break;
      case 148:
        this.$ = Object.assign({}, $$[$0]);
        break;
      case 150:
        this.$ = {
          [$$[$0 - 4]]: $$[$0 - 1]
        };
        break;
      case 151:
        this.$ = Object.assign({}, $$[$0 - 2], {
          implementation: $$[$0 - 1]
        }, $$[$0]);
        break;
      case 154:
        this.$ = {
          accept: [$$[$0 - 1]]
        };
        break;
      case 155:
        this.$ = {
          accept: $$[$0 - 1]
        };
        break;
      case 158:
        this.$ = Object.assign($$[$0 - 2], {
          type: $$[$0 - 2].name
        }, $$[$0 - 1], $$[$0]);
        break;
      case 162:
      case 166:
      case 167:
      case 211:
        this.$ = Object.assign({}, $$[$0 - 1], $$[$0]);
        break;
      case 168:
      case 169:
        this.$ = Object.assign({}, $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 170:
        this.$ = Object.assign({}, $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 171:
      case 304:
      case 306:
      case 310:
      case 314:
      case 317:
      case 319:
      case 364:
      case 366:
        this.$ = [$$[$0]];
        break;
      case 172:
      case 318:
      case 365:
        this.$ = [$$[$0 - 1]].concat($$[$0]);
        break;
      case 174:
        this.$ = {
          oolType: 'findOne',
          model: $$[$0 - 6],
          case: {
            items: $$[$0 - 1]
          }
        };
        break;
      case 175:
        this.$ = {
          oolType: 'findOne',
          model: $$[$0 - 9],
          case: {
            items: $$[$0 - 4],
            else: $$[$0 - 2]
          }
        };
        break;
      case 176:
        this.$ = {
          oolType: 'findOne',
          model: $$[$0 - 3],
          condition: $$[$0 - 1]
        };
        break;
      case 177:
        this.$ = {
          oolType: 'update',
          target: $$[$0 - 4],
          data: $$[$0 - 2],
          filter: $$[$0 - 1]
        };
        break;
      case 178:
        this.$ = {
          oolType: 'create',
          target: $$[$0 - 3],
          data: $$[$0 - 1]
        };
        break;
      case 179:
        this.$ = {
          oolType: 'delete',
          target: $$[$0 - 2],
          filter: $$[$0 - 1]
        };
        break;
      case 180:
        this.$ = {
          oolType: 'javascript',
          script: $$[$0 - 2]
        };
        break;
      case 181:
        this.$ = {
          oolType: 'assignment',
          left: $$[$0 - 4],
          right: Object.assign({
            argument: $$[$0 - 2]
          }, $$[$0 - 1])
        };
        break;
      case 182:
      case 187:
      case 198:
        this.$ = [$$[$0 - 1]];
        break;
      case 183:
      case 188:
      case 199:
        this.$ = [$$[$0 - 2]].concat($$[$0]);
        break;
      case 185:
      case 295:
      case 303:
      case 316:
        this.$ = $$[$0 - 1];
        break;
      case 189:
        this.$ = {
          oolType: 'ConditionalStatement',
          test: $$[$0 - 2],
          then: $$[$0]
        }
        break;
      case 191:
        this.$ = {
          return: $$[$0 - 1]
        };
        break;
      case 192:
        this.$ = {
          return: Object.assign($$[$0 - 5], {
            exceptions: $$[$0 - 1]
          })
        };
        break;
      case 193:
        this.$ = {
          oolType: 'ReturnExpression',
          value: $$[$0]
        };
        break;
      case 194:
        this.$ = {
          oolType: 'ConditionalStatement',
          test: $$[$0 - 3],
          then: $$[$0 - 1]
        }
        break;
      case 195:
        this.$ = [{
          oolType: 'ConditionalStatement',
          test: $$[$0 - 4],
          then: $$[$0 - 2]
        }].concat($$[$0]);
        break;
      case 196:
      case 197:
        state.defRelation($$[$0 - 1]);
        break;
      case 201:

        if ($$[$0 - 2].right === $$[$0].right) {
          throw new Error('Invalid relation declaration at line ' + _$[$0 - 2].first_line + '.');
        }
        let right2 = {
          relationship: $$[$0 - 2].relationship,
          size: $$[$0 - 2].size
        };
        let right1Name = $$[$0].right;
        delete $$[$0].right;

        this.$ = Object.assign({}, $$[$0 - 2], {
          right: {
            [right1Name]: $$[$0],
            [$$[$0 - 2].right]: right2
          },
          type: 'chain'
        });
        delete this.$.relationship;
        delete this.$.size;

        break;
      case 202:

        let right1Name2 = $$[$0 - 3].left;
        let right2Name2 = $$[$0];

        this.$ = Object.assign({}, $$[$0 - 3], {
          relationship: $$[$0 - 3].relationship.replace('n:', '1:')
        }, {
          left: $$[$0 - 3].right,
          right: [right1Name2, right2Name2],
          type: 'multi'
        });

        break;
      case 203:
        this.$ = Object.assign({}, $$[$0 - 1], {
          right: $$[$0]
        });
        break;
      case 204:
      case 355:
      case 359:
        this.$ = Object.assign({
          left: $$[$0 - 2]
        }, $$[$0]);
        break;
      case 205:
        this.$ = Object.assign({
          left: $$[$0 - 3],
          optional: true
        }, $$[$0]);
        break;
      case 206:
        this.$ = {
          relationship: 'n:1',
          size: 'one'
        };
        break;
      case 207:
        this.$ = {
          relationship: 'n:n',
          size: 'small'
        };
        break;
      case 208:
        this.$ = {
          relationship: 'n:n',
          size: 'medium'
        };
        break;
      case 209:
        this.$ = {
          relationship: 'n:n',
          size: 'large'
        };
        break;
      case 210:

        if (state.parsed.schema) throw new Error('Only one schema definition allowed in a schema file. Extra schema definition detected at line ' + _$[$0 - 5].first_line + '.');
        state.defSchema($$[$0 - 4], $$[$0 - 1]);

        break;
      case 214:
        this.$ = {
          entities: $$[$0 - 1]
        };
        break;
      case 217:
        this.$ = {
          views: $$[$0 - 1]
        };
        break;
      case 220:
        this.$ = state.defDocument($$[$0 - 4], $$[$0 - 1]);
        break;
      case 221:
        this.$ = {
          entity: $$[$0 - 1]
        };
        break;
      case 222:
        this.$ = {
          entity: $$[$0 - 2],
          joinWith: $$[$0]
        };
        break;
      case 225:
        this.$ = {
          entity: $$[$0 - 2],
          on: {
            left: $$[$0],
            right: '$key'
          }
        };
        break;
      case 226:
        this.$ = {
          document: $$[$0 - 6],
          on: {
            left: $$[$0],
            right: $$[$0 - 2]
          }
        };
        break;
      case 227:
        this.$ = state.defView($$[$0 - 4], $$[$0 - 1]);
        break;
      case 228:
        this.$ = Object.assign({}, $$[$0 - 7], $$[$0 - 5], $$[$0 - 4], $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 232:
        this.$ = Object.assign({}, $$[$0 - 1], {
          isList: true
        });
        break;
      case 233:
        this.$ = {
          entity: $$[$0]
        };
        break;
      case 234:
        this.$ = {
          document: $$[$0 - 1]
        };
        break;
      case 237:
        this.$ = {
          selectBy: [$$[$0 - 1]]
        };
        break;
      case 238:
        this.$ = {
          selectBy: $$[$0 - 1]
        };
        break;
      case 242:
      case 243:
        this.$ = {
          groupBy: $$[$0 - 1]
        };
        break;
      case 245:
      case 246:
        this.$ = {
          orderBy: $$[$0 - 1]
        };
        break;
      case 249:
        this.$ = {
          field: $$[$0],
          ascend: true
        };
        break;
      case 250:
        this.$ = {
          field: $$[$0 - 1],
          ascend: true
        };
        break;
      case 251:
        this.$ = {
          field: $$[$0 - 1],
          ascend: false
        };
        break;
      case 253:
      case 255:
      case 261:
      case 263:
        this.$ = [$$[$0 - 1]].concat($$[$0]);
        break;
      case 257:
        this.$ = {
          skip: $$[$0 - 1]
        };
        break;
      case 259:
        this.$ = {
          limit: $$[$0 - 1]
        };
        break;
      case 278:
      case 281:
        this.$ = {
          name: $$[$0 - 2]
        };
        break;
      case 279:
        this.$ = {
          name: $$[$0 - 3],
          args: $$[$0 - 1]
        };
        break;
      case 282:
        this.$ = {
          name: $$[$0 - 3],
          options: $$[$0 - 1]
        };
        break;
      case 287:
        this.$ = Object.assign({
          oolType: 'FunctionCall'
        }, $$[$0]);
        break;
      case 296:
      case 297:
        this.$ = {
          [$$[$0 - 2]]: $$[$0]
        };
        break;
      case 302:
        this.$ = [];
        break;
      case 305:
        this.$ = $$[$0 - 1].concat($$[$0]);
        break;
      case 307:
      case 309:
      case 311:
      case 313:
      case 315:
      case 320:
      case 367:
        this.$ = [$$[$0 - 1]].concat($$[$0]);
        break;
      case 331:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 1]
        }, $$[$0]);
        break;
      case 332:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 1]
        }, $$[$0]);
        break;
      case 333:
      case 334:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 2]
        }, $$[$0 - 1], $$[$0]);
        break;
      case 335:
      case 336:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 3]
        }, $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 337:
        this.$ = Object.assign({
          oolType: 'ComputedValue',
          value: $$[$0 - 4]
        }, $$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0]);
        break;
      case 338:
        this.$ = {
          oolType: 'ThrowExpression'
        };
        break;
      case 339:
        this.$ = {
          oolType: 'ThrowExpression',
          message: $$[$0 - 1]
        };
        break;
      case 340:
        this.$ = {
          oolType: 'ThrowExpression',
          errorType: $$[$0 - 1]
        };
        break;
      case 341:
        this.$ = {
          oolType: 'ThrowExpression',
          errorType: $$[$0 - 3],
          message: $$[$0 - 1]
        };
        break;
      case 342:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'exists',
          argument: $$[$0 - 1]
        };
        break;
      case 343:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'not-exists',
          argument: $$[$0 - 2]
        };
        break;
      case 344:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'is-null',
          argument: $$[$0 - 2]
        };
        break;
      case 345:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'is-not-null',
          argument: $$[$0 - 3]
        };
        break;
      case 346:
        this.$ = {
          oolType: 'UnaryExpression',
          operator: 'not',
          argument: $$[$0 - 1],
          prefix: true
        };
        break;
      case 347:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '>',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 348:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '<',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 349:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '>=',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 350:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '<=',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 351:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '=',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 352:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: '!=',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 353:
        this.$ = {
          oolType: 'BinaryExpression',
          operator: 'in',
          left: $$[$0 - 2],
          right: $$[$0]
        };
        break;
      case 354:
      case 358:
        this.$ = Object.assign({
          left: $$[$0 - 1]
        }, $$[$0]);
        break;
      case 356:
      case 360:
        this.$ = Object.assign({
          oolType: 'BinaryExpression'
        }, $$[$0 - 1], {
          right: $$[$0]
        });
        break;
      case 357:
      case 361:
        this.$ = Object.assign({
          oolType: 'BinaryExpression'
        }, $$[$0 - 3], {
          right: $$[$0 - 1]
        });
        break;
      case 362:
        this.$ = {
          operator: 'and'
        };
        break;
      case 363:
        this.$ = {
          operator: 'or'
        };
        break;
      }
    },
    table: [{
      3: 1,
      4: 2,
      5: [1, 3],
      6: 4,
      7: $V0,
      8: 6,
      9: 7,
      10: 8,
      11: 9,
      12: 10,
      13: 11,
      14: 12,
      15: 13,
      16: $V1,
      21: $V2,
      66: 16,
      68: 21,
      70: $V3,
      186: $V4,
      203: $V5,
      212: $V6,
      219: $V7
    }, {
      1: [3]
    }, {
      1: [2, 1]
    }, {
      1: [2, 2]
    }, {
      5: [1, 23]
    }, {
      5: [2, 4],
      6: 24,
      7: $V0,
      8: 6,
      9: 7,
      10: 8,
      11: 9,
      12: 10,
      13: 11,
      14: 12,
      15: 13,
      16: $V1,
      21: $V2,
      66: 16,
      68: 21,
      70: $V3,
      186: $V4,
      203: $V5,
      212: $V6,
      219: $V7
    }, {
      5: [2, 5],
      6: 25,
      7: $V0,
      8: 6,
      9: 7,
      10: 8,
      11: 9,
      12: 10,
      13: 11,
      14: 12,
      15: 13,
      16: $V1,
      21: $V2,
      66: 16,
      68: 21,
      70: $V3,
      186: $V4,
      203: $V5,
      212: $V6,
      219: $V7
    }, o($V8, [2, 8]), o($V8, [2, 9]), o($V8, [2, 10]), o($V8, [2, 11]), o($V8, [2, 12]), o($V8, [2, 13]), o($V8, [2, 14]), {
      7: [1, 27],
      17: [1, 26]
    }, {
      7: [1, 29],
      22: 28,
      24: 30,
      249: $V9
    }, {
      7: [1, 32]
    }, {
      17: $Va,
      24: 34,
      50: 33,
      249: $V9
    }, {
      17: $Va,
      24: 34,
      50: 36,
      249: $V9
    }, {
      17: $Va,
      24: 34,
      50: 37,
      249: $V9
    }, {
      7: [1, 39],
      187: 38,
      189: 40,
      193: 42,
      195: $Vb,
      200: $Vc,
      250: $Vd
    }, {
      7: [2, 68],
      69: [1, 45]
    }, {
      17: $Va,
      24: 34,
      50: 46,
      249: $V9
    }, {
      1: [2, 3]
    }, {
      5: [2, 6]
    }, {
      5: [2, 7]
    }, {
      7: [1, 47]
    }, {
      18: [1, 48]
    }, {
      7: [1, 49]
    }, {
      18: [1, 50]
    }, o([7, 124], $Ve, {
      25: 51,
      27: 52,
      28: $Vf
    }), o([7, 28, 32, 34, 56, 69, 88, 98, 114, 115, 116, 117, 118, 120, 124, 125, 126, 153, 170, 180, 190, 192, 196, 212, 217, 230, 239, 240, 261, 275, 276, 278, 279, 280, 281, 282, 283, 284, 288, 289], [2, 271]), o($V8, [2, 66], {
      18: [1, 54]
    }), {
      7: [1, 55]
    }, o($Vg, [2, 292]), o($Vg, [2, 293]), {
      7: [1, 56]
    }, {
      7: [1, 57]
    }, {
      7: [1, 58]
    }, {
      18: [1, 59]
    }, {
      7: [2, 200],
      190: [1, 60],
      192: [1, 61]
    }, {
      24: 63,
      51: $Vh,
      121: 62,
      249: $V9
    }, {
      24: 63,
      51: $Vh,
      121: 65,
      249: $V9
    }, o($Vi, [2, 272]), o($Vi, [2, 273]), {
      17: $Va,
      24: 34,
      50: 66,
      249: $V9
    }, o($Vj, [2, 70]), o($V8, [2, 15]), {
      17: $Vk,
      19: 67
    }, o($V8, [2, 19]), {
      22: 70,
      23: 69,
      24: 30,
      249: $V9
    }, {
      7: [2, 61],
      26: 71,
      64: 72,
      65: 73,
      123: 74,
      124: $Vl
    }, o($Vm, [2, 23]), {
      17: $Va,
      24: 34,
      29: 76,
      30: 77,
      35: 78,
      37: 79,
      38: 80,
      39: 81,
      40: [1, 82],
      45: [1, 83],
      46: [1, 84],
      47: [1, 85],
      48: [1, 86],
      49: 87,
      50: 88,
      51: [1, 89],
      52: [1, 90],
      53: [1, 91],
      55: [1, 92],
      57: [1, 93],
      59: [1, 94],
      60: [1, 95],
      61: 96,
      62: [1, 98],
      63: [1, 99],
      249: $V9,
      260: $Vn
    }, o($Vo, [2, 72], {
      67: 100,
      71: 101,
      78: [1, 102]
    }), {
      18: [1, 103]
    }, {
      18: [1, 104]
    }, {
      18: [1, 105]
    }, o($V8, [2, 196]), {
      187: 107,
      188: 106,
      189: 40,
      193: 42,
      195: $Vb,
      200: $Vc,
      250: $Vd
    }, {
      152: $Vp,
      191: 108,
      194: 109,
      198: $Vq,
      199: $Vr,
      200: $Vs
    }, {
      193: 114,
      200: $Vc,
      250: $Vd
    }, {
      88: [1, 115]
    }, o($Vt, [2, 274]), o($Vt, [2, 275]), {
      196: [1, 116]
    }, {
      7: [2, 69]
    }, {
      20: [1, 117]
    }, {
      7: [1, 118]
    }, {
      20: [1, 119]
    }, {
      7: [1, 120]
    }, {
      7: [2, 21]
    }, {
      7: [2, 62]
    }, o($Vu, [2, 63]), o($Vu, [2, 128], {
      123: 74,
      65: 121,
      124: $Vl
    }), {
      24: 63,
      51: $Vh,
      121: 122,
      122: 123,
      249: $V9
    }, o($Vm, [2, 24]), o($Vm, $Vv, {
      31: 124,
      32: [1, 125],
      54: $Vw
    }), o($Vm, [2, 27], {
      36: [1, 127]
    }), o($Vm, [2, 29]), o($Vm, [2, 30]), o($Vm, [2, 31]), o($Vm, [2, 32], {
      41: [1, 128],
      43: [1, 129],
      44: [1, 130]
    }), o($Vm, [2, 36]), o($Vm, [2, 37]), o($Vm, [2, 38]), o($Vm, [2, 39]), o($Vm, [2, 40]), o($Vm, [2, 41]), o($Vm, [2, 42]), o($Vx, [2, 43]), o($Vx, [2, 44]), o($Vy, [2, 47], {
      32: [1, 131]
    }), o($Vm, [2, 51], {
      32: [1, 132]
    }), o($Vm, [2, 54]), o($Vm, [2, 55]), o($Vm, [2, 56], {
      32: [1, 133]
    }), {
      17: $Va,
      24: 34,
      50: 135,
      249: $V9,
      266: 134
    }, o($Vz, [2, 59]), o($Vz, [2, 60]), {
      20: [1, 136]
    }, o($VA, [2, 74], {
      72: 137,
      79: 138,
      85: [1, 139]
    }), {
      17: [1, 140]
    }, {
      204: 141,
      205: 142,
      208: [1, 143]
    }, {
      69: [1, 146],
      220: 144,
      221: 145
    }, {
      213: 147,
      214: [1, 148]
    }, {
      20: [1, 149]
    }, {
      7: [1, 150]
    }, {
      7: [2, 201]
    }, {
      24: 63,
      51: $Vh,
      121: 151,
      249: $V9
    }, o($VB, [2, 206]), o($VB, [2, 207]), o($VB, [2, 208]), {
      201: [1, 152]
    }, {
      24: 63,
      51: $Vh,
      121: 153,
      249: $V9
    }, {
      152: $Vp,
      191: 154,
      194: 109,
      198: $Vq,
      199: $Vr,
      200: $Vs
    }, {
      197: [1, 155]
    }, o($V8, [2, 16]), {
      17: $Vk,
      19: 156,
      20: [2, 17]
    }, o($V8, [2, 20]), {
      20: [2, 64],
      22: 70,
      23: 157,
      24: 30,
      249: $V9
    }, o($Vu, [2, 129]), o($VC, [2, 130], {
      32: $VD
    }), o($VC, [2, 131]), o($Vm, [2, 25]), {
      33: [1, 159]
    }, o($Vm, [2, 46]), o($Vm, [2, 28]), {
      42: [1, 160]
    }, {
      42: [1, 161]
    }, {
      42: [1, 162]
    }, {
      33: [1, 163],
      56: [1, 164]
    }, {
      33: [1, 165]
    }, {
      33: [1, 166]
    }, {
      261: [1, 167]
    }, {
      56: $VE,
      261: [2, 317],
      267: 168
    }, o($V8, [2, 67]), o($VF, [2, 76], {
      73: 170,
      80: 171,
      88: [1, 172]
    }), o($VA, [2, 75]), {
      7: [1, 174],
      24: 63,
      51: $Vh,
      86: 173,
      121: 175,
      249: $V9
    }, {
      7: [1, 176]
    }, {
      20: [1, 177]
    }, {
      20: [2, 212],
      206: 178,
      207: 179,
      210: [1, 180]
    }, {
      7: [1, 181]
    }, {
      20: [1, 182]
    }, {
      7: [1, 183]
    }, {
      193: 184,
      200: $Vc,
      250: $Vd
    }, {
      20: [1, 185]
    }, {
      17: $Va,
      24: 34,
      50: 186,
      249: $V9
    }, o($V8, [2, 197]), {
      20: [2, 198],
      187: 107,
      188: 187,
      189: 40,
      193: 42,
      195: $Vb,
      200: $Vc,
      250: $Vd
    }, o($VG, [2, 203]), {
      55: [1, 188]
    }, {
      7: [2, 202]
    }, o($VG, [2, 204]), {
      152: $Vp,
      191: 189,
      194: 109,
      198: $Vq,
      199: $Vr,
      200: $Vs
    }, {
      20: [2, 18]
    }, {
      20: [2, 65]
    }, {
      17: $VH,
      33: $VI,
      34: [1, 190],
      99: 195,
      134: 200,
      135: 201,
      168: $VJ,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      251: 191,
      254: 192,
      255: $VN,
      256: 194,
      260: $VO
    }, {
      34: [1, 206]
    }, o($Vm, [2, 33]), o($Vm, [2, 34]), o($Vm, [2, 35]), {
      34: [1, 207],
      56: [1, 208]
    }, {
      33: [1, 209]
    }, {
      34: [1, 210]
    }, {
      34: [1, 211]
    }, o([7, 69, 98, 114, 115, 116, 117, 118, 120, 124], [2, 316]), {
      261: [2, 318]
    }, {
      17: $Va,
      24: 34,
      50: 212,
      249: $V9
    }, o($VP, [2, 78], {
      74: 213,
      81: 214,
      127: [1, 215]
    }), o($VF, [2, 77]), {
      7: [1, 217],
      17: $Va,
      24: 34,
      50: 219,
      89: 216,
      91: 218,
      249: $V9
    }, {
      7: [1, 220]
    }, {
      18: [1, 221]
    }, {
      7: [2, 280],
      32: [1, 222]
    }, o($Vo, [2, 73]), o($V8, [2, 210]), {
      20: [2, 211]
    }, {
      20: [2, 213]
    }, {
      7: [1, 223]
    }, {
      18: [1, 224]
    }, o($V8, [2, 227]), o([20, 232, 234, 237, 242, 243], $VQ, {
      140: 225,
      143: 226,
      144: $VR
    }), {
      17: $Va,
      24: 34,
      50: 229,
      229: 228,
      249: $V9
    }, o($V8, [2, 220]), {
      7: [1, 230]
    }, {
      20: [2, 199]
    }, {
      202: [1, 231]
    }, o($VG, [2, 205]), o($VC, [2, 278]), {
      34: [1, 232]
    }, {
      34: [2, 308],
      56: $VS,
      264: 233
    }, o($VT, [2, 290], {
      65: 73,
      123: 74,
      64: 235,
      104: 236,
      105: 237,
      119: 238,
      120: $VU,
      124: $Vl
    }), o($VT, [2, 291]), o($VV, [2, 288]), o($VV, [2, 289]), o($VV, [2, 264]), o($VV, [2, 265]), o($VV, [2, 266]), o($VV, [2, 267]), o($VV, [2, 268]), o($VV, [2, 269]), o($VV, [2, 270]), {
      17: $Va,
      24: 34,
      33: $VW,
      50: 243,
      170: [1, 240],
      249: $V9,
      257: 241,
      258: 242
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 247,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO,
      261: [1, 245],
      262: 246
    }, o($Vm, $Vv, {
      31: 251,
      54: $Vw
    }), o($Vy, [2, 48]), {
      33: [1, 252]
    }, {
      34: [1, 253]
    }, o($Vm, [2, 52], {
      58: [1, 254]
    }), o($Vm, [2, 57], {
      58: [1, 255]
    }), {
      56: $VE,
      261: [2, 319],
      267: 256
    }, o($VX, [2, 80], {
      75: 257,
      82: 258,
      131: [1, 259]
    }), o($VP, [2, 79]), {
      24: 260,
      249: $V9
    }, {
      7: [1, 261]
    }, {
      18: [1, 262]
    }, {
      7: [2, 118],
      92: 263,
      117: [1, 264]
    }, o($Vm, $Ve, {
      27: 52,
      25: 265,
      95: 266,
      28: $Vf,
      125: [1, 267],
      126: [1, 268]
    }), o($VA, [2, 86]), {
      24: 63,
      51: $Vh,
      86: 270,
      87: 269,
      121: 175,
      249: $V9
    }, {
      17: $VH,
      24: 275,
      33: $VI,
      34: [1, 271],
      99: 274,
      134: 200,
      135: 201,
      168: $VJ,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      252: 272,
      253: 273,
      260: $VO
    }, {
      18: [1, 276]
    }, {
      17: $Va,
      24: 34,
      50: 278,
      209: 277,
      249: $V9
    }, o($VY, [2, 235], {
      222: 279,
      231: 280,
      232: [1, 281]
    }), o($VZ, [2, 153]), {
      7: [1, 283],
      17: $V_,
      24: 285,
      145: 282,
      147: 284,
      249: $V9
    }, {
      7: [2, 231],
      230: [1, 287]
    }, o($V$, [2, 233], {
      212: [1, 288]
    }), {
      20: [2, 221],
      85: $V01,
      215: 289
    }, o($VB, [2, 209]), o($VC, [2, 279]), {
      34: [2, 309]
    }, {
      17: $VH,
      33: $VI,
      99: 195,
      134: 200,
      135: 201,
      168: $VJ,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      254: 291,
      255: $VN,
      256: 194,
      260: $VO
    }, o($VT, [2, 331], {
      105: 237,
      119: 238,
      104: 292,
      120: $VU
    }), o($VT, [2, 332], {
      123: 74,
      107: 293,
      65: 294,
      124: $Vl
    }), o($V11, [2, 102]), o($V11, [2, 124], {
      119: 238,
      105: 295,
      120: $VU
    }), {
      24: 63,
      51: $Vh,
      121: 296,
      122: 297,
      249: $V9
    }, o($VV, [2, 294]), {
      170: [1, 298]
    }, {
      56: $V21,
      170: [2, 298],
      259: 299
    }, {
      28: [1, 301]
    }, {
      28: [1, 302]
    }, o($VV, [2, 302]), {
      261: [1, 303]
    }, {
      56: $V31,
      261: [2, 304],
      263: 304
    }, o($VT, [2, 285]), o($VT, [2, 286], {
      32: $VD
    }), o($VT, [2, 287]), o($Vm, [2, 26]), {
      34: [1, 306]
    }, o($Vy, [2, 49]), o($Vm, [2, 53]), o($Vm, [2, 58]), {
      261: [2, 320]
    }, o($V41, [2, 82], {
      76: 307,
      83: 308,
      133: [1, 309]
    }), o($VX, [2, 81]), {
      7: [1, 311],
      24: 312,
      49: 313,
      128: 310,
      249: $V9,
      260: $Vn
    }, {
      7: [1, 314]
    }, o($VF, [2, 90]), {
      17: $Va,
      24: 34,
      50: 219,
      89: 316,
      90: 315,
      91: 218,
      249: $V9
    }, {
      7: [2, 92]
    }, {
      17: [1, 317]
    }, o($V51, [2, 98], {
      93: 318,
      102: 319,
      112: 320,
      100: 321,
      111: 322,
      113: 323,
      97: 324,
      98: $V61,
      114: $V71,
      115: $V81,
      116: $V91,
      118: $Va1
    }), o($Vb1, [2, 111], {
      96: 330,
      111: 331,
      118: $Va1
    }), {
      24: 63,
      51: $Vh,
      121: 332,
      249: $V9
    }, {
      24: 63,
      51: $Vh,
      121: 333,
      249: $V9
    }, {
      20: [1, 334]
    }, {
      7: [1, 335]
    }, {
      7: [2, 281]
    }, {
      34: [1, 336]
    }, {
      34: [2, 312],
      56: $Vc1,
      265: 337
    }, o($Vd1, [2, 283]), o($Vd1, [2, 284]), {
      24: 63,
      51: $Vh,
      121: 340,
      211: 339,
      249: $V9
    }, {
      20: [1, 341]
    }, {
      7: [1, 342]
    }, o($Ve1, [2, 241], {
      223: 343,
      234: [1, 344]
    }), o($VY, [2, 236]), {
      153: [1, 345]
    }, {
      7: [1, 346]
    }, {
      18: [1, 347]
    }, o($Vf1, [2, 159], {
      148: 348,
      27: 349,
      97: 350,
      28: $Vf,
      98: $Vg1
    }), o($Vh1, [2, 276]), o($Vh1, [2, 277]), {
      7: [2, 232]
    }, o($V$, [2, 234]), {
      20: [2, 222]
    }, {
      17: $Va,
      24: 34,
      50: 353,
      216: 352,
      249: $V9
    }, {
      34: [2, 310],
      56: $VS,
      264: 354
    }, o($VT, [2, 333], {
      123: 74,
      65: 294,
      107: 355,
      124: $Vl
    }), o($VT, [2, 334], {
      119: 238,
      109: 356,
      105: 357,
      120: $VU
    }), o($Vu, [2, 105]), o($V11, [2, 125]), o($VC, [2, 126], {
      32: $VD
    }), o($VC, [2, 127]), o($VV, [2, 295]), {
      170: [2, 299]
    }, {
      17: $Va,
      24: 34,
      33: $VW,
      50: 243,
      249: $V9,
      258: 358
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 359,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 360,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO
    }, o($VV, [2, 303]), {
      261: [2, 305]
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 361,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO
    }, o($Vy, [2, 50]), {
      20: [2, 84],
      77: 362,
      84: 363,
      136: [1, 364]
    }, o($V41, [2, 83]), {
      134: 365,
      135: 366,
      168: $VJ,
      260: $VO
    }, {
      7: [1, 367],
      69: $Vi1,
      129: 368
    }, {
      18: [1, 370]
    }, o($Vj, [2, 137]), o($Vj, [2, 138]), o($VP, [2, 136]), {
      20: [1, 371]
    }, {
      7: [1, 372]
    }, {
      7: [2, 119]
    }, o($Vb1, $Vj1, {
      65: 73,
      123: 74,
      105: 237,
      119: 238,
      94: 373,
      64: 374,
      104: 375,
      120: $VU,
      124: $Vl
    }), o($V51, [2, 99]), o($V51, [2, 113], {
      112: 320,
      100: 321,
      111: 322,
      113: 323,
      97: 324,
      102: 376,
      98: $V61,
      114: $V71,
      115: $V81,
      116: $V91,
      118: $Va1
    }), o($Vm, [2, 120]), o($Vm, [2, 121]), o($Vm, [2, 122]), o($Vm, [2, 96]), {
      32: [1, 377]
    }, o($Vm, [2, 123]), o($Vm, [2, 115]), o($Vm, [2, 116]), o($Vm, [2, 117]), o($Vb1, [2, 94]), o($Vb1, [2, 112]), o($Vk1, [2, 132]), o($Vk1, [2, 133]), o($VA, [2, 87]), {
      20: [2, 88],
      24: 63,
      51: $Vh,
      86: 270,
      87: 378,
      121: 175,
      249: $V9
    }, {
      7: [2, 282]
    }, {
      34: [2, 313]
    }, {
      17: $VH,
      24: 275,
      33: $VI,
      99: 274,
      134: 200,
      135: 201,
      168: $VJ,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      253: 379,
      260: $VO
    }, {
      20: [1, 380]
    }, {
      7: [1, 381]
    }, o([20, 210], [2, 214]), {
      17: $Va,
      20: [2, 215],
      24: 34,
      50: 278,
      209: 382,
      249: $V9
    }, o($Vl1, [2, 244], {
      224: 383,
      237: [1, 384]
    }), {
      153: [1, 385]
    }, {
      7: [1, 387],
      17: $VH,
      24: 63,
      32: $Vm1,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      158: 386,
      168: $VJ,
      174: 391,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO,
      268: 388,
      269: 389,
      271: 393,
      273: 392,
      276: $Vn1
    }, o($VZ, [2, 154]), {
      17: $V_,
      24: 285,
      145: 396,
      146: 395,
      147: 284,
      249: $V9
    }, {
      7: $Vj1,
      64: 374,
      65: 73,
      94: 397,
      104: 375,
      105: 237,
      119: 238,
      120: $VU,
      123: 74,
      124: $Vl
    }, o($Vf1, [2, 160], {
      97: 398,
      98: $Vg1
    }), o($Vf1, [2, 161]), {
      32: [1, 399]
    }, {
      7: [1, 400]
    }, {
      212: [1, 402],
      217: [1, 401]
    }, {
      34: [2, 311]
    }, o($VT, [2, 335], {
      119: 238,
      105: 357,
      109: 403,
      120: $VU
    }), o($VT, [2, 336]), o([7, 34, 56, 69, 117, 170, 180, 261, 275, 276, 278, 279, 280, 281, 282, 283, 284, 288, 289], [2, 108]), {
      56: $V21,
      170: [2, 300],
      259: 404
    }, o($Vo1, [2, 296]), o($Vo1, [2, 297]), {
      56: $V31,
      261: [2, 306],
      263: 405
    }, {
      20: [2, 71]
    }, {
      20: [2, 85]
    }, {
      7: [1, 406]
    }, {
      7: [1, 407]
    }, {
      7: [1, 408]
    }, o($VX, [2, 141]), o($Vj, [2, 139]), {
      130: [1, 409]
    }, {
      24: 312,
      49: 313,
      128: 411,
      132: 410,
      249: $V9,
      260: $Vn
    }, o($VF, [2, 91]), {
      17: $Va,
      20: [2, 134],
      24: 34,
      50: 219,
      89: 316,
      90: 412,
      91: 218,
      249: $V9
    }, o($Vb1, [2, 93]), o($Vb1, [2, 164], {
      105: 237,
      119: 238,
      104: 413,
      120: $VU
    }), o($Vb1, [2, 165], {
      123: 74,
      65: 294,
      107: 414,
      124: $Vl
    }), o($V51, [2, 114]), {
      17: $VH,
      33: $VI,
      99: 416,
      101: [1, 415],
      134: 200,
      135: 201,
      168: $VJ,
      246: $VK,
      247: $VL,
      248: $VM,
      260: $VO
    }, {
      20: [2, 89]
    }, {
      34: [2, 314],
      56: $Vc1,
      265: 417
    }, {
      20: [2, 217]
    }, {
      20: [2, 218],
      24: 63,
      51: $Vh,
      121: 340,
      211: 418,
      249: $V9
    }, {
      20: [2, 216]
    }, o($Vp1, [2, 256], {
      225: 419,
      242: [1, 420]
    }), {
      153: [1, 421]
    }, {
      7: [1, 423],
      24: 63,
      51: $Vh,
      121: 425,
      235: 422,
      238: 424,
      249: $V9
    }, {
      7: [1, 426]
    }, {
      18: [1, 427]
    }, o($Vq1, [2, 321]), o($Vq1, [2, 322], {
      285: 428,
      286: 429,
      288: $Vr1,
      289: $Vs1
    }), {
      17: $VH,
      24: 63,
      32: $Vm1,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 391,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO,
      268: 432,
      269: 433,
      271: 393,
      273: 392,
      276: $Vn1
    }, o($Vt1, [2, 328], {
      69: [1, 436],
      275: [1, 434],
      276: [1, 435],
      278: [1, 437],
      279: [1, 438],
      280: [1, 439],
      281: [1, 440],
      282: [1, 441],
      283: [1, 442],
      284: [1, 443]
    }), o($Vt1, [2, 329]), o($Vt1, [2, 330]), {
      32: [1, 444]
    }, {
      20: [1, 445]
    }, {
      7: [1, 446]
    }, {
      7: [2, 158]
    }, o($Vf1, [2, 162]), {
      17: $VH,
      33: $VI,
      99: 416,
      134: 200,
      135: 201,
      168: $VJ,
      246: $VK,
      247: $VL,
      248: $VM,
      260: $VO
    }, {
      20: [2, 223],
      85: $V01,
      215: 447
    }, {
      24: 63,
      51: $Vh,
      121: 448,
      249: $V9
    }, {
      202: [1, 449]
    }, o($VT, [2, 337]), {
      170: [2, 301]
    }, {
      261: [2, 307]
    }, {
      18: [1, 450]
    }, o($V41, [2, 145]), o($V41, [2, 146]), o($Vj, [2, 140]), {
      20: [1, 451]
    }, {
      7: [1, 452],
      69: $Vi1,
      129: 368
    }, {
      20: [2, 135]
    }, o($Vb1, [2, 166], {
      123: 74,
      65: 294,
      107: 453,
      124: $Vl
    }), o($Vb1, [2, 167], {
      119: 238,
      105: 357,
      109: 454,
      120: $VU
    }), {
      34: [1, 455]
    }, {
      34: [1, 456]
    }, {
      34: [2, 315]
    }, {
      20: [2, 219]
    }, {
      20: [2, 258],
      226: 457,
      243: [1, 458]
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 459,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO
    }, {
      7: [1, 461],
      24: 63,
      51: $Vh,
      121: 425,
      235: 460,
      238: 424,
      249: $V9
    }, {
      7: [1, 462]
    }, {
      18: [1, 463]
    }, {
      7: [2, 252],
      56: $Vu1,
      241: 464
    }, o($Vv1, [2, 249], {
      239: [1, 466],
      240: [1, 467]
    }), o($VY, [2, 237]), {
      17: $VH,
      24: 63,
      32: $Vm1,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      158: 469,
      168: $VJ,
      174: 391,
      185: 193,
      233: 468,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO,
      268: 388,
      269: 389,
      271: 393,
      273: 392,
      276: $Vn1
    }, o($Vw1, [2, 354]), {
      17: $VH,
      24: 63,
      32: [1, 471],
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 391,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO,
      269: 470,
      271: 393,
      273: 392,
      276: $Vn1
    }, o($Vx1, [2, 362]), o($Vx1, [2, 363]), {
      34: [1, 472]
    }, {
      285: 428,
      286: 429,
      288: $Vr1,
      289: $Vs1
    }, o($Vt1, [2, 342]), {
      275: [1, 473]
    }, {
      276: [1, 475],
      277: [1, 474]
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 476,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 477,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 478,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 479,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 480,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 481,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 482,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 391,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO,
      269: 483,
      271: 393,
      273: 392,
      276: $Vn1
    }, o($VZ, [2, 155]), {
      17: $V_,
      20: [2, 156],
      24: 285,
      145: 396,
      146: 484,
      147: 284,
      249: $V9
    }, {
      20: [2, 224]
    }, {
      7: [2, 225]
    }, {
      218: [1, 485]
    }, {
      24: 488,
      137: 486,
      138: 487,
      249: $V9
    }, o($VX, [2, 142]), {
      20: [2, 143],
      24: 312,
      49: 313,
      128: 411,
      132: 489,
      249: $V9,
      260: $Vn
    }, o($Vb1, [2, 168], {
      119: 238,
      105: 357,
      109: 490,
      120: $VU
    }), o($Vb1, [2, 169]), o($Vm, [2, 97]), o($Vm, [2, 95]), {
      20: [2, 228]
    }, {
      17: $VH,
      24: 63,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 491,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO
    }, {
      7: [1, 492]
    }, {
      7: [1, 493]
    }, {
      18: [1, 494]
    }, o($Ve1, [2, 242]), {
      24: 63,
      51: $Vh,
      121: 425,
      236: 495,
      238: 496,
      249: $V9
    }, {
      7: [2, 253]
    }, {
      24: 63,
      51: $Vh,
      121: 425,
      238: 497,
      249: $V9
    }, o($Vv1, [2, 250]), o($Vv1, [2, 251]), {
      20: [1, 498]
    }, {
      7: [1, 499]
    }, o($Vw1, [2, 356]), {
      17: $VH,
      24: 63,
      32: $Vm1,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      168: $VJ,
      174: 391,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO,
      268: 500,
      269: 433,
      271: 393,
      273: 392,
      276: $Vn1
    }, {
      285: 501,
      286: 429,
      288: $Vr1,
      289: $Vs1
    }, o($Vt1, [2, 343]), o($Vt1, [2, 344]), {
      277: [1, 502]
    }, o($Vt1, [2, 347]), o($Vt1, [2, 348]), o($Vt1, [2, 349]), o($Vt1, [2, 350]), o($Vt1, [2, 351]), o($Vt1, [2, 352]), o($Vt1, [2, 353]), {
      34: [1, 503]
    }, {
      20: [2, 157]
    }, {
      24: 63,
      51: $Vh,
      121: 504,
      249: $V9
    }, {
      20: [1, 505]
    }, {
      20: [2, 148],
      24: 488,
      137: 506,
      138: 487,
      249: $V9
    }, {
      7: [1, 507]
    }, {
      20: [2, 144]
    }, o($Vb1, [2, 170]), {
      7: [1, 508]
    }, o($Vp1, [2, 257]), o($Vl1, [2, 245]), {
      24: 63,
      51: $Vh,
      121: 425,
      236: 509,
      238: 496,
      249: $V9
    }, {
      20: [1, 510]
    }, {
      7: [1, 511]
    }, {
      7: [2, 254],
      56: $Vu1,
      241: 512
    }, o($VY, [2, 238]), {
      17: $VH,
      20: [2, 239],
      24: 63,
      32: $Vm1,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      158: 469,
      168: $VJ,
      174: 391,
      185: 193,
      233: 513,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO,
      268: 388,
      269: 389,
      271: 393,
      273: 392,
      276: $Vn1
    }, {
      34: [1, 514]
    }, o($Vw1, [2, 355]), o($Vt1, [2, 345]), o($Vt1, [2, 346]), {
      217: [1, 515]
    }, {
      20: [2, 147]
    }, {
      20: [2, 149]
    }, {
      18: [1, 516]
    }, {
      20: [2, 259]
    }, {
      20: [1, 517]
    }, o($Ve1, [2, 243]), {
      20: [2, 247],
      24: 63,
      51: $Vh,
      121: 425,
      236: 518,
      238: 496,
      249: $V9
    }, {
      7: [2, 255]
    }, {
      20: [2, 240]
    }, o($Vw1, [2, 357]), {
      24: 63,
      51: $Vh,
      121: 519,
      249: $V9
    }, {
      139: 520,
      140: 521,
      143: 226,
      144: $VR,
      151: $VQ
    }, o($Vl1, [2, 246]), {
      20: [2, 248]
    }, {
      7: [2, 226]
    }, {
      20: [1, 522]
    }, {
      141: 523,
      149: 524,
      150: 525,
      151: $Vy1
    }, o([20, 249], [2, 150]), {
      20: [2, 190],
      142: 527,
      181: 528,
      184: $Vz1
    }, o($VA1, [2, 171], {
      149: 524,
      150: 525,
      141: 530,
      151: $Vy1
    }), o($VB1, [2, 173]), {
      152: [1, 531]
    }, {
      20: [2, 151]
    }, {
      7: [1, 532],
      182: [1, 533]
    }, {
      17: $VH,
      33: $VI,
      99: 195,
      134: 200,
      135: 201,
      168: $VJ,
      185: 534,
      246: $VK,
      247: $VL,
      248: $VM,
      255: $VN,
      260: $VO
    }, o($VA1, [2, 172]), {
      24: 535,
      249: $V9
    }, {
      20: [2, 191]
    }, {
      7: [1, 536]
    }, o([7, 182], [2, 193]), {
      153: [1, 537]
    }, {
      18: [1, 538]
    }, {
      17: $VH,
      24: 63,
      32: $Vm1,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      154: [1, 539],
      158: 540,
      168: $VJ,
      174: 391,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO,
      268: 388,
      269: 389,
      271: 393,
      273: 392,
      276: $Vn1
    }, {
      17: $VH,
      24: 63,
      32: $Vm1,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      158: 542,
      168: $VJ,
      174: 391,
      183: 541,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO,
      268: 388,
      269: 389,
      271: 393,
      273: 392,
      276: $Vn1
    }, {
      7: [1, 543]
    }, {
      7: [1, 544]
    }, {
      20: [1, 545]
    }, {
      180: [1, 546]
    }, {
      18: [1, 547]
    }, o($VB1, [2, 176]), {
      20: [2, 192]
    }, {
      17: $VH,
      33: $VI,
      99: 195,
      134: 200,
      135: 201,
      168: $VJ,
      185: 548,
      246: $VK,
      247: $VL,
      248: $VM,
      255: $VN,
      260: $VO
    }, {
      17: $VH,
      24: 63,
      32: $Vm1,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      155: 549,
      158: 551,
      168: $VJ,
      174: 391,
      175: 550,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO,
      268: 388,
      269: 389,
      271: 393,
      273: 392,
      276: $Vn1
    }, {
      7: [1, 552]
    }, {
      20: [1, 553],
      156: [1, 554]
    }, {
      7: [1, 555]
    }, {
      180: [1, 556]
    }, {
      17: $VH,
      20: [2, 194],
      24: 63,
      32: $Vm1,
      33: $VI,
      51: $Vh,
      99: 195,
      121: 249,
      122: 250,
      134: 200,
      135: 201,
      158: 542,
      168: $VJ,
      174: 391,
      183: 557,
      185: 193,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      254: 248,
      255: $VN,
      256: 194,
      260: $VO,
      268: 388,
      269: 389,
      271: 393,
      273: 392,
      276: $Vn1
    }, o($VB1, [2, 174]), {
      17: $VH,
      33: $VI,
      99: 195,
      134: 200,
      135: 201,
      157: 558,
      168: $VJ,
      181: 560,
      184: $Vz1,
      185: 559,
      246: $VK,
      247: $VL,
      248: $VM,
      255: $VN,
      260: $VO,
      272: 561,
      274: $VC1
    }, o($VD1, [2, 182], {
      24: 63,
      185: 193,
      256: 194,
      99: 195,
      134: 200,
      135: 201,
      254: 248,
      121: 249,
      122: 250,
      268: 388,
      269: 389,
      174: 391,
      273: 392,
      271: 393,
      175: 550,
      158: 551,
      155: 563,
      17: $VH,
      32: $Vm1,
      33: $VI,
      51: $Vh,
      168: $VJ,
      246: $VK,
      247: $VL,
      248: $VM,
      249: $V9,
      255: $VN,
      260: $VO,
      276: $Vn1
    }), {
      17: $VH,
      33: $VI,
      99: 195,
      134: 200,
      135: 201,
      157: 564,
      168: $VJ,
      181: 560,
      184: $Vz1,
      185: 559,
      246: $VK,
      247: $VL,
      248: $VM,
      255: $VN,
      260: $VO,
      272: 561,
      274: $VC1
    }, {
      20: [2, 195]
    }, {
      7: [1, 565]
    }, {
      7: [2, 325]
    }, {
      7: [2, 326]
    }, {
      7: [2, 327]
    }, {
      2: [1, 566]
    }, o($VD1, [2, 183]), {
      7: [2, 189]
    }, {
      20: [1, 567]
    }, {
      7: [2, 338],
      32: [1, 568]
    }, o($VB1, [2, 175]), {
      17: [1, 569],
      24: 570,
      249: $V9
    }, {
      34: [1, 571]
    }, {
      34: [1, 572],
      56: [1, 573]
    }, {
      7: [2, 339]
    }, {
      7: [2, 340]
    }, {
      17: [1, 574]
    }, {
      34: [1, 575]
    }, {
      7: [2, 341]
    }],
    defaultActions: {
      2: [2, 1],
      3: [2, 2],
      23: [2, 3],
      24: [2, 6],
      25: [2, 7],
      66: [2, 69],
      71: [2, 21],
      72: [2, 62],
      108: [2, 201],
      153: [2, 202],
      156: [2, 18],
      157: [2, 65],
      168: [2, 318],
      178: [2, 211],
      179: [2, 213],
      187: [2, 199],
      233: [2, 309],
      256: [2, 320],
      263: [2, 92],
      271: [2, 281],
      287: [2, 232],
      289: [2, 222],
      299: [2, 299],
      304: [2, 305],
      317: [2, 119],
      336: [2, 282],
      337: [2, 313],
      354: [2, 311],
      362: [2, 71],
      363: [2, 85],
      378: [2, 89],
      380: [2, 217],
      382: [2, 216],
      397: [2, 158],
      404: [2, 301],
      405: [2, 307],
      412: [2, 135],
      417: [2, 315],
      418: [2, 219],
      447: [2, 224],
      448: [2, 225],
      457: [2, 228],
      464: [2, 253],
      484: [2, 157],
      489: [2, 144],
      505: [2, 147],
      506: [2, 149],
      508: [2, 259],
      512: [2, 255],
      513: [2, 240],
      518: [2, 248],
      519: [2, 226],
      527: [2, 151],
      532: [2, 191],
      545: [2, 192],
      557: [2, 195],
      559: [2, 325],
      560: [2, 326],
      561: [2, 327],
      564: [2, 189],
      571: [2, 339],
      572: [2, 340],
      575: [2, 341]
    },
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

      var args = lstack.slice.call(arguments, 1);

      //this.reductionCount = this.shiftCount = 0;

      var lexer = Object.create(this.lexer);
      var sharedState = {
        yy: {}
      };
      // copy state
      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }

      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;
      if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
      }
      var yyloc = lexer.yylloc;
      lstack.push(yyloc);

      var ranges = lexer.options && lexer.options.ranges;

      if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }

      function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
      }

      _token_stack:
        var lex = function () {
          var token;
          token = lexer.lex() || EOF;
          // if token isn't its numeric value, convert
          if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
          }
          return token;
        }

      var symbol, preErrorSymbol, state, action, a, r, yyval = {},
        p, len, newState, expected;
      while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == 'undefined') {
            symbol = lex();
          }
          // read action for current state and first input
          action = table[state] && table[state][symbol];
        }

        _handle_error:
          // handle parse error
          if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
              var stack_probe = stack.length - 1;
              var depth = 0;

              // try to recover from error
              for (;;) {
                // check for error recovery rule in this state
                if ((TERROR.toString()) in table[state]) {
                  return depth;
                }
                if (state === 0 || stack_probe < 2) {
                  return false; // No suitable error recovery rule available.
                }
                stack_probe -= 2; // popStack(1): [symbol, action]
                state = stack[stack_probe];
                ++depth;
              }
            }

            if (!recovering) {
              // first see if there's any chance at hitting an error recovery rule:
              error_rule_depth = locateNearestErrorRecoveryRule(state);

              // Report error
              expected = [];
              for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                  expected.push("'" + this.terminals_[p] + "'");
                }
              }
              if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
              } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " +
                  (symbol == EOF ? "end of input" :
                    ("'" + (this.terminals_[symbol] || symbol) + "'"));
              }
              this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected,
                recoverable: (error_rule_depth !== false)
              });
            } else if (preErrorSymbol !== EOF) {
              error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
              if (symbol === EOF || preErrorSymbol === EOF) {
                throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
              }

              // discard current lookahead and grab another
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
              symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
              throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR; // insert generic error symbol as new lookahead
            state = stack[stack.length - 1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
          }

          // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }

        switch (action[0]) {
        case 1: // shift
          //this.shiftCount++;

          stack.push(symbol);
          vstack.push(lexer.yytext);
          lstack.push(lexer.yylloc);
          stack.push(action[1]); // push state
          symbol = null;
          if (!preErrorSymbol) { // normal execution/no error
            yyleng = lexer.yyleng;
            yytext = lexer.yytext;
            yylineno = lexer.yylineno;
            yyloc = lexer.yylloc;
            if (recovering > 0) {
              recovering--;
            }
          } else {
            // error just occurred, resume old lookahead f/ before error
            symbol = preErrorSymbol;
            preErrorSymbol = null;
          }
          break;

        case 2:
          // reduce
          //this.reductionCount++;

          len = this.productions_[action[1]][1];

          // perform semantic action
          yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
          // default location, uses first token for firsts, last for lasts
          yyval._$ = {
            first_line: lstack[lstack.length - (len || 1)].first_line,
            last_line: lstack[lstack.length - 1].last_line,
            first_column: lstack[lstack.length - (len || 1)].first_column,
            last_column: lstack[lstack.length - 1].last_column
          };
          if (ranges) {
            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
          }
          r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

          if (typeof r !== 'undefined') {
            return r;
          }

          // pop off stack
          if (len) {
            stack = stack.slice(0, -1 * len * 2);
            vstack = vstack.slice(0, -1 * len);
            lstack = lstack.slice(0, -1 * len);
          }

          stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)
          vstack.push(yyval.$);
          lstack.push(yyval._$);
          // goto new state = table[STATE][NONTERMINAL]
          newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
          stack.push(newState);
          break;

        case 3:
          // accept
          return true;
        }

      }

      return true;
    }
  };

  function ParserState() {
    this.indents = [0];
    this.indent = 0;
    this.dedents = 0;
    this.eof = false;
    this.comment = false;
    this.brackets = [];
    this.parsed = {};
    this.stateStack = [];
  }

  ParserState.prototype = {
    get hasBrackets() {
      return this.brackets.length > 0;
    },

    get lastIndent() {
      return this.indents[this.indents.length - 1]
    },

    get hasIndent() {
      return this.indents.length > 0;
    },

    doIndent() {
      this.indents.push(this.indent);
    },

    doDedent() {
      this.dedents = 0;

      while (this.indents.length) {
        this.dedents++;
        this.indents.pop();
        if (this.lastIndent == this.indent) break;
      }
    },

    dedentAll() {
      this.indent = 0;
      this.dedents = this.indents.length - 1;
      this.indents = [0];
    },

    enterObject() {
      this.stateStack.push('object');
    },

    exitObject() {
      let current = this.stateStack.pop();
      if (current !== 'object') {
        throw new Error('Unmatched object bracket!');
      }
    },

    enterArray() {
      this.stateStack.push('array');
    },

    exitArray() {
      let current = this.stateStack.pop();
      if (current !== 'array') {
        throw new Error('Unmatched array bracket!');
      }
    },

    isTypeExist(type) {
      return this.parsed.type && (type in this.parsed.type);
    },

    use(namespace) {
      if (!this.parsed.namespace) {
        this.parsed.namespace = [];
      }

      this.parsed.namespace.push(namespace);
    },

    defType(type, def) {
      if (!this.parsed.type) {
        this.parsed.type = {};
      }

      this.parsed.type[type] = def;
    },

    isEntityExist(entity) {
      return this.parsed.entity && (entity in this.parsed.entity);
    },

    defEntity(entity, def) {
      if (!this.parsed.entity) {
        this.parsed.entity = {};
      }
      this.parsed.entity[entity] = Object.assign({}, this.parsed.entity[entity], def);
    },

    defRelation(relation) {
      if (!this.parsed.relation) {
        this.parsed.relation = [];
      }

      if (Object.prototype.toString.call(relation) === '[object Array]') {
        this.parsed.relation = this.parsed.relation.concat(relation);
      } else {
        this.parsed.relation.push(relation);
      }
    },

    defSchema(schema, def) {
      this.parsed.schema = Object.assign({}, {
        name: schema
      }, def);
    },

    defView(viewName, def) {
      if (!this.parsed.view) {
        this.parsed.view = {};
      }
      this.parsed.view[viewName] = Object.assign({}, this.parsed.view[viewName], def);
    },

    defDocument(docName, def) {
      if (!this.parsed.document) {
        this.parsed.document = {};
      }
      this.parsed.document[docName] = Object.assign({}, this.parsed.document[docName], def);
    },

    validate() {
      var errors = [];

      //add validations here

      if (errors.length > 0) {
        throw new Error(errors.join("\n"));
      }

      return this;
    },

    build() {
      return this.parsed;
    }
  };

  var UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['B', 1099511627776]]);

  function parseSize(size) {
    if (UNITS.has(size.substr(-1))) {
      let unit = size.substr(-1);
      let factor = UNITS[unit];

      size = size.substr(0, size.length - 1);

      return parseInt(size) * factor;
    } else {
      return parseInt(size);
    }
  }

  function unquoteString(str, quotes) {
    return str.substr(quotes, str.length - quotes * 2);
  }

  function normalizeIdentifier(id) {
    return id[0] === '`' ? id.substr(1, id.length - 2) : id;
  }

  function normalizeDotName(name) {
    return name.split('.').map(n => normalizeIdentifier(n.trim())).join('.');
  }

  function normalizeReference(ref) {
    return {
      oolType: 'ObjectReference',
      name: ref.substr(1)
    };
  }

  var KEYWORDS = new Set([
        "not", "and", "or", "xor", "mod", "div", "in", "is", "like", //operators
        'int', 'integer', 'number', 'text', 'bool', 'boolean', 'blob', 'binary', 'datetime', 'date', 'time', 'year', 'timestamp', 'json', 'xml', 'enum', 'csv',
        'exact', 'unsigned', "only", "fixedLength",
        "import", "type", "entity", "schema", "database", "relation", "default", "auto", "entities", "data", "comment",
        "with", "has", "have", "key", "index", "as", "unique", "for",
        "every", "may", "a", "several", "many", "great", "of", "one", "to", "an",
        "optional", "readOnly", "fixedValue", "forceUpdate",
        "interface", "accept", "do", "select", "where", "return", "exists", "null", "otherwise", "unless", "find", "by", "case",
        "skip", "limit", "update", "create", "delete", "set", "throw", "error",
        "view", "order", "list", "asc", "desc", "views", "group", "skip",
        "document", "contains", "being", "which"
    ]);

  var BRACKET_PAIRS = {
    '}': '{',
    ']': '[',
    ')': '('
  };

  var DB_TYPES = new Set([
        "mysql", "mongodb"
    ]);

  var BUILTIN_TYPES = new Set(['int', 'float', 'decimal', 'text', 'bool', 'binary', 'datetime', 'json', 'xml', 'enum', 'csv']);

  var BUILTIN_TYPE_ATTR = [
        'type',
        'digits',
        'range',
        'values',
        'unsigned',
        'totalDigits',
        'maxLength',
        'fixedLength'
    ];

  if (typeof exports !== 'undefined') {
    exports.BUILTIN_TYPES = BUILTIN_TYPES;
    exports.BUILTIN_TYPE_ATTR = BUILTIN_TYPE_ATTR;
    exports.KEYWORDS = KEYWORDS;
  }

  var state;
  /* generated by jison-lex 0.3.4 */
  var lexer = (function () {
    var lexer = ({

      EOF: 1,

      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },

      // resets the lexer, sets new input
      setInput: function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0
        };
        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
      },

      // consumes and returns one char from the input
      input: function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }
        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },

      // unshifts one char (or a string) into the input
      unput: function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
            (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
      },

      // When called from action, caches matched text and appends it on next action
      more: function () {
        this._more = true;
        return this;
      },

      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function () {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });

        }
        return this;
      },

      // retain first n characters of the match
      less: function (n) {
        this.unput(this.match.slice(n));
      },

      // displays already matched input, i.e. for error messages
      pastInput: function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
      },

      // displays upcoming input, i.e. for error messages
      upcomingInput: function () {
        var next = this.match;
        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }
        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
      },

      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
      },

      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function (match, indexed_rule) {
        var token,
          lines,
          backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done
          };
          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno += lines.length;
        }
        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines ?
            lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
          this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
          this.done = false;
        }
        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }
          return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
      },

      // return next match in input
      next: function () {
        if (this.done) {
          return this.EOF;
        }
        if (!this._input) {
          this.done = true;
        }

        var token,
          match,
          tempMatch,
          index;
        if (!this._more) {
          this.yytext = '';
          this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);
          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;
            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);
              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }
        if (match) {
          token = this.test_match(match, rules[index]);
          if (token !== false) {
            return token;
          }
          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
          return false;
        }
        if (this._input === "") {
          return this.EOF;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });
        }
      },

      // return next match that has a token
      lex: function lex() {
        var r = this.next();
        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },

      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },

      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },

      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
          return this.conditions["INITIAL"].rules;
        }
      },

      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return "INITIAL";
        }
      },

      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },

      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: {},
      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
        case 0:
          return 5;
          break;
        case 1: //start the program
          this.unput(yy_.yytext);
          this.begin('EMPTY');

          state = new ParserState();

          break;
        case 2:
          if (this.topState(0) === 'INLINE' && !state.comment && !state.eof) {
            this.unput(' ');

            state.eof = true;
            this.begin('EMPTY');
            return 7;

          } else if (state.indents.length > 1) {
            //reach end-of-file, but a current block still not in ending state

            //put back the eof
            this.unput(' ');

            //dedent all
            state.dedentAll();
            state.eof = true;
            this.begin('DEDENTS');

          } else {
            this.begin('INITIAL');
            return 5;
          }

          break;
        case 3:
          state.indent++;
          break;
        case 4:
          state.indent = (state.indent + 8) & -7;
          break;
        case 5:
          state.indent = 0;
          if (state.comment) state.comment = false;
          break;
        case 6:
          state.comment = true;
          break;
        case 7:
          this.unput(yy_.yytext)
            //compare the current indents with the last
          var last = state.lastIndent;
          if (state.indent > last) {
            //new indent
            state.doIndent();
            this.begin('INLINE');
            return 18;

          } else if (state.indent < last) {
            //dedent
            state.doDedent();
            if (!state.hasIndent) {
              throw new Error("Inconsistent indentation.");
            }
            this.begin('DEDENTS');

          } else {
            //same indent
            this.begin('INLINE');
          }

          break;
        case 8:
          if (state.dedents-- > 0) {
            this.unput(yy_.yytext);
            return 20;

          } else if (state.eof) {
            this.popState();

          } else {
            this.unput(yy_.yytext);
            this.begin('INLINE');
          }

          break;
        case 9:
          yy_.yytext = unquoteString(yy_.yytext, 3);
          return 17;

          break;
        case 10:
          yy_.yytext = unquoteString(yy_.yytext, 1);
          return 17;

          break;
        case 11:
          // implicit line joining
          if (!state.hasBrackets) {
            state.indent = 0;
            this.begin('EMPTY');

            if (state.comment) {
              state.comment = false;
            }

            return 7;
          }

          break;
        case 12:
          /* skip whitespace, separate tokens */
          break;
        case 13:
          if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
            state.brackets.push(yy_.yytext);
          } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
            var paired = BRACKET_PAIRS[yy_.yytext];
            var lastBracket = state.brackets.pop();
            if (paired !== lastBracket) {
              throw new Error("Inconsistent bracket.")
            }
          }
          return yy_.yytext;

          break;
        case 14:
          return 248;
          break;
        case 15:
          yy_.yytext = parseFloat(yy_.yytext);
          return 246;

          break;
        case 16:
          yy_.yytext = parseInt(yy_.yytext);
          return 33;

          break;
        case 17:
          yy_.yytext = parseSize(yy_.yytext);
          return 33;

          break;
        case 18:
          yy_.yytext = normalizeDotName(yy_.yytext);
          return 51;

          break;
        case 19:
          yy_.yytext = normalizeReference(yy_.yytext);
          return 255;

          break;
        case 20:
          return 291;

          break;
        case 21:
          yy_.yytext = (yy_.yytext === 'true');
          return 247;

          break;
        case 22:
          return yy_.yytext;
          break;
        case 23:
          if (KEYWORDS.has(yy_.yytext)) {
            if (state.brackets.indexOf('{') !== -1) {
              return 249;
            }

            return yy_.yytext;
          }

          yy_.yytext = normalizeIdentifier(yy_.yytext);
          return 249;

          break;
        }
      },
      rules: [/^(?:$)/, /^(?:.|\n)/, /^(?:$)/, /^(?: )/, /^(?:\t)/, /^(?:\n)/, /^(?:#.*)/, /^(?:.)/, /^(?:.|$)/, /^(?:(("""(([^\\])|(\\.))*""")|('''(([^\\])|(\\.))*''')))/, /^(?:(("(([^\\\n\"])|(\\.))*")|('(([^\\\n\'])|(\\.))*')))/, /^(?:(\n|\r\n|\r|\f))/, /^(?:( |\t)+)/, /^(?:(\(|\)|\[|\]|\{|\}))/, /^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y\b)*))/, /^(?:(((([0-9])+|((([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((([0-9])*(\.([0-9])+))|(([0-9])+\.))))/, /^(?:((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/, /^(?:(((((([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|B)))/, /^(?:(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`))(\.((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))+))/, /^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`))(\.((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))+)|((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))))/, /^(?:(((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`))(\.((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))+)|((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))\.\*))/, /^(?:((true)|(false)))/, /^(?:((~|,|:|\||--|->|=>|<->|<-)|(!=|>=|<=|>|<|=)|(\+|-|\*|\/)))/, /^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|(`((_|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*`)))/],
      conditions: {
        "INITIAL": {
          "rules": [0, 1],
          "inclusive": true
        },
        "EMPTY": {
          "rules": [2, 3, 4, 5, 6, 7],
          "inclusive": true
        },
        "DEDENTS": {
          "rules": [8],
          "inclusive": true
        },
        "INLINE": {
          "rules": [2, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],
          "inclusive": true
        }
      }
    });
    return lexer;
  })();
  parser.lexer = lexer;

  function Parser() {
    this.yy = {};
  }
  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = oolong;
  exports.Parser = oolong.Parser;
  exports.parse = function () {
    return oolong.parse.apply(oolong, arguments);
  };
  exports.main = function commonjsMain(args) {
    if (!args[1]) {
      console.log('Usage: ' + args[0] + ' FILE');
      process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
  };
  if (typeof module !== 'undefined' && require.main === module) {
    exports.main(process.argv.slice(1));
  }
}